<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clean</title>
  
  <subtitle>Carol</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunxiaojie99.github.io/"/>
  <updated>2021-03-12T16:35:19.413Z</updated>
  <id>https://sunxiaojie99.github.io/</id>
  
  <author>
    <name>Carol Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Deep Residual Learning for Image Recognition</title>
    <link href="https://sunxiaojie99.github.io/2020/06/17/resnet/"/>
    <id>https://sunxiaojie99.github.io/2020/06/17/resnet/</id>
    <published>2020-06-17T07:46:52.000Z</published>
    <updated>2021-03-12T16:35:19.413Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="deep-residual-learning-for-image-recognition">Deep Residual Learning for Image Recognition</span><a href="#deep-residual-learning-for-image-recognition" class="header-anchor">#</a></h1><div class="toc"><!-- toc --><ul><li><a href="#1-introduction-fang-fa-gai-shu">1. Introduction（方法概述）</a><ul><li><a href="#1-1-ti-chu">1.1 提出</a></li><li><a href="#1-2-xiao-guo">1.2 效果</a></li></ul></li><li><a href="#2-xiang-guan-gong-zuo-he-ta-ren-de-dui-bi">2. 相关工作（和他人的对比）</a><ul><li><a href="#2-1-can-chai-biao-shi">2.1 残差表示</a></li><li><a href="#2-2-shortcut-lian-jie">2.2 Shortcut连接</a></li></ul></li><li><a href="#3-deep-residual-learning">3. Deep Residual Learning</a><ul><li><a href="#3-1-deep-residual-learning">3.1 Deep Residual Learning</a></li><li><a href="#3-2-identity-mapping-by-shortcuts">3.2 Identity Mapping by Shortcuts</a></li><li><a href="#3-3-network-architectures"><strong>3.3 Network Architectures</strong></a></li><li><a href="#3-4-implementation"><strong>3.4 Implementation</strong></a></li></ul></li><li><a href="#4-shi-yan-jie-guo">4. 实验结果</a><ul><li><a href="#4-1-imagenet-classification"><strong>4.1 ImageNet Classification</strong></a></li></ul></li></ul><!-- tocstop --><span id="more"></span><p><strong>新的问题</strong>：当深层网络能够收敛时，<strong>退化</strong>问题（degradation problem）又出现了，即随着网络深度的增加，准确率达到饱和（不足为奇）然后迅速退化。意外的是，这种退化<strong>并不是由过拟合造成的</strong>（过拟合是训练集上好，测试集上不好，这里是训练集上也不好）。如图1所示。</p><p><img src="/2020/06/17/resnet/1.png" style="zoom:67%;"></p><blockquote><p>Fig.1 20层和56层的“plain”网络在CIFAR-10上的训练错误率（左）和测试错误率（右）。越深的网络在训练和测试上都具有越高的错误率。</p></blockquote><p><strong>提出</strong>：a residual learning framework （一个残差学习框架），能够简化使那些非常深的网络的训练，该框架使得层能<strong>根据其输入</strong>来学习残差函数（ residual functions）而非原始函数（unreferenced functions）。</p><h2><span id="1-introduction-fang-fa-gai-shu">1. Introduction（方法概述）</span><a href="#1-introduction-fang-fa-gai-shu" class="header-anchor">#</a></h2><p>训练准确率<strong>退化</strong>（degradation (of training accuracy)）的出现表明了并非所有的系统都是很容易优化的。</p><p><strong>讨论1</strong>：比较一个浅层的框架和它的深层版本。对于更深的模型，这有一种通过构建的解决方案：<strong>恒等映射</strong>（identity mapping）来构建增加的层，而其它层直接从浅层模型中复制而来。这个构建的解决方案表明了，一个更深的模型不应当产生比它的浅层版本更高的训练错误率。实验表明，我们目前无法找到一个与这种构建的解决方案相当或者更好的方案（或者说无法在可行的时间内实现）。</p><h3><span id="1-1-ti-chu">1.1 提出</span><a href="#1-1-ti-chu" class="header-anchor">#</a></h3><p><strong>提出</strong>：一种<strong>深度残差学习</strong>框架（ a deep residual learning framework）来解决这个退化问题</p><ul><li>明确的让这些层来拟合<strong>残差映射</strong>（residual mapping），而不是让每一个堆叠的层直接来拟合所需的底层映射（desired underlying mapping）</li><li>假设所需的底层映射为 $H(x)$，我们<strong>让堆叠的非线性层来拟合另一个映射</strong>： $F(x)=H(x)−x$。 因此原来的映射转化为： $F(x)+x$。我们推断残差映射比原始映射（unreferenced mapping）更容易优化。</li><li>公式 $F(x)+x$ 可以通过前馈神经网络的 “<strong>shortcut连接</strong>” 来实现(Fig.2)。（<u>shortcut 连接</u>：就是跳过一个或者多个层。）在我们的例子中，<strong>shortcut 连接只是简单的执行恒等映射，再将它们的输出和堆叠层的输出叠加在一起</strong>(Fig.2)。<strong>恒等的 shortcut 连接并不增加额外的参数和计算复杂度</strong>。完整的网络仍然能通过端到端的SGD反向传播进行训练，并且能够简单的通过公共库来实现。</li></ul><p><img src="/2020/06/17/resnet/2.png" style="zoom:67%;"></p><blockquote><p>Fig.2 残差学习：一个构建块。</p></blockquote><h3><span id="1-2-xiao-guo">1.2 效果</span><a href="#1-2-xiao-guo" class="header-anchor">#</a></h3><p>在ImageNet数据集上进行了综合性的实验来展示这个退化问题并评估了提出的方法。</p><ul><li>1) 我们极深的残差网络是很容易优化的，但是对应的“plain”网络（仅进行层的堆叠的网络）在深度增加时却出现了更高的错误率。</li><li>2) 我们的 deep residual 网络能够轻易的增加层数来提高准确率，并且结果也大大优于以前的网络。</li><li>3) 有非常好的泛化性能，CIFAR-10数据集上也出现了类似的现象，这表明了我们提出的方法的优化难度和效果并不仅仅是对于一个特定数据集而言的。</li></ul><h2><span id="2-xiang-guan-gong-zuo-he-ta-ren-de-dui-bi">2. 相关工作（和他人的对比）</span><a href="#2-xiang-guan-gong-zuo-he-ta-ren-de-dui-bi" class="header-anchor">#</a></h2><h3><span id="2-1-can-chai-biao-shi">2.1 残差表示</span><a href="#2-1-can-chai-biao-shi" class="header-anchor">#</a></h3><ul><li>对于向量量化，<strong>残差向量编码</strong>比原始向量编码更加有效。</li><li>……</li></ul><h3><span id="2-2-shortcut-lian-jie">2.2 Shortcut连接</span><a href="#2-2-shortcut-lian-jie" class="header-anchor">#</a></h3><p>shortcut 连接已经经过了很长的一段实践和理论研究过程。</p><ul><li>训练多层感知器（MLPs）的一个早期实践就是添加一个连接输入和输出的线性层。</li><li>在<a href="https://arxiv.org/abs/1409.4842">Szegedy2015Going</a> 及 <a href="https://arxiv.org/abs/1409.5185">Lee2015deeply</a>中，将一些中间层直接与辅助分类器相连接可以解决梯度消失/爆炸问题。</li><li>在 <a href="https://arxiv.org/abs/1409.4842">Szegedy2015Going</a> 中，一个“<strong>inception</strong>”层由一个 shortcut 分支和一些更深的分支组合而成。</li><li>与此同时，“<strong>highway networks</strong>”将 <strong>shortcut连接</strong> 与门控函数（gating functions）结合起来。这些门（gates）是数据相关并且是有额外参数的，而我们的恒等 shortcuts是<strong>无参数</strong>的。当一个门的 shortcut 是“closed”（接近于0）时，highway网络中的层表示非残差函数。相反的，我们的模型总是学习残差函数；我们的恒等 shortcuts 从不关闭，在学习额外的残差函数时，所有的信息总是通过的。此外，highway网络并不能由增加层的深度（例如， 超过100层）来提高准确率。</li></ul><h2><span id="3-deep-residual-learning">3. Deep Residual Learning</span><a href="#3-deep-residual-learning" class="header-anchor">#</a></h2><h3><span id="3-1-deep-residual-learning">3.1 Deep Residual Learning</span><a href="#3-1-deep-residual-learning" class="header-anchor">#</a></h3><ol><li>我们将 $H(x)$ 看作一个由部分堆叠的层（并不一定是全部的网络）来拟合的底层映射（underlying mapping），其中 $x$ 是这些层的输入。</li><li>假设多个非线性层能够逼近复杂的函数，这就等价于这些层能够逼近复杂的残差函数，例如，$H(x)−x$（假设输入和输出的维度相同）。</li><li>所以我们明确的让这些层来估计一个残差函数：$F(x)=H(x)−x$ 而不是 $H(x)$ 。因此原始函数变成了：$F(x)+x$ 。尽管这两个形式应该都能够逼近所需的函数（正如假设），但是学习的难易程度并不相同。</li></ol><p>这个重新表达的动机是由退化问题这个反常的现象(Fig.1，左)。正如我们在introduction中讨论的，如果增加的层能以恒等映射来构建，一个更深模型的训练错误率不应该比它对应的浅层模型的更大。<strong>退化问题表明了，求解器在通过多个非线性层来估计恒等映射上可能是存在困难的</strong>。而伴随着残差学习的重新表达，如果恒等映射是最优的，那么求解器驱使多个非线性层的权重趋向于零来逼近恒等映射。</p><h3><span id="3-2-identity-mapping-by-shortcuts">3.2 Identity Mapping by Shortcuts</span><a href="#3-2-identity-mapping-by-shortcuts" class="header-anchor">#</a></h3><p>我们在堆叠层上采样残差学习算法。一个构建块如 Fig.2 所示。本文中的构建块定义如下（Eq.1）：</p><p><img src="/2020/06/17/resnet/2.png" style="zoom:67%;"></p><script type="math/tex; mode=display">y = F(x, \{W_i\})+x</script><blockquote><ul><li>其中 $x$ 和 $y$ 分别表示层的输入和输出。</li><li>函数 $F(x, \{W_i\})$ 代表学到的残差映射（residual mapping ）。Fig.2 中的例子包含两层，$F = W_2 σ(W_1 x)$ ，其中$σ$ 代表 ReLU，为了简化省略了偏置项。</li><li>$F+x$ 操作由一个shortcut 连接和元素级（element-wise）加法来表示。</li><li>在加法之后，再执行一个非线性操作（例如，$σ(y)$，如Fig.2） </li></ul></blockquote><ol><li><p>Eq.1中的 <strong>shortcut连接没有增加额外的参数和计算复杂度</strong>。这不仅是一个很有吸引力的做法，同时在对”plain”网络和残差网络进行比较时也是非常重要的。可以在参数、深度、宽度以及计算成本都相同的基础上对两个网络进行公平的比较（除了可以忽略不计的元素级的加法）。</p></li><li><p>在Eq.1中<strong>，$x$ 和 $F$ 的维度必须相同</strong>。如果不相同（例如, 当改变了输入/输出的通道），我们可以通过shortcut<strong>连接执行一个线性映射 $W_s$ 来匹配两者的维度</strong>（Eq.2）（将 $x$ 变换为和 $F$ 相同维度）：</p><script type="math/tex; mode=display">y=F(x,\{W_i\})+W_sx</script></li><li><p>在Eq.1中同样可以使用方阵 $W_s$。但我们的实验表明，恒等映射（identity mapping）已足够解决退化问题（degradation problem ），并且是经济的，因此 <strong>$W_s$ 只是用来解决维度不匹配的问题</strong>。</p></li><li><p><strong>残差函数 $F$ 的形式是灵活可变的。</strong>本文实验中涉及到的函数 $F$ 是两层或者三层的（可以好几层）（Fig.5），当然更多层也是可行的。但是如果 $F$ 只含有一层，Eq.1就和线性函数：$y=W_1x+x$ 一致，因此并不具有任何优势。</p></li></ol><p><img src="/2020/06/17/resnet/3.png" style="zoom:80%;"></p><h3><span id="3-3-network-architectures"><strong>3.3 Network Architectures</strong></span><a href="#3-3-network-architectures" class="header-anchor">#</a></h3><p>我们在多个 plain 网络和残差网络上进行了测试，并都观测到了一致的现象。接下来将在ImageNet上对两个模型进行讨论。</p><p><img src="/2020/06/17/resnet/4.png" alt></p><blockquote><p>Fig.3 对应于ImageNet的网络框架举例。 <strong>左</strong>：VGG-19模型 （196亿个FLOPs）作为参考。<strong>中</strong>：plain网络，含有34个参数层（36 亿个FLOPs）。<strong>右</strong>：残差网络，含有34个参数层（36亿个FLOPs）。虚线表示的shortcuts增加了维度。<strong>Table 1</strong>展示了更多细节和其它变体。</p></blockquote><p><strong>Plain网络</strong></p><p>我们的plain网络结构（Fig.3，中）主要受 VGG网络（Fig.3，左）的启发。<br>卷积层主要为3*3的滤波器，并遵循以下两点要求：</p><ul><li>(i) 输出特征尺寸相同的层含有相同数量的滤波器；</li><li>(ii) 如果特征尺寸减半，则滤波器的数量增加一倍来保证每层的时间复杂度相同。我们直接通过stride 为2的卷积层来进行下采样。在网络的最后是一个全局的 average pooling 层和一个1000 类的包含softmax 的全连接层。加权层的层数为34，如Fig.3(中)所示。</li></ul><p>值得注意的是，我们的模型比VGG网络（Fig.3，左）有更少的滤波器和更低的计算复杂度。我们34层的结构含有36亿个FLOPs（乘-加），而这仅仅只有VGG-19 （196亿个FLOPs）的<strong>18%。</strong></p><p><strong>残差网络 Residual Network</strong></p><p>在以上plain网络的基础上，我们插入shortcut连接(Fig.3，右)，将网络变成了对应的残差版本。</p><ul><li><p>如果输入和输出的维度相同时，可以直接使用<strong>恒等shortcuts</strong> (Eq.1)（Fig.3中的实线部分）。</p></li><li><p>当维度增加时（Fig.3中的虚线部分），考虑两个选项，对于这两个选项，当shortcut跨越两种尺寸的特征图时，均使用stride为2的卷积。</p><ul><li>(A) shortcut仍然使用恒等映射，在增加的维度上使用 0 来填充，这样做不会增加额外的参数</li><li>(B) 使用Eq.2的映射shortcut来使维度保持一致（通过1*1的卷积）。</li></ul></li></ul><p><img src="/2020/06/17/resnet/5.png" alt></p><p>Table 1 对应于ImageNet的结构框架。括号中为构建块的参数(同样见Fig.5)，数个构建块进行堆叠。下采样由stride为2的conv3_1、conv4_1和conv5_1 来实现。</p><h3><span id="3-4-implementation"><strong>3.4 Implementation</strong></span><a href="#3-4-implementation" class="header-anchor">#</a></h3><ul><li><p><strong>图像增强</strong>：针对ImageNet的网络，在[256,480]中对图像的短边进行随机采样（randomly sampled）来调整图像的大小，以进行比例放大（scale augmentation）。 从一张图像或者它的水平翻转（horizontal flip）图像中随机采样一个224*224的剪裁（crop），每个像素都减去均值。使用[21]中的标准颜色增强。</p></li><li><p><strong>标准化</strong>：我们在每一个卷积层之后，激活层之前均使用batch normalization（BN）【<a href="https://www.cnblogs.com/guoyaohua/p/8724433.html】。">https://www.cnblogs.com/guoyaohua/p/8724433.html】。</a></p></li><li><p><strong>初始化</strong>：我们根据<a href="https://www.computer.org/csdl/proceedings/iccv/2015/8391/00/8391b026-abs.html">He2014spatial</a>来初始化权值然后从零开始训练所有plain/残差网络。</p></li><li><p><strong>配置</strong>：使用的mini-batch的尺寸为256。学习率从0.1开始，每当错误率平稳时将学习率除以10，整个模型进行60∗10460∗104次迭代训练。我们将权值衰减设置为0.0001，a 动量为0.9。根据 <a href="https://arxiv.org/abs/1502.03167">Ioffe2015Batch</a>，我们并没有使用Dropout。</p></li><li><p>在测试中，为了进行比较，我们采取标准的<strong>10-crop测试</strong>。</p></li></ul><p>为了达到最佳的结果，我们使用<a href="https://arxiv.org/abs/1409.1556">Simonyan2014Very</a>及<a href="https://www.computer.org/csdl/proceedings/iccv/2015/8391/00/8391b026-abs.html">He2014spatial</a>中的全卷积形式，并在多个尺度的结果上取平均分（调整图像的大小使它的短边长度分别为{224,256,384,480,640}）。</p><hr><p><strong>【注：10-crop】</strong>1-crop和10-crop顾名思义就是进行1次和10次裁剪。举个例子输入图像是256*256的，网络训练所需图像是224×224的。1-corp是从256×256图像中间位置裁一个224 × 224的图像进行训练，而10-corp是先从中间裁一个224 × 224的图像，然后从图像左上角开始，横着数224个像素，竖着数224个像素开始裁剪，同样的方法在右上，左下，右下各裁剪一次。就得到了5张224 × 224的图像，镜像以后再做一遍，总共就有10张图片了。</p><hr><h2><span id="4-shi-yan-jie-guo">4. 实验结果</span><a href="#4-shi-yan-jie-guo" class="header-anchor">#</a></h2><hr><p>【注：Top-1错误率和Top-5错误率】</p><p>首先是TOP-5正确率，举个例子，比如你训练好了一个网络，你要用这个网络去进行图片分类任务，那我假设要分类的数目有50类，那么当我进行测试时，我输入一张图片，网络会依次输出这50个类别的概率，当所有图片测试完成后，那么：TOP-5正确率就是说，在测试图片的50个分类概率中，取前面5个最大的分类概率，正确的标签（分类）有没有在里面，就是它是不是这前5个中的一个，如果是，就是分类成功，那么他的TOP-5正确率此时等于：所有测试图片中正确标签在前五个分类概率的个数/所有的测试图片数</p><p>那么，TOP-5错误率就是正确标记的样本数不在前五个概率里面的样本数除以总的样本数</p><p>同理，TOP-1错误率就是正确标记的样本数不是最佳概率的样本数除以总的样本数</p><hr><h3><span id="4-1-imagenet-classification"><strong>4.1 ImageNet Classification</strong></span><a href="#4-1-imagenet-classification" class="header-anchor">#</a></h3><p>本文在1000类的ImageNet2012数据集上对我们的方法进行评估。训练集包含128万张图像，验证集包含5万张图像。我们在10万张测试图像上进行测试，并对<strong>top-1</strong>和<strong>top-5</strong> 的错误率进行评估。</p><p><strong>对于Plain网络</strong>：评估了18层和34层的plain网络。34层的网络如图Fig.3(中)所示。18层的结构很相似，具体细节参见Table 1。</p><ul><li>34层的Plain网络比18层的Plain网络具有更高的验证错误率，为了揭示<strong>退化问题</strong>，根据Fig.4(左)我们可以看出，在整个训练过程中34 层的网络具有更高的训练错误率。</li><li>认为这种优化上的困难不太可能是由梯度消失所造成的。因为这些plain网络的训练使用了BN，这能保证前向传递的信号是具有非零方差的。我们同样验证了在反向传递阶段的梯度由于BN而具有良好的范式，所以在前向和反向阶段的信号不会存在消失的问题。</li><li>事实上34层的plain网络仍然具有不错的准确率(Table 3)，这表明了求解器在某种程度上也是有效的。</li></ul><p><strong>对于残差网络</strong>：对18层和34层的残差网络ResNets进行评估。如Fig.3 (右)所示，ResNets的基本框架和plain网络的基本相同，除了在每一对3*3的滤波器上添加了一个shortcut连接。从Table 2和Fig.4中观测到以下三点：</p><ul><li>与plain网络相反，34层的ResNet比18层ResNet的结果更优(<strong>2.8%</strong>)。这表明了这种设置可以很好的解决退化问题，并且我们可以由增加的深度来提高准确率。</li><li>与对应的plain网络相比，34层的ResNet在top-1 错误率上降低了<strong>3.5%</strong> (Table 2)。这也验证了在极深的网络中残差学习的有效性。</li><li>18层的plain网络和残差网络的准确率很接近 (Table 2)，但是ResNet 的收敛速度要快得多。(Fig.4 右 vs 左)。如果网络“<strong>并不是特别深</strong>” (如18层)，现有的SGD能够很好的对plain网络进行求解，而ResNet能够使优化得到更快的收敛。</li></ul><p><img src="/2020/06/17/resnet/6.png" alt></p><blockquote><p> Fig.4 在<strong>ImageNet</strong>上进行训练。细曲线为训练错误率，粗曲线为使用中心crop时的验证错误率。左：18和34层的plain网络。右：18 和34层的ResNets。在这个图中，残差网络和对应的plain网络相比并没有增加额外的参数。</p></blockquote><p><img src="/2020/06/17/resnet/7.png" style="zoom:67%;"></p><blockquote><p>Table 2 ImageNet验证集上的Top-1错误率 (%, 10-crop testing)。这里的ResNets并没有额外增加的参数。Fig.4展示了整个训练过程。</p></blockquote><p><img src="/2020/06/17/resnet/8.png" style="zoom:67%;"></p><blockquote><p>Table 3 在ImageNet验证集上的错误率 (%, <strong>10-crop</strong> testing)。VGG-16是基于我们测试的网络。ResNet-50/101/152使用了选项B——利用映射来匹配增加的维度。</p></blockquote><p><img src="/2020/06/17/resnet/9.png" style="zoom:67%;"></p><blockquote><p>Table 4 <strong>单一模型</strong>在ImageNet验证集上的错误率(%)(除了 ++ 是在验证集上的结果)。</p></blockquote><p><img src="/2020/06/17/resnet/10.png" style="zoom:67%;"></p><blockquote><p>Table 5 <strong>组合模型</strong>在ImageNet测试集上的top-5错误率。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Deep-Residual-Learning-for-Image-Recognition&quot;&gt;&lt;a href=&quot;#Deep-Residual-Learning-for-Image-Recognition&quot; class=&quot;headerlink&quot; title=&quot;Deep Residual Learning for Image Recognition&quot;&gt;&lt;/a&gt;Deep Residual Learning for Image Recognition&lt;/h1&gt;&lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-introduction-fang-fa-gai-shu&quot;&gt;1. Introduction（方法概述）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-1-ti-chu&quot;&gt;1.1 提出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#1-2-xiao-guo&quot;&gt;1.2 效果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-xiang-guan-gong-zuo-he-ta-ren-de-dui-bi&quot;&gt;2. 相关工作（和他人的对比）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#2-1-can-chai-biao-shi&quot;&gt;2.1 残差表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-2-shortcut-lian-jie&quot;&gt;2.2 Shortcut连接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-deep-residual-learning&quot;&gt;3. Deep Residual Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#3-1-deep-residual-learning&quot;&gt;3.1 Deep Residual Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-2-identity-mapping-by-shortcuts&quot;&gt;3.2 Identity Mapping by Shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-3-network-architectures&quot;&gt;&lt;strong&gt;3.3 Network Architectures&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-4-implementation&quot;&gt;&lt;strong&gt;3.4 Implementation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-shi-yan-jie-guo&quot;&gt;4. 实验结果&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#4-1-imagenet-classification&quot;&gt;&lt;strong&gt;4.1 ImageNet Classification&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
    
    </summary>
    
    
      <category term="paper-cv" scheme="https://sunxiaojie99.github.io/categories/paper-cv/"/>
    
    
  </entry>
  
  <entry>
    <title>Very Deep Convolutional Networks for Large-Scale Image Recognition</title>
    <link href="https://sunxiaojie99.github.io/2020/06/16/vgg/"/>
    <id>https://sunxiaojie99.github.io/2020/06/16/vgg/</id>
    <published>2020-06-15T16:12:52.000Z</published>
    <updated>2021-03-12T16:35:17.406Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="very-deep-convolutional-networks-for-large-scale-image-recognition">Very Deep Convolutional Networks for Large-Scale Image Recognition</span><a href="#very-deep-convolutional-networks-for-large-scale-image-recognition" class="header-anchor">#</a></h1><div class="toc"><!-- toc --><ul><li><a href="#1-introduction">1. INTRODUCTION</a></li><li><a href="#2-convnet-pei-zhi">2. ConvNet 配置</a><ul><li><a href="#2-1-jia-gou">2.1 架构</a></li><li><a href="#pei-zhi">配置</a></li><li><a href="#2-3-tao-lun">2.3 讨论</a></li></ul></li><li><a href="#3-fen-lei-kuang-jia">3 分类框架</a><ul><li><a href="#3-1-training">3.1 Training</a></li><li><a href="#3-2-testing">3.2 Testing</a></li></ul></li><li><a href="#4-classification-shi-yan">4. classification 实验</a><ul><li><a href="#4-1-tu-xiang-dan-chi-du-ping-gu">4.1 （图像）单尺度评估</a></li><li><a href="#4-2-duo-chi-du-ping-gu-multi-scale">4.2 多尺度评估 multi-scale</a></li><li><a href="#4-3-duo-cai-qie-tu-xiang-ping-gu-muti-crop">4.3 多裁切图像评估 muti-crop</a></li><li><a href="#4-4-juan-ji-wang-luo-rong-he-convnet-fusion">4.4 卷积网络融合 Convnet Fusion</a></li></ul></li><li><a href="#5-jie-lun">5. 结论</a></li></ul><!-- tocstop --></div><p>[TOC]</p><p>论文时间：2015年</p><ul><li>研究内容：大规模图像识别任务下卷积网络深度对其预测准确率的影响</li><li>主要贡献：使用具有非常小的（3×3）卷积滤波器（convolution filters）的架构对深度不断递增的网络进行全面评估。</li></ul><p>VGG模型论文探讨并证明了以下观点：</p><ol><li>用多层的卷积层组合配以小尺寸的滤波器（3 <em> 3），能实现大尺寸滤波器的感受野的同时，还能使参数数量更少；（其他模型可能会用11</em>11，stride=4的卷积核）</li><li>加深模型深度可以获得更好的分类结果</li><li>训练期间分阶段降低学习率有助模型收敛；</li><li>在数据增强方面，训练时：随机从rescale后的图中裁出224*224的区域（如果rescale后的图很大，那截取到的只是图中的一部分），接下来后再水平翻转，RGB通道随机变换；测试时候，将模型的全连接改成卷积。</li></ol><span id="more"></span><h2><span id="1-introduction">1. INTRODUCTION</span><a href="#1-introduction" class="header-anchor">#</a></h2><p>本文解决了ConvNet架构设计的一个重要方面——深度。为此，固定（v）了结构中的其他参数，并通过<strong>增加更多的卷积层来稳步增加网络的深度</strong>，这是可行的，因为在所有层中都使用了<strong>非常小的（3×3）卷积滤波器（convolution filters）</strong>。</p><h2><span id="2-convnet-pei-zhi">2. ConvNet 配置</span><a href="#2-convnet-pei-zhi" class="header-anchor">#</a></h2><p>为了衡量ConvNet深度在公平环境中所带来的改进，我们所有的ConvNet层配置都采用相同的原则设计。在本部分中，首先描述ConvNet配置的通用布局（第2.1节），然后详细说明评估中使用的具体配置（第2.2节）。 然后（第2.3节）讨论我们的设计选择，并与现有技术进行比较。</p><h3><span id="2-1-jia-gou">2.1 架构</span><a href="#2-1-jia-gou" class="header-anchor">#</a></h3><p>在训练期间，ConvNets的输入是固定尺寸的224×224 RGB图像。</p><ul><li>预处理：唯一做的预处理是从每个像素中<strong>减去在训练集上计算的RGB均值</strong>。</li><li>图像通过堆叠的卷积层，其中使用了感受野（receptive field）非常小的<strong>卷积核（filters ）：3×3</strong>（这是左/右，上/下，中心点概念可捕获的最小尺寸）。</li><li>在其中一种配置中，我们还使用1×1卷积滤波器，这可以看作是输入通道的线性变换（随后是非线性）。</li><li>卷积<strong>步长 stride</strong> 固定为1个像素；</li><li><strong>卷积层的空间填充</strong>（spatial padding）是指，使得在卷积操作后保留原空间的分辨率（resolution），比如如果使用3×3 卷积核，就填充1个像素。</li><li><strong>空间池化（Spatial pooling ）</strong>是由五个最大池化层完成的，每个池化层前面都会有若干个卷积层（并非所有的卷积层后都使用最大池化层）。 </li><li><strong>Max-pooling 最大池化</strong>是以2×2像素窗口上执行，步幅为2。</li><li>堆叠的卷积层（在不同的体系结构中具有不同的深度）之后是三个<strong>完全连接（FC）层</strong>：前两个具有4096个通道，第三个执行1000类别的ILSVRC分类，因此包含1000个通道（一个 为每个类）。</li><li>最后一层是<strong>soft-max层</strong>。 全连接层的配置在所有网络中都是相同的。</li><li><u>所有隐藏层</u>都配备了<strong>ReLU激活函数</strong>。注意到我们的网络（除了一个网络）都没有包含局部响应归一化层标准化（LRN Local Response Normalisation）。这种标准化不会提升ILSVRC数据集的性能，但会导致内存消耗和计算时间的增加。</li></ul><h3><span id="pei-zhi">配置</span><a href="#pei-zhi" class="header-anchor">#</a></h3><p>本文中评估的ConvNet配置在表1中列出，每列一个。 下面我们将以他们的名字（A-E）来提及。 </p><p>所有的配置都遵循2.1节中提到的通用设计，并且仅在深度上有所不同：从网络A中的11个权重层（weight layers）（8个卷积层和3个全连接层）到网络E中的19个权重层（weight layers）（16个卷积层和3个全连接层）。</p><p>卷积层的宽度（通道 channel 数量）相当小，从第一层的64开始，然后在每个最大池层后增加1倍，直到达到512。</p><p>在表2中，我们报告了每个配置的参数数目。 <u>尽管深度很大，但我们网络的权重数量不会超过那些深度较小、但卷积核和感受野宽度更大的网络</u>。</p><p><img src="/2020/06/16/vgg/1.png" style="zoom:67%;"></p><p>注意到在没有任何标准化层的情况下，使用局部响应标准化（ local response normalisation）（A-LRN网络）在模型A上没有改进。 因此，我们在深层架构（B-E）中不采用标准化层。</p><h3><span id="2-3-tao-lun">2.3 讨论</span><a href="#2-3-tao-lun" class="header-anchor">#</a></h3><p><strong>区别性</strong>：我们 ConvNet配置与 ILSVRC-2012以及 ILSVRC-2013的最佳模型相比有着较大差别。区别于<strong>之前的模型在首层卷积层所使用的较大的感受野</strong>（比如11x11卷积核配合步幅4（Krizhevsky et al., 2012），7x7卷积核配合步幅2（Zeiler &amp; Fergus, 2013; Sermanet et al., 2014）），<strong>我们整体都使用了非常小的3x3卷积核配合步幅1</strong>。</p><p><strong>等效性</strong>：显而易见的是，用两层的3x3卷积层组合（中间不包含池化层）所得到的感受野相当于一层的5x5卷积层的感受野；而三层这样的卷积层组合所得到的感受野相当于一层的7x7卷积核的感受野。</p><p><strong>更强的分辨力</strong>：如果我们用三层3x3的卷积层组合来代替一层7x7卷积层，我们会得到什么呢？首先，我们并入了三个ReLU激活函数，而不是一个，这使决策功能的分辨力更强。 </p><p><strong>更少的参数</strong>：其次，我们减少参数的数量：假设三层3×3卷积层相叠的输入和输出都具有C个通道，则该叠层参数化为 $3×(3^2C^2)=27C^2$ 个权重; 同时，一个7×7 卷积层需要 $7^2C^2=49C^2$  参数，参数量会增加 81％。 这<u>可以被看作是在7×7卷积中实施正规化</u>（regularisation）， <u>迫使他们通过3×3卷积核进行分解</u>（两者之间注入非线性）。</p><p><strong>1×1卷积核</strong>：纳入1×1卷积核（配置C，表1）是一种<u>增加决策函数的非线性而不影响卷积层感受野</u>的方法。 尽管在我们的例子中，1×1卷积本质上是一个线性投影到相同维度的空间上（输入和输出通道的数目是相同的），但激活函数引入了一个额外的非线性。 </p><p><strong>与其他工作的对比</strong>：</p><ol><li>大规模数据集+更深：Ciresan等人以前曾使用过小尺寸的卷积滤波器 （2011年），但他们的网络明显不如我们的深，并且他们没有对大规模ILSVRC数据集进行评估。</li><li>Goodfellow等人（2014）将深度ConvNets（11个权重层）应用于街道号识别任务，并表明增加深度能获得更好的性能。</li><li>GoogLeNet（Szegedy et al.，2014）是ILSVRC-2014分类任务中性能最好的一个入门版本，它的开发与我们的工作无关，但它的基础是非常深的ConvNets（22个加权层）和小卷积滤波器（除3×3外，还使用1×1和5×5卷积）。并且，它们的网络拓扑结构比我们的要复杂，并且在第一层更积极地降低了特征图的空间分辨率，以减少计算量。正如将在4.5节中所显示的那样，我们的模型超过了Szegedy等人的模型（2014年）的单网分类准确性。</li></ol><h2><span id="3-fen-lei-kuang-jia">3 分类框架</span><a href="#3-fen-lei-kuang-jia" class="header-anchor">#</a></h2><p>之前介绍了网络配置的细节。 在本节中，我们将介绍ConvNet训练和评估的分类细节。</p><h3><span id="3-1-training">3.1 Training</span><a href="#3-1-training" class="header-anchor">#</a></h3><p>训练是通过使用<strong>小批量梯度下降</strong>（mini-batch gradient descent）（基于反向传播）的<strong>动量优化多项逻辑回归目标</strong>（optimising the multinomial logistic regression objective with momentum）来实现的。</p><p><strong>具体配置细节：</strong></p><ul><li><p><u>批量大小（batch size）</u>设置为256，<u>动量（momentum）</u>为0.9。 训练通过<u>weight 衰减</u>（L2惩罚系数设置为 $5·10^{-4}$ ）和前两个全连接层（<u>dropout</u>设置为0.5）的dropout正则化来调整。 </p></li><li><p><u>学习率</u>最初设置为 $10^{-2}$ ，然后在验证集精度停止增长时再降低10倍。 总的来说，学习率（learning rate）一共降低了3次，并且在370K个迭代（74代）后停止了学习。 </p></li><li><p>我们推测，尽管与（Krizhevsky et al.，2012）相比，网络的参数数量更多，网络深度也更大，但能用更少的迭代次数来实现收敛，由于：（a）更大深度和更小卷积核所带来的隐式正则化；（b）某些图层的预初始化。</p></li></ul><p><strong>网络权重的初始化</strong>很重要，因为由于深度网络中的梯度不稳定，初始化不好可能会导致学习停滞。 </p><ol><li>为了避免这个问题，我们从训练配置A（表1）开始，这个网络足够浅，可以随机初始化进行训练。 </li><li>然后，当训练更深的体系结构时，我们使用了网络A的权值来初始化了前四个卷积层和最后三个完全连接的层，（中间层随机初始化）。</li><li>我们没有降低预初始化图层的学习速率，允许它们在学习期间改变。 对于随机初始化（如有），我们从具有零均值和 <img src="https://www.zhihu.com/equation?tex=10%5E%7B%E2%88%922%7D" alt="[公式]"> 方差的正态分布采样权重。 偏差初始化为零。 </li></ol><p><strong>图像缩放</strong>：</p><p>为了获得224×224固定大小的 ConvNet输入图像，他们从重新缩放的训练图像中随机裁剪（每个SGD迭代每个图像裁剪一次）。 为了进一步增强训练集，被裁剪的图像经过随机水平翻转和随机RGB颜色偏移处理（Krizhevsky et al.，2012）。 下面将介绍训练图像缩放。</p><p><strong>训练图像尺寸。</strong> 设S是等比例缩放的训练图像的最小边，ConvNet基于这些图像的裁剪作为输入（我们也称S为训练尺度）。 裁剪大小固定为224×224，但原则上S可以取不小于224的任何值：对于S = 224，裁剪图将捕获整幅图像统计数据，完全跨越训练图像的最小边; 对于S&gt;&gt;224，裁剪图将对应于图像的一小部分，包含一个小物体或一个物体部分。</p><p><strong>考虑设定训练尺度S的两种方法</strong>。</p><ol><li>第一种方法是<strong>固定S</strong>，对应于单尺度训练（single-scale training）。 在实验中，评估了以两个固定尺度训练的模型：S = 256和S = 384。给定一个ConvNet配置，我们首先使用S = 256来训练网络。为了<strong>加速</strong>S = 384网络的训练，<u>它被初始化为具有S = 256的预训练权重，并且我们使用较小的学习率初始值为 $10^{-3}$</u> 。</li><li><strong>设定S的第二种方法是多尺度训练 (multi-scale training)</strong>，其中通过从特定范围[Smin，Smax]（我们使用Smin = 256和Smax = 512）随机采样S来单独重新调整每个训练图像。 由于图像中的物体可能具有不同的大小，因此在训练时考虑到这一点是有益的。 这可以看作是通过缩放抖动(scale jittering)来<strong>增强训练集( training set augmentation)</strong>，其中单个模型被训练以识别多种类别的物体。 出于<strong>速度</strong>的原因，<u>我们通过对具有相同配置的单尺度模型的所有层进行微调来训练多尺度模型，并使用固定的S = 384进行预训练</u>。</li></ol><h3><span id="3-2-testing">3.2 Testing</span><a href="#3-2-testing" class="header-anchor">#</a></h3><p>测试时，给定一个训练有素的ConvNet和一个输入图像，它按以下方式分类。</p><ol><li>将其等比例缩放到预定义的最小边，表示为Q（我们也将其称为测试尺度）</li><li>然后，网络以类似于（Sermanet等人，2014）的方式被密集地应用在重新缩放的测试图像上。也就是说，全连接的层首先被转换成卷积层（第一个FC层转为7×7的卷积层，后两个FC层转为1×1 卷积层）。然后将所得的全卷积网络应用于整个（未裁剪的）图像。</li><li>其结果是一个类别得分映射，其类别数等于任务的目标分类数，以及一个可变的空间分辨率，取决于输入图像的大小。</li><li>最后，为了获得固定大小的图像类别分数的向量，类别得分映射会被空间平均（sum-pooled）。</li><li>我们还通过水平翻转(horizontal flipping)图像来增强测试集；对原始图像和翻转图像的softmax分类概率进行平均以获得图像的最终分数。</li></ol><p>使用大量的裁剪图像，可以提高准确性，因为与全卷积网络相比，它可以更精细地对输入图像进行采样。此外，由于卷积边界条件不同，<strong>多裁剪图像评估</strong>与<strong>密集评估</strong>是互补的：</p><ul><li>将ConvNet应用于裁剪图像时，卷积后的特征映射用零填充</li><li>而在密集评估的情况下，同一裁切图像的填充天然地来自于图像的相邻部分（由于卷积和空间池化），这大大增加了整个网络的感受野，因此捕获更多的上下文信息。</li><li>尽管我们认为在实践中增加多裁切图像(multiple crops )的计算时间并不能证明潜在的准确度增加，但我们对于每种尺寸规模（5×5个常规栅格和2种翻转）都使用50个裁切图像来评估我们的网络，总共150个裁切图像(crops)、超过3个尺度(scales)，这与Szegedy等人使用的4种尺度、144个裁切图像相当 （2014）。</li></ul><h2><span id="4-classification-shi-yan">4. classification 实验</span><a href="#4-classification-shi-yan" class="header-anchor">#</a></h2><h3><span id="4-1-tu-xiang-dan-chi-du-ping-gu">4.1 （图像）单尺度评估</span><a href="#4-1-tu-xiang-dan-chi-du-ping-gu" class="header-anchor">#</a></h3><ul><li>首先，我们注意到在没有任何标准化层的情况下，<u>使用局部响应标准化（A-LRN网络）在模型A上没有改进</u>。 因此，我们在深层架构（B-E）中不采用标准化层。</li><li>其次，我们观察到<u>分类错误随着ConvNet深度的增加而减少</u>：从模型A的11层到模型E的19层。</li><li>值得注意的是，尽管深度相同，配置C（其包含三个1×1的转换层），比整个网络全部使用3×3 卷积的配置D更差。这表明<u>虽然额外的非线性确实有帮助（C比B好），但使用感受野范围不少的卷积核（D比C好）捕获空间上下文也很重要</u>。</li><li>当深度达到19层时，<u>我们架构的错误率会饱和</u>，但即使是更深的模型也可能对更大的数据集有所帮助。</li><li>我们还特意以B网络为基准，把每两层3x3卷积替换为一层5×5 卷积核的浅网进行比较（其具有与B网络相同的感受野，见2.3节中解释）。该浅层网络的Top-1误差比B网络（用中心裁切图像）的误差高7％，这证实了<u>带有小型卷积核的深网优于具有更大卷积核的浅网</u>。</li><li>最后，即使在测试时使用单尺度图像，训练时的图像缩放（S∈[256; 512]）比起图像固定最小边（S = 256或S = 384）得到明显更好的结果。 这证实了<u>通过尺度抖动来增强训练集确实有助于捕获多尺度图像统计信息</u>。</li></ul><p><img src="/2020/06/16/vgg/2.png" style="zoom:67%;"></p><h3><span id="4-2-duo-chi-du-ping-gu-multi-scale">4.2 多尺度评估 multi-scale</span><a href="#4-2-duo-chi-du-ping-gu-multi-scale" class="header-anchor">#</a></h3><p>在评估了ConvNet模型的单一尺度后，我们现在<u>评估测试时尺度抖动的影响</u>。</p><p>包括在一个测试图像的多个缩放版本上运行模型（对应于不同的Q值），然后对结果分类的后验概率进行平均。</p><p> 考虑到训练和测试所用尺度的巨大差异会导致性能下降</p><ul><li>用固定S训练的模型在三个图像尺寸上进行测试评估，测试尺寸接近训练尺寸：Q = {S - 32，S，S + 32}。 </li><li>同时，训练时的尺度抖动可使网络在测试时使用更广泛的尺度范围，所以模型用变量 S∈[Smin, Smax] ，在更大范围的尺寸Q = {Smin，0.5(Smin + Smax)，Smax}下评估。</li></ul><p>结论：</p><ul><li>表4中所示的结果表明，<strong>在测试时的尺度抖动可得到更好的性能</strong>（与在单尺度上评估相同模型相比，如表3所示）。</li><li>与以前一样，最深的配置（D和E）表现最好，而使用缩放抖动的训练模型优于使用固定最小边S的训练模型。</li></ul><p><img src="/2020/06/16/vgg/4.png" style="zoom:67%;"></p><h3><span id="4-3-duo-cai-qie-tu-xiang-ping-gu-muti-crop">4.3 多裁切图像评估 muti-crop</span><a href="#4-3-duo-cai-qie-tu-xiang-ping-gu-muti-crop" class="header-anchor">#</a></h3><p>在表5中，我们将密集的（dense）ConvNet评估与多裁切图像（mult-crop ）评估进行比较（详情请参见3.2节）。 我们还通过softmax输出均值来评估两种评估技术的互补性。 可以看出，<u>使用多裁切图像的表现略好于密集评估，而且这两种方法确实是互补的，因为它们的组合优于其中的每一种</u>。 如上所述，我们假设这是由于对卷积边界条件的不同处理。</p><p><img src="/2020/06/16/vgg/5.png" alt></p><h3><span id="4-4-juan-ji-wang-luo-rong-he-convnet-fusion">4.4 卷积网络融合 Convnet Fusion</span><a href="#4-4-juan-ji-wang-luo-rong-he-convnet-fusion" class="header-anchor">#</a></h3><p>到目前为止，我们评估了单个ConvNet模型的性能。 在这部分实验中，我们<strong>通过模型的softmax分类后验概率均值来合并几个模型的输出</strong>。 由于模型的互补性，这提高了性能，这种方法在2012年和2013年的最优ILSVRC提交中使用过。</p><p>结果如表6所示。到ILSVRC提交时，我们只训练单尺度网络以及多尺度模型D（通过仅对完全连接层而不是所有层进行微调）。 </p><ul><li>由此产生的7个网络的融合模型具有7.3％的ILSVRC测试错误率。</li><li>提交之后，我们考虑了只有两个表现最好的多尺度模型（配置D和E）的集合，它使用密集评估将测试错误率降低到7.0％</li><li>而使用组合密集和多裁切图像评估将测试错误率则降低到6.8％。 作为参考，我们表现最佳的单模型实现了7.1％的误差（模型E，表5）。</li></ul><p><img src="/2020/06/16/vgg/6.png" alt></p><h2><span id="5-jie-lun">5. 结论</span><a href="#5-jie-lun" class="header-anchor">#</a></h2><p>在这项工作中，评估了用于大规模图像分类的深层卷积网络（多达19个权值层）。 已经证明，表示层的深度有利于分类准确性，并且通过大幅增加网络深度便可以使用传统的ConvNet架构来实现ImageNet挑战数据集上的最新性能（LeCun等，1989; Krizhevsky等， 2012）。 在附录中，我们还展示了我们的模型能很好地泛化应用于其他的任务和数据集，不亚于甚至性能优于那些深度略浅、更复杂的识别流水线。 我们的结果再一次证实了视觉表示中深度的重要性。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Very-Deep-Convolutional-Networks-for-Large-Scale-Image-Recognition&quot;&gt;&lt;a href=&quot;#Very-Deep-Convolutional-Networks-for-Large-Scale-Image-Recognition&quot; class=&quot;headerlink&quot; title=&quot;Very Deep Convolutional Networks for Large-Scale Image Recognition&quot;&gt;&lt;/a&gt;Very Deep Convolutional Networks for Large-Scale Image Recognition&lt;/h1&gt;&lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-introduction&quot;&gt;1. INTRODUCTION&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-convnet-pei-zhi&quot;&gt;2. ConvNet 配置&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#2-1-jia-gou&quot;&gt;2.1 架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pei-zhi&quot;&gt;配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-3-tao-lun&quot;&gt;2.3 讨论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-fen-lei-kuang-jia&quot;&gt;3 分类框架&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#3-1-training&quot;&gt;3.1 Training&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-2-testing&quot;&gt;3.2 Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-classification-shi-yan&quot;&gt;4. classification 实验&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#4-1-tu-xiang-dan-chi-du-ping-gu&quot;&gt;4.1 （图像）单尺度评估&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-2-duo-chi-du-ping-gu-multi-scale&quot;&gt;4.2 多尺度评估 multi-scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-3-duo-cai-qie-tu-xiang-ping-gu-muti-crop&quot;&gt;4.3 多裁切图像评估 muti-crop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-4-juan-ji-wang-luo-rong-he-convnet-fusion&quot;&gt;4.4 卷积网络融合 Convnet Fusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-jie-lun&quot;&gt;5. 结论&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;

&lt;p&gt;[TOC]&lt;/p&gt;
&lt;p&gt;论文时间：2015年&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;研究内容：大规模图像识别任务下卷积网络深度对其预测准确率的影响&lt;/li&gt;
&lt;li&gt;主要贡献：使用具有非常小的（3×3）卷积滤波器（convolution filters）的架构对深度不断递增的网络进行全面评估。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VGG模型论文探讨并证明了以下观点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用多层的卷积层组合配以小尺寸的滤波器（3 &lt;em&gt; 3），能实现大尺寸滤波器的感受野的同时，还能使参数数量更少；（其他模型可能会用11&lt;/em&gt;11，stride=4的卷积核）&lt;/li&gt;
&lt;li&gt;加深模型深度可以获得更好的分类结果&lt;/li&gt;
&lt;li&gt;训练期间分阶段降低学习率有助模型收敛；&lt;/li&gt;
&lt;li&gt;在数据增强方面，训练时：随机从rescale后的图中裁出224*224的区域（如果rescale后的图很大，那截取到的只是图中的一部分），接下来后再水平翻转，RGB通道随机变换；测试时候，将模型的全连接改成卷积。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="paper-cv" scheme="https://sunxiaojie99.github.io/categories/paper-cv/"/>
    
    
  </entry>
  
  <entry>
    <title>Densely Connected Convolutional Networks</title>
    <link href="https://sunxiaojie99.github.io/2020/06/01/dccn/"/>
    <id>https://sunxiaojie99.github.io/2020/06/01/dccn/</id>
    <published>2020-06-01T03:28:52.000Z</published>
    <updated>2021-03-12T16:35:24.189Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="densely-connected-convolutional-networks">Densely Connected Convolutional Networks</span><a href="#densely-connected-convolutional-networks" class="header-anchor">#</a></h1><p>时间：2018-6</p><p><strong>摘要</strong>：最近的工作表明，如果在靠近输入的层和靠近输出的层之间包含更短的连接，那么卷积网络可以显著地更深、更准确、更有效。DenseNet 根据这一观察结果，将每一层以前馈的方式连接到其余的每一层。传统的具有 $L$ 层的卷积网络有 $L$ 个连接（每层与其后续层之间有一个），我们的网络拥有 $L(L+1)/2$ 个直连接（$ C_{L}^{2}$）。对于每一层，使用前面所有层的特征图作为输入，它自己的特征图作为所有后续层的输入。</p><p>DenseNet 有以下几个<strong>优点</strong>：</p><ol><li>减轻了梯度消失带来的问题</li><li>增强了特征的传播</li><li>鼓励特征重用</li><li>大大减少了参数量</li></ol><div class="toc"><!-- toc --><ul><li><a href="#yin-yan">引言</a></li><li><a href="#xiang-guan-gong-zuo">相关工作</a></li><li><a href="#densenets">DenseNets</a></li><li><a href="#shi-yan">实验</a></li><li><a href="#tao-lun">讨论</a><ul><li><a href="#model-compactness-mo-xing-jin-cou-xing">Model compactness 模型紧凑型</a></li><li><a href="#implicit-deep-supervision-yin-shi-shen-du-jian-du">Implicit Deep Supervision 隐式深度监督</a></li><li><a href="#stochastic-vs-deterministic-connection">Stochastic vs. deterministic connection</a></li></ul></li></ul><!-- tocstop --></div><p>[TOC]</p><span id="more"></span><p>源码：<a href="https://www.cnblogs.com/yjphhw/p/10034265.html">https://www.cnblogs.com/yjphhw/p/10034265.html</a></p><p><a href="https://gitee.com/sxjhello/vision/blob/master/torchvision/models/densenet.py">https://gitee.com/sxjhello/vision/blob/master/torchvision/models/densenet.py</a></p><h2><span id="yin-yan">引言</span><a href="#yin-yan" class="header-anchor">#</a></h2><p>各种CNN已经成为了视觉对象识别的主流机器学习方法。虽然它们最初是在20多年前引入，但直到最近才得到更近一步的发展。最初的LeNet5 包含5层，VGG 有19 层，直到 Highway Networks 和  Residual Networks（ResNets）的出现，才达到了100层之上。</p><p>随着 CNN 变得越来越深，梯度消失问题出现了：当关于输入或梯度的信息传递了很多层之后，当它到达网络的末端（或开始）时，它可能消失。 </p><p>因为<strong>梯度消失</strong>的问题，提出了许多解决办法。<u>Highway Net</u> 和 <u>ResNet</u> 通过身份连接（identity connections）将信号从一层传到下一层。<u>Stochastic depth</u> 通过随机丢弃 ResNet 在训练期间的层来获得更好的信息和梯度流。 <u>FractalNets</u> 重复组合具有不同卷积块数量的几个平行层序列，以获得较大的深度，同时在网络中保持许多 short paths。虽然不同的方法各不相同，但它们有一个共同的特征：<strong>它们均创建了从 early layers 到 later layers 的 short paths.</strong></p><p>在这篇论文中，提出了一种将这种特性提炼为简单的连接模式的架构：来确保网络各层之间最大的信息流，<strong>将所有层（具有同样大小的匹配的特征图）彼此进行直接连接</strong>。</p><p>为了保持这种前馈特性，每一层要从之前所有层中获得额外的输入，并将自身的特征图传到后续所有层中，如图1：</p><p><img src="/2020/06/01/dccn/1.png" style="zoom:80%;"></p><p>值得注意的是：和 ResNet 相比，这里没有通过将特征求和的组合方式传到一个图层中，相反，这里采用了连接的组合方式。</p><p>因此，第 $l$ 层有 $l$ 个输入（从0开始编号），这些输入是由第 $l$ 层之前的所有卷积块的特征图组成，它自己的特征图传向了其后的  $L-l$ 个后续层。这就引入了  $L$ 层网络的  $\frac{L(L+1)}{2}$ 个连接，而不是传统的 $L$ 个连接。</p><p>因为这种<strong>密集连接的模式</strong>（dense connectivity pattern），所以顾名思义，得到了 Dense Convolutional Network (DenseNet)。</p><p>注：这种密集连接的模式的一个可能与直觉相反的效果是，<strong>它需要比传统卷积网络更少的参数</strong>，因为它不需要重新学习冗余的特征图。<u>传统的前馈结构</u>可以看作一种状态算法，这种状态从一层传递到下一层，每一层从它的前一层读取状态，并写入后面的层。虽然这种方式改变了状态，但是传递了需要保留的信息。</p><p>ResNet 通过 additive identity transformations 达到了使信息显式保持的目的。ResNet的最新变体[13]表明，许多层的贡献很小，实际上可以在训练期间随机丢弃。ResNet的参数量大很多，因为每一层都有自己的权重。</p><p>而这里提出的 DenseNet 结构将添加到网络上的信息和需要保留的信息进行了明确的区分，<strong>DenseNet 的各层都非常窄</strong>（比如，每层只有12个 filter），仅向网络的  “collective knowledge（集体知识）”  中添加一小部分特征图，并保持其余的特征图不变，最终的分类器基于网络中所有的特征图进行决策。</p><p>DenseNet 的另外一大优点是它们<strong>改善了整个网络中的信息流和梯度流</strong>，这使得它们更容易训练。每一层都能直接从损失函数和原始输入信号中获得梯度，这有助于<strong>训练更深层次的网络架构</strong>。此外，还发现密集连接有一种<strong>正则化（regularization）的效果</strong>，这减小了在小规模训练集上的任务的过拟合问题。</p><p><strong>summary：</strong></p><ol><li>需要更少的参数量</li><li>有助于训练更深的网络架构</li><li>正则化效果，解决过拟合问题</li></ol><p>【注：<u>一些 benchmark datasets</u>：CIFAR-10，CIFAR-100，SVHN，ImageNet】</p><h2><span id="xiang-guan-gong-zuo">相关工作</span><a href="#xiang-guan-gong-zuo" class="header-anchor">#</a></h2><p><u>Highway Net</u> 是首批提供一种有效地训练超过100层的端到端的网络体系结构之一。Highway Net 使用了 bypassing paths along with gating units，可以毫不费力的优化上百层。<strong>The bypassing paths</strong> 是可以更加容易地训练非常深的网络的关键。<u>ResNets</u> 就是进一步支持了这一点，在 ResNets 中，使用了  pure identity mappings 来作为 The bypassing paths。</p><p>而且， <strong>stochastic depth</strong> 通过在训练期间随机丢弃 layers，成功训练了 1202 层的 ResNet。这表明并非所有层都是必需的，并表明 <strong>deep (residual) networks 中存在大量冗余</strong>。DenseNet 便是在一定程度上受了该 observation 的启发。</p><p>一种使网络更深（例如，借助 skip connections）的正交化方法是<strong>增加网络的宽度</strong>，GoogleNet 就是这种。GoogleNet 使用 “Inception module” 将由不同大小的 filter 生成的特征图连接在一起。事实上，简单地增加 ResNets 各层 filter 的数量，就可以在足够深的网络中提升其性能。 <u>FractalNets</u> 使用这样的 wide network structure 也取得了不错的结果。</p><p>DenseNet 没有采用极深的或极宽的结构进行代表性的特征抽取，而是通过<strong>特征复用</strong>来发掘网络的潜能，生成易于训练和参数高效化的精简模型。连接不同层学习的特征图可以增加后续层的输入的变化并提高效率，这就是 <strong>DenseNet 和 ResNet 的主要区别</strong>。和将来自不同层的特征连接到一起的 Inception networks 相比，DenseNets 更加简洁高效。</p><h2><span id="densenets">DenseNets</span><a href="#densenets" class="header-anchor">#</a></h2><p>考虑一张通过卷积网络的图片 $x_0$ ，该网络包含 $L$ 层，每个层实现一个非线性转换 $H_l(·)$ ，其中 $l$ 表示层的编号，$H(·)$ 可以是诸如 Batch Normalization(BN)、rectified linear units (ReLU)、Pooling 或者 Convolution (Conv) 等操作的复合函数。我们将第 $l$ 层的输出定义为 $x_l$ </p><ol><li><p><strong>ResNet</strong>：</p><ul><li>传统的前馈卷积网络，将第 $l$ 层的输出作为输入连接到第 $l+1$ 层，产生以下转换： $x_l = H_l(x_{l-1})$ ；</li><li>ResNet 增加了一个<strong>跨层连接（skip-connection）</strong>，它使用 <strong>identity function</strong> （恒等函数）绕过了非线性变换：$x_l = H_l(x_{l-1})+x_{l-1}$ 。</li><li>ResNet 的一个优点是梯度可以直接通过 identity function 从后面的层流到较前面的层。但是， identity function （恒等函数）和输出是通过求和的方式连接到一起，可能会阻碍网络中的信息流。</li></ul></li><li><p><strong>Dense connectivity：</strong></p><ul><li><p>为了进一步改善各层间的信息流，这里提出了一个不同的连接模式：提出了从任何层向其所有后续层的直连接，如图1所示。</p></li><li><p>因此，第 $l$  层接受其前所有层的特征图作为输入：$x_l = H_l([x_0,x_1,…,x_{l-1}])$ </p></li><li><p>其中 $[x_0, x_1,…,x_l-1]$ 表示第 $0$ 到 $l-1$ 层产生的特征图的连接。</p></li><li><p>为了便于应用，我们将上式中的多输入 $[x_0, x_1,…,x_l-1]$ 连接成一个张量（ a single tensor）。</p><p><img src="/2020/06/01/dccn/1.png" style="zoom: 67%;"></p></li></ul></li><li><p><strong>Composite function</strong>：</p><ul><li>将 $H_l(·)$ 定义为一个复合函数，它有三部分连续的操作组成：<strong>Batch Normalization、ReLU 和一个3x3的卷积操作</strong>。</li></ul></li><li><p><strong>Pooling layers：</strong></p><ul><li>当特征图的尺寸发生变化时，$x_l = H_l([x_0,x_1,…,x_{l-1}])$  中的连接操作是不可行的。然而，卷积网络的一个重要组成部分就是下采样层，它可以改变特征图的尺寸。</li><li>为了便于在我们的网络结构中使用下采样层（down-sampling layers），我们将网络划分为多个紧密相连的<strong>密集块（dense blocks）</strong>，如图2所示。</li><li>我们将块之间的层称为<strong>过渡层（transition layers）</strong>，它们进行卷积和池化操作。</li><li>本文实验中使用的过渡层包括一个 BN 层和一个 1x1 的卷积层，其次是一个 2x2 的平均池化层。</li></ul><p><img src="/2020/06/01/dccn/2.png" style="zoom:150%;"></p><p><em>图2 ：一个拥有三个稠密块的 DenseNet 网络，两个相邻块之间的层称为过渡层，通过卷积和池化来改变特征图的大小。</em></p></li><li><p><strong>Growth rate：</strong></p><ul><li>如果每个函数 $H_l$ 产生 $k$ 个特征图，那么第 $l$ 层的输入特征图总数为：$k_0 + k × (l-1)$ ，$k_0$ 代表输入层的  channels 数量。（就是每一层的输出是 k 个特征图，前面有 $l-1$ 层，然后再把原始输入层的 $k_0$ 个输入加上）</li><li>DenseNet和现有网络结构的一个重要区别在于DenseNet具有很窄的层，例如 k=12 ，我们把<strong>超参数 <code>k</code> 称为网络的增长率（growth rate）</strong>。我们的实验表明一个较小的增长率就可以获得相对好的效果。</li><li>一种解释就是，网络的各块中的每一层都可以获得该块内其前的所有特征图，因此，可以访问网络的集体知识（“collective knowledge”）。每一层都可以将特征图看作网络的全局状态，并且可以将自己的<code>k</code>个特征图添加到这个全局状态中。<strong>增长率 <code>k</code> 调节每一层对全局状态贡献的新信息量。</strong>全局状态一经编写，就可以从网络的任何地方进行获取，并且与传统网络不同，不需要从一层复制到另一层。</li></ul></li><li><p><strong>Bottleneck layers</strong></p><ul><li>尽管每一层仅产生 k 个特征图，但它通常情况下拥有更多的输入。在每个 3x3 卷积前引入 1x1卷积作为瓶颈层（bottleneck layer ），可以减少输入特征图的数量，从而可以提高计算效率。</li><li>这样的设计对于 DenseNet 特别有效，即网络中的 bottleneck layer  ：由 $BN-ReLU-Conv(1×1)-BN-ReLU-Conv(3×3)$ 组成 $H_l$ 版本 DenseNet 称为 <strong>DenseNet-B</strong>。（B 代表 Bottleneck）</li><li>在本文的实验中，我们令每个 $1×1$ 卷积产生 $4k$ 个特征图（k 应该是增长率）。</li></ul></li><li><p><strong>Compression：</strong></p><ul><li>为了进一步提高模型的紧凑性，我们可以在过渡层减少特征图的数量。</li><li>如果一个密集块 （dense block） 包含<code>m</code>个特征图，我们让其后的过渡层（transition layer）输出 $\lfloor \theta m \rfloor$ 个特征图。其中 $0 &lt; \theta \leq 1$ 被称作<strong>压缩因子（compression factor）</strong>。</li><li>当 $θ=1$ 时，通过过渡层的特征图数量不变，我们在实验中设置 $θ=0.5$</li><li>我们将同时使用了 bottleneck layer 和 $\theta &lt; 1$ 的transition layer 的 DenseNet 称作 <strong>DenseNet-BC</strong>。（ Bottleneck + Compression）</li></ul></li><li><p><strong>Implenentation Details</strong> 实现细节：</p><ul><li><p>除了 ImgageNet 以外的所有数据集，我们实验中使用的 DenseNet 都有三个 dense block ，每个块内的层数都是相等的。</p><ul><li>在进入第一个 dense block 之前，在输入图像上进行具有16 个输出通道的卷积（或者具有两倍 growth rate $k$ 的）DenseNet-BC。</li><li>对于卷积核大小（kernel size）为 3x3 的卷积层，输入的每一侧都被填充一个像素，以保持特征图的大小不变。</li><li>我们在1x1的卷积后跟一个2x2的平均池化层作为过渡层连接两个相邻的密集块。</li><li>在最后一个密集块（ dense block ）之后，执行一个全局平均池化（global average pooling），然后附加一个 softmax 分类器。</li><li>三个 dense block 内的特征图尺寸分别为 32x32、16x16 和 8x8。</li><li>作者使用了参数为 {L=40，k=12}、{L=100，k=12} 和 {L=100，k=24}的基本 DenseNet 结构进行实验。</li><li>对于 DenseNetBC 结构，评估了参数为 {L=100，k=12}、{L=250，k=24}和{L=190，k=40} 的网络。</li></ul></li><li><p>在 ImageNet 上的实验中，在 224×224 的输入图像上，我们使用了具有4个 dense block 的 DenseNet-BC 结构。初始的卷积层中包含 $2k$ 个卷积（大小为 7×7，stride 为2）；其他所有层特征图的数量均为 $k$ 。在 ImageNet 上使用的确切网络配置如表1。</p><p><img src="/2020/06/01/dccn/3.png" style="zoom:200%;"></p></li></ul></li></ol><h2><span id="shi-yan">实验</span><a href="#shi-yan" class="header-anchor">#</a></h2><p>所有训练的网络都使用 SGD 梯度下降。</p><p>在 CIFAR 和 SVHN 上训练的 batch size为64，epoch 分别为 300 和 40 。初始学习率设置为0.1。</p><p>在 ImageNet 上，epoch 为 90，batch size 为 256，初始学习率设置为 0.1，在 epoch 为30和60的时候，学习率降低10倍。</p><h2><span id="tao-lun">讨论</span><a href="#tao-lun" class="header-anchor">#</a></h2><h3><span id="model-compactness-mo-xing-jin-cou-xing">Model compactness 模型紧凑型</span><a href="#model-compactness-mo-xing-jin-cou-xing" class="header-anchor">#</a></h3><p>通过直连接，由 DenseNet 中任何层学习得到的特征图都可以被所有的后续层所访问。这鼓励了网络中的特征虫咬，提供了更紧凑的模型。</p><p><img src="/2020/06/01/dccn/4.png" alt></p><p>left：显示了DenseNet-BC 始终是 DenseNet 参数效率最高的变体。</p><p>middle：为了达到相同的 accuracy ，DenseNet-BC 只需要 ResNet 大约 $\frac{1}{3}$ 的参数。</p><p>right：仅具有0.8M可训练参数的 DenseNet-BC 能够达到与具有10.2M参数的1001层（激活前）ResNet相当的精度。</p><h3><span id="implicit-deep-supervision-yin-shi-shen-du-jian-du">Implicit Deep Supervision 隐式深度监督</span><a href="#implicit-deep-supervision-yin-shi-shen-du-jian-du" class="header-anchor">#</a></h3><p> DenseNet 的 accuracy 得到提升的一种解释是各个层通过 the shorter connections 接受到了来自 loss function 的额外监督。可以将 DenseNet 解读为一种 “deep supervision”。深度监督的好处是它将分类器附加到每个隐藏层，强制中间层学习具有区别性特征。</p><p>DenseNets 隐式执行类似的深度监督，网络顶部的单个分类器通过两到三个过渡层向所有层提供直接监督。然而，DenseNet 的损失函数和梯度基本上没有那么复杂，因为相同的损失函数在所有层之间共享。</p><h3><span id="stochastic-vs-deterministic-connection">Stochastic vs. deterministic connection</span><a href="#stochastic-vs-deterministic-connection" class="header-anchor">#</a></h3><p>随机连接与确定性连接，在 dense convolutional networks 和 stochastic depth regularization of residual networks 之间存在一个有趣的联系。在 stochastic depth 中， residual networks 中的层被随机丢弃，从而产生和周围层的直接连接。由于池化层从不丢弃，因此网络会产生与DenseNet类似的连接模式。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Densely-Connected-Convolutional-Networks&quot;&gt;&lt;a href=&quot;#Densely-Connected-Convolutional-Networks&quot; class=&quot;headerlink&quot; title=&quot;Densely Connected Convolutional Networks&quot;&gt;&lt;/a&gt;Densely Connected Convolutional Networks&lt;/h1&gt;&lt;p&gt;时间：2018-6&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;：最近的工作表明，如果在靠近输入的层和靠近输出的层之间包含更短的连接，那么卷积网络可以显著地更深、更准确、更有效。DenseNet 根据这一观察结果，将每一层以前馈的方式连接到其余的每一层。传统的具有 $L$ 层的卷积网络有 $L$ 个连接（每层与其后续层之间有一个），我们的网络拥有 $L(L+1)/2$ 个直连接（$ C_{L}^{2}$）。对于每一层，使用前面所有层的特征图作为输入，它自己的特征图作为所有后续层的输入。&lt;/p&gt;
&lt;p&gt;DenseNet 有以下几个&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;减轻了梯度消失带来的问题&lt;/li&gt;
&lt;li&gt;增强了特征的传播&lt;/li&gt;
&lt;li&gt;鼓励特征重用&lt;/li&gt;
&lt;li&gt;大大减少了参数量&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;tocStart&quot;&gt;&lt;/div&gt;

&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#yin-yan&quot;&gt;引言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#xiang-guan-gong-zuo&quot;&gt;相关工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#densenets&quot;&gt;DenseNets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shi-yan&quot;&gt;实验&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tao-lun&quot;&gt;讨论&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#model-compactness-mo-xing-jin-cou-xing&quot;&gt;Model compactness 模型紧凑型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#implicit-deep-supervision-yin-shi-shen-du-jian-du&quot;&gt;Implicit Deep Supervision 隐式深度监督&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#stochastic-vs-deterministic-connection&quot;&gt;Stochastic vs. deterministic connection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;div class=&quot;tocEnd&quot;&gt;&lt;/div&gt;

&lt;p&gt;[TOC]&lt;/p&gt;
    
    </summary>
    
    
      <category term="paper-cv" scheme="https://sunxiaojie99.github.io/categories/paper-cv/"/>
    
    
  </entry>
  
  <entry>
    <title>Point cloud learning</title>
    <link href="https://sunxiaojie99.github.io/2020/04/30/3d-point-clouds/"/>
    <id>https://sunxiaojie99.github.io/2020/04/30/3d-point-clouds/</id>
    <published>2020-04-30T01:20:00.000Z</published>
    <updated>2021-03-12T16:35:13.337Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="san-wei-dian-yun-shen-du-xue-xi-yan-jiu-zong-shu">三维点云深度学习研究综述</span><a href="#san-wei-dian-yun-shen-du-xue-xi-yan-jiu-zong-shu" class="header-anchor">#</a></h1><p>论文：Deep Learning for 3D Point Clouds: A Survey</p><p>作者：Yulan Guo</p><p>时间：2019-12</p><h2><span id="yin-yan">引言</span><a href="#yin-yan" class="header-anchor">#</a></h2><p><strong>动机</strong>：Point cloud learning （点云学习）由于在视觉、自动驾驶、机器人等方面的广泛应用，近年来受到了广泛的关注。最近，随着点云的深度学习变得更加兴旺，人们提出了许多方法来解决这一领域的不同问题。为了促进未来的研究，本文对点云深度学习方法的最新进展进行了全面的综述。</p><span id="more"></span><p><strong>挑战</strong>：</p><ol><li><p>深度学习技术目前已经成为成功解决各种二维视觉问题的主流技术，点云的深度学习依然处于初级阶段。</p></li><li><p>深度神经网络处理点云所面临的独特挑战（例如数据集的小规模、高维和三维点云的非结构化性质）</p></li></ol><p><strong>意义</strong></p><ol><li>第一篇全面涵盖几个重要点云相关任务的深度学习方法的调查论文，包括三维形状分类、三维目标检测和跟踪以及三维点云分割。</li><li>与现有的综述不同，特别关注3D点云的深度学习方法，而不是所有类型的3D数据</li><li>介绍了点云深度学习的最新进展。因此，它为读者提供了最先进的方法</li><li>提供了在几个公开可用数据集上<u>对</u><u>现有方法进行的综合比较</u>，并提供了简要总结和有洞察力的讨论</li></ol><p><strong>论述的三个主要的任务</strong>：</p><ol><li>3D shape classification （三维形状分类）</li><li>3D object detection and tracking （三维对象检测和追踪）</li><li>3D point cloud segmentation （三维点云分割）</li></ol><p><strong>三维点云深度学习方法的分类</strong>：</p><p><img src="/2020/04/30/3d-point-clouds/a.png" alt="a"></p><h2><span id="2-3d-shape-classification">2、3D Shape Classification</span><a href="#2-3d-shape-classification" class="header-anchor">#</a></h2><p><strong>介绍</strong>：这类的方法通常先学习 embedding of each point （每个点的嵌入），然后使用 aggregation method （聚合方法）从 whole point cloud （整个点云）中 extract a global shape embedding  （提取全局形状嵌入） ，最终由几个全连接层来实现 classification （分类）。</p><p>基于对每个点进行 feature learning （特征学习）的方式，现有的 3D shape  classification methods （三维形状分类方法）可分为 <strong>projection-based networks</strong> （基于投影的网络）和 <strong>point-based networks</strong> （基于点的网络）。在本文中，我们主要关注基于点的网络，但也包括一些基于投影的网络以保证完备性。</p><ol><li><strong>Projection-based methods</strong> ：首先将一个 unstructured （非结构化）的点云投影到一个规则中间的表示中，然后利用成熟的2D或3D卷积来实现形状分类。</li><li><strong>point-based networks</strong>：基于点的方法直接作用于原始点云，而不需要任何体素化或投影。基于点的方法不会引入显式信息丢失，并且变得越来越流行。</li></ol><p><strong>按时间顺序概述3D shape classification 的一些里程碑的方法</strong>：</p><p><img src="/2020/04/30/3d-point-clouds/b.png" alt="b"></p><h3><span id="2-1-projection-based-networks-ji-yu-tou-ying-de-wang-luo">2.1 Projection-based Networks 基于投影的网络</span><a href="#2-1-projection-based-networks-ji-yu-tou-ying-de-wang-luo" class="header-anchor">#</a></h3><p>基于投影的网络将3D点云投影到不同的表示模式（例如，多视图、体积表示）中，以进行特征学习和形状分类。</p><h4><span id="2-1-1-multi-view-representation-duo-shi-jiao-biao-shi">2.1.1 Multi-view representation 多视角表示</span><a href="#2-1-1-multi-view-representation-duo-shi-jiao-biao-shi" class="header-anchor">#</a></h4><p>这些方法首先将3D对象投影到多个 views (视图) 中并提取相应的 view-wise features（视域特征），然后融合这些特征以实现准确的对象识别。<strong>关键挑战</strong>是如何将多个 view-wise features 聚合到一个有识别力的全局表示 global representation 中。</p><p><strong>现有的一些方法</strong>：</p><ol><li><strong>MVCNN</strong>： 开创性的工作，只是简单地 max-pools multi-view features(多视图特征) into a global descriptor（全局描述符），但是max-pooling 仅保留特定视图中的最大元素，从而会导致信息丢失。</li><li><strong>MHBN</strong>：  通过协调双线性 pooling 来集成局部卷积特征（local convolutional features），以产生紧凑的全局描述符（global descriptor）。</li><li>首先利用关系网络（relation network）来发现一组视图上的相互关系(例如，区域-区域关系和视图-视图关系)，然后聚集这些视图以获得可辨别的 3D object representation。</li><li>……</li></ol><h4><span id="2-1-2-volumetric-representation-ti-su-biao-shi">2.1.2 Volumetric representation 体素表示</span><a href="#2-1-2-volumetric-representation-ti-su-biao-shi" class="header-anchor">#</a></h4><ol><li>早期的方法通常使用建立在 3D point clouds （3D点云）的 volumetric representation（体表示：由称为体素的离散体组成）上的三维卷积神经网络(CNN)。</li><li>Wu et al. 提出了一种卷积深度 belief-based 的3D ShapeNets，用于从不同形状的三维形状中学习点的分布。虽然已经取得了令人鼓舞的性能，但是这些方法不能很好地扩展到密集的3D数据，因为计算和内存占用随着分辨率的提高而成倍增长。</li><li>为此，引入了一种层次紧凑的图结构(如八叉树 octree )来降低这些方法的计算和存储开销。eg：OctNet、Octree-based CNN… 与基于dense input grids的 baseline network 相比，OctNet对高分辨率点云所需的内存和运行时间要少得多 。</li><li>PointGrid的混合网络，该网络集成了点和网格表示，以实现高效的点云处理。</li></ol><h3><span id="2-2-point-based-networks-ji-yu-dian-de-wang-luo">2.2 Point-based Networks 基于点的网络</span><a href="#2-2-point-based-networks-ji-yu-dian-de-wang-luo" class="header-anchor">#</a></h3><p>根据用于每个点的特征学习的网络结构，这类方法可分为逐点MLP（pointwise MLP）、基于卷积（convolution-based）、基于图（graph-based）、基于数据索引的网络（data indexing-based networks）和其他典型网络。  </p><h4><span id="2-2-1-pointwise-mlp-networks">2.2.1 Pointwise MLP Networks</span><a href="#2-2-1-pointwise-mlp-networks" class="header-anchor">#</a></h4><p>这类方法使用多层感知器 MLP（Multi-Layer Perceptrons ）对各个点进行独立的建模，接着使用对称的函数来集成到全局特征。对于无序的3D点云数据，这类网络可以得到置换不变性。然而这样的方法并未考虑到3D点之间的几何关系，如下图3。</p><p><img src="/2020/04/30/3d-point-clouds/pw.png" alt="pw" style="zoom: 67%;"></p><p>作为先驱工作，<strong>PointNet</strong> 使用MLP学习Pointwise特征，接着使用最大池化层来提取全局的形状特征。最后的分类结果也使用MLP来得到。[26]也论证了，得到置换不变性的关键在于将所有表示（representations）加起来并且使用非线性变化。[26]也设计了基础的网络DeepSets来进行多种应用的实现，包括形状分类。</p><p>由于特征是针对PointNet[5]中的每个点独立学习的，因此各个点之间的局部结构信息无法得到。[27]提出了一种分层次的网络<strong>PointNet++</strong>，从各个点之间的邻居来获取细粒度的几何特征。（PointNet++的核心，其abstraction level 由采样层（the sampling layer）、分组层（the grouping layer）和PointNet层三层组成。PointNet++通过堆叠多个abstraction level，可以从局部几何结构中学习特征，并逐层抽象局部特征。）</p><p>因为PointNet的简单和有效性，许多工作都基于PointNet开展。（这里介绍了一些网络）</p><h4><span id="2-2-2-convolution-based-networks-ji-yu-juan-ji-de-wang-luo">2.2.2 Convolution-based Networks 基于卷积的网络</span><a href="#2-2-2-convolution-based-networks-ji-yu-juan-ji-de-wang-luo" class="header-anchor">#</a></h4><p>与2D卷积相比，由于点云的不规则性，3D点云的卷积核更难设置。根据卷积核的不同，目前的3D卷积网络可以被分为连续卷积网络（continuous convolution networks ）和离散卷积网络（discrete convolution networks），如下图所示。</p><p><img src="/2020/04/30/3d-point-clouds/cb.png" alt="cb" style="zoom: 67%;"></p><p><strong>3D Continuous Convolution Networks</strong>. <strong>3D连续卷积网络</strong></p><p>这类方法在连续的空间中定义卷积核，其中邻居点的权重与它和中心点的空间分布有关。</p><p><u>3D卷积可以解释为给定子集上的加权和</u>。MLP是学习权重的一种简单方法。作为RS-CNN[35]的核心层，RS-Conv将某个点周围的局部子集作为其输入，使用MLP的方法来进行卷积，学习低维关系到高维关系的映射。</p><p><u>一些方法还使用现有算法来执行卷积</u>。在PointConv[38]中，卷积被定义为对重要性采样的连续3D卷积的蒙特卡洛估计。卷积核由加权函数（由MLP层学到）和密度函数（由核密度估计和MLP层学到）组成。为了提升内存和计算效率，3D卷积被简化成两部分：矩阵乘法和2D卷积，在相同的参数设置下，内存消耗可减小64倍。</p><p><strong>3D Discrete Convolution Networks</strong>. <strong>3D离散卷积网络</strong></p><p>这类方法在标准的网格上定义卷积核，其中的邻居点的权重是其关于中心点的补偿（offset）。</p><p>[49]将非归一化的点云变换至归一化的网格，接着在各个网格上定义卷积核。与2D卷积不同（在各个像素上分配权重），所提的3D卷积核在网格内的所有点赋予相同的权重。对于给定点，邻域内所有点（在相同网格上）的平均特征通过之前的层来计算得到。接着，所有网格的平均特征通过加权和产生当前层的输出。</p><h4><span id="2-2-3-graph-based-networks-ji-yu-tu-de-wang-luo">2.2.3 Graph-based Networks 基于图的网络</span><a href="#2-2-3-graph-based-networks-ji-yu-tu-de-wang-luo" class="header-anchor">#</a></h4><p>基于图的网络将点云中的每个点视为图的一个顶点，并基于每个点的邻域来生成图的有向边。然后在<u>空间域或谱域</u>中执行特征学习[58]。典型的基于图的网络如图5所示。</p><p><img src="/2020/04/30/3d-point-clouds/gb.png" alt="gb" style="zoom: 67%;"></p><p><strong>Graph-based Methods in Spatial Domain 空间域中的基于图的方法</strong> .</p><p>这类方法在空间域中定义卷积和池化操作。卷积通过在空间邻域内的MLP实现，池化操作通过集成信息产生新的较粗的图。各个顶点的特征由坐标、激光强度、颜色来确定，各个边的特征由两个连接点的几何属性确定。</p><p>作为先驱工作，[58]将各个点视为图的顶点，利用有向边将顶点与其邻域内的点相连，接着使用Edge-Condition Convolution（使用生成filter的网络得到，MLP等）。最大池化用来集成邻域信息，图的粗化使用VoxelGrid[59]算法得到。首先通过卷积和池化的相互交错，再跟着为全局平均池化和全连接层来产生分类score。</p><p><strong>Graph-based Methods in Spectral Domain 谱域中的基于图的方法</strong>. </p><p>这些方法将卷积定义为谱的滤波，将其实现为图上的信号与图的拉普拉斯矩阵的特征向量的乘法。</p><h4><span id="2-2-4-data-indexing-based-networks-ji-yu-suo-yin-shu-ju-de-wang-luo">2.2.4 Data Indexing-based Networks 基于索引数据的网络</span><a href="#2-2-4-data-indexing-based-networks-ji-yu-suo-yin-shu-ju-de-wang-luo" class="header-anchor">#</a></h4><p>这些网络基于不同的数据索引结构(例如，八叉树和kd-树)来构建。在这些方法中，点特征是沿着树从叶节点到根节点分层学习得到的。 </p><h4><span id="2-2-5-other-networks">2.2.5 Other Networks</span><a href="#2-2-5-other-networks" class="header-anchor">#</a></h4><p>除了上述方法外，还提出了许多其他方案</p><p>表1：在ModelNet10/40基准上比较3D Shape Classification 结果，只关注基于点的网络（pointbased networks ），“#params”指的是相应模型的参数个数。“OA”表示 overall accuracy ，“MACC”表示表中的平均精度（mean accuracy ）。符号‘-’表示结果不可用。</p><p><img src="/2020/04/30/3d-point-clouds/sc.png" alt="sc" style="zoom: 67%;"></p><h2><span id="3-3d-object-detection-and-tracking">3、3D Object Detection and tracking</span><a href="#3-3d-object-detection-and-tracking" class="header-anchor">#</a></h2><h3><span id="3-1-3d-object-detection-wu-ti-jian-ce">3.1 3D Object Detection 物体检测</span><a href="#3-1-3d-object-detection-wu-ti-jian-ce" class="header-anchor">#</a></h3><p>与普通2D中目标检测方法类似，3D中的目标检测也可以分为两类：基于候选区域的方法和直接映射方法。</p><h4><span id="3-1-1-region-proposal-based-methods-ji-yu-hou-xuan-qu-yu">3.1.1 Region Proposal-based Methods 基于候选区域</span><a href="#3-1-1-region-proposal-based-methods-ji-yu-hou-xuan-qu-yu" class="header-anchor">#</a></h4><p>首先产生一些可能包含物体的区域（Proposals），接着对各个区域提取特征，来决定各个候选区域的物体类别。</p><p><strong>根据不同的产生候选区域的方法</strong>，这些方法可进一步分为三类：基于多视角的方法（multi-view based）；基于分割的方法（segmentation-based）以及基于锥体的方法（frustum-based methods）。  </p><h5><span id="multi-view-methods-duo-shi-jiao-de-fang-fa">Multi-view Methods 多视角的方法</span><a href="#multi-view-methods-duo-shi-jiao-de-fang-fa" class="header-anchor">#</a></h5><p>这类方法从不同的视角图像（雷达前景图（LiDAR front view），鸟瞰图（bird’s eye view (BEV) ），图像（image）等）中融合各个候选框的特征，来产生3D rotated boxes，如图7(A)所示。这些方法的计算成本通常很高。</p><p>在[4]中，Chen等人从鸟瞰图BEV中产生一组准确的3D候选框，并且将其投影到其它视角中（雷达前景图，RGB图像），接着将各个区域的特征组合到一起，来预测有方向的3D bounding boxes。尽管这种方法在0.25IOU， 300个候选框设置时达到了99.1%的recall，但是速度非常慢。</p><p><img src="/2020/04/30/3d-point-clouds/mv3d.png" alt="mv3d" style="zoom: 50%;"></p><p>后续的基于多视角的3D物体检测方法主要从以下两个方面来提升。</p><ul><li>（1）<strong>提出了很多方法来有效的融合不同模态之间的信息</strong>。<ul><li>为了针对小物体产生有较高recall的候选框，[97]提出了一种多模态的基于融合的区域生成网络（ a multi-modal fusion-based region proposal network）。首先使用裁剪和大小调整操作从BEV视图和image视图中提取大小相等的特征，然后使用 mean pooling 对这些特征进行融合。具体而言，他们对BEV（鸟瞰视角）空间中的每个点提取最近的对应点的图image 特征，接着通过将image特征投影至BEV空间的方法，使用双线性插值得到稠密的BEV的特征图。<strong>实验结果证明稠密的BEV特征图比起离散的image特征图和稀疏的LiDAR(雷达激光)特征图更加适合3D物体检测。</strong> </li><li>[99]提出了多任务，多感知器的3D物体检测网络来进行端到端的训练。具体而言，利用多种任务（2D物体检测，背景估计 ground  estimation，深度补偿  depth completion ），帮助网络学习到更好的特征表示。学习到的跨模态的表示，可进一步用来产生更准确的物体检测结果。实验证明这类方法在2D,3D,BEV detection 任务上有着非常好的提升，在TOR4D基准[100, 101]上超越了之前的SOTA。</li></ul></li><li>（2）<strong>其它的一些方法致力于提取输入数据更鲁棒的表示 representations  </strong><ul><li>[102]通过引入空间Channel注意力机制模块（Spatial Channel Attention  (SCA)  Module），探索了多尺度的环境信息，该模块可捕获全局的以及多尺度的场景环境，加强了有用的特征。同样的，他们还提出了一种 Extension Spatial Unsample  (ESU) 模块，通过组合多尺度的低层特征来获得具有丰富空间信息的高层特征，从而生成更可靠的3D物体候选框 （proposals） 。尽管达到了更好的检测效果，但上述所提的多视角方法都需要较长的运行时间，因为他们对每个候选框都进行了特征的池化。因此，[103]使用了 预ROI池化卷积（pre-ROI pooling convolution）来提高[4]的效率。具体而言，他们将大部分的卷积操作移动到 RoI pooling 模块之前。因此，对于所有的物体候选框，ROI卷积只使用一次。实验结果显示这类方法可达到11.1fps, 速度达到了MV3D[4]的5倍。</li></ul></li></ul><h5><span id="segmentation-based-methods-ji-yu-fen-ge-de-fang-fa">Segmentation-based Methods 基于分割的方法</span><a href="#segmentation-based-methods-ji-yu-fen-ge-de-fang-fa" class="header-anchor">#</a></h5><p>这些方法首先利用现有的语义分割技术去除大多数背景点，然后在前景点上生成大量高质量的候选框，以节省计算量，如图7(B)所示。</p><p><img src="/2020/04/30/3d-point-clouds/sb.png" alt="sb" style="zoom: 67%;"></p><p>与刚刚的多视角Multi-view的方法[4],[97],[103]相比，这类方法达到了更好的物体recall，并且更适合一些目标高度遮挡和拥挤的复杂场景。</p><p>[104]中，Yang et al使用了2D的分割网络来预测前景（foreground pixels）的像素并将其投影至点云中，以此来剔除掉多数的背景点。接着在这些前景点中生成候选框，并且设计了一种新的标准称之为PointsIoU来减少候选框的冗余性和模糊性。</p><p>跟着[104]的脚步，[105]提出了PointRCNN的框架。具体而言，他们直接对3D点云进行分割，然后得到前景点，并且将语义特征和局部空间特征融合从而得到高质量的3D boxes。</p><p>[106] following [105]中的RPN，提出了一种利用图卷积网络来进行3D物体检测。具体而言，利用图卷积，引入了两个模块来改进refine物体的候选框。第一个模块R-GCN利用一个候选框中的所有点，得到每个候选框的特征集成。第二个模块C-GCN将所有候选框中的每一帧信息融合起来，利用环境来回归准确的物体boxes。</p><p>[107]将点云投影至基于图像 image-based 的分割网络的输出，并将语义预测值附加到这些点上。</p><p>[109]得到了显著的性能提升，通过将涂色的点送入至一些检测器中[105, 108]。</p><p>[110]将每个点与spherical anchor相关联，每个点的语义值用来移除多余的anchors。这样的方法得到了更好的recall以及有着更小的计算消耗。与此同时，文中提出了PointsPool层，对候选框中的内部点学习相容的特征（compact features），并且引入了并行的IoU来提高位置的准确度的检测性能。</p><p>实验结果证实这样的方法在KITTI数据集[10]上较难的集合（car class）的性能比[99, 105, 111]的性能优越很多，并达到了12.5fps。</p><h5><span id="frustum-based-methods-ji-yu-zhui-ti-de-fang-fa">Frustum-based Methods 基于椎体的方法</span><a href="#frustum-based-methods-ji-yu-zhui-ti-de-fang-fa" class="header-anchor">#</a></h5><p>这类方法首先利用现有的2D物体检测子，产生2D的候选矩形框，接着对每个2D的候选框提取3D的锥体候选框，如下图所示。尽管这类方法可以有效地给出3D物体的坐标，但step-by-step步进式的pipeline流水线使得它们的性能受到2D图像检测子的限制。</p><p><img src="/2020/04/30/3d-point-clouds/fb.png" alt="fb" style="zoom: 67%;"></p><p>F-PointNets[112]为此类detection方向的先驱工作。它在每个2D区域上产生一个锥形的候选框（frustum proposal），并且应用PointNet[5] ( 或PointNet++[27] ) 来学习各个3D锥体的点云特征，从而进行3D box的估计。</p><p>在随后的工作中，[113]提出了Point-SENet模块，来预测一系列的缩放因子，从而被用来突出有用特征和抑制无用特征。同时他们也将PointSIFT[114]模块集成至网络中，来获取点云的方向信息，其可以得到对形状尺度的强鲁棒性。该方法在[10], [115]的数据集上，与F-PointNets[112]相比得到了显著的提高。</p><p>方法[116]利用了2D image 区域和对应的锥体点来回归3D boxes。为了融合image 特征和点云的全局特征，他们提出了全局的融合网络来直接回归box的角坐标。他们也提出了稠密的网络网络来预测各个点对于各个角的补偿（offsets）。</p><p>[117]第一次从2D图像中估计2D的bounding boxes和3D物体姿态，提取多个几何上可行的对象候选。这些3D候选对象被送入至box 回归网络来预测准确的3D物体boxes。</p><p>[111]对于各个2D区域，在锥体轴上产生一系列的锥体，并使用PointNet来对各个锥体提取特征。锥体层次的特征用来产生2D特征图，再被送入至FCN 全连接网络来估计3D box。该方法在基于2D图像的方法中达到了state-of-the-art的性能，并且在KITTI积分榜上排在很靠前的位置。</p><p>[118]首先在鸟瞰图BEV上得到初步的检测结果，接着基于鸟瞰图的预测结果，提取小部分点的子集，再应用局部的微调网络来学习局部特征，预测高精度的3D bounding boxes。</p><h5><span id="qi-ta">其他</span><a href="#qi-ta" class="header-anchor">#</a></h5><p>……</p><h4><span id="3-1-2-single-shot-methods-zhi-jie-ying-she">3.1.2 Single Shot Methods 直接映射</span><a href="#3-1-2-single-shot-methods-zhi-jie-ying-she" class="header-anchor">#</a></h4><p>这类方法使用单阶段的网络，直接预测类别概率和回归物体的3D bounding boxes。这类方法不需要产生区域候选框和后处理。结果是，这类方法有着很快的速度，很适合实时的应用。<strong>根据输入数据的形式</strong>，single shot方法可分为两类：<u>基于鸟瞰图的方法</u>和<u>基于点云的方法</u>。</p><h5><span id="bev-based-methods-ji-yu-niao-kan-tu-de-fang-fa">BEV-based Methods 基于鸟瞰图的方法</span><a href="#bev-based-methods-ji-yu-niao-kan-tu-de-fang-fa" class="header-anchor">#</a></h5><p><u>这类方法将BEV表示作为输入。</u></p><p>[100]将场景的点云离散化，使用FCN来预测物体的位置和航向角。该方法超越了大多数single shot 方法([125],[126],[127])并且达到了28.6fps。之后，[128]利用HP map（High-Definition 高清）提供的几何和语义先验信息，提高了[100]的鲁棒性和检测性能。</p><h5><span id="point-cloud-based-methods-ji-yu-dian-yun-de-fang-fa">Point Cloud-based Methods.  基于点云的方法</span><a href="#point-cloud-based-methods-ji-yu-dian-yun-de-fang-fa" class="header-anchor">#</a></h5><p><u>这类方法将点云转换至一般的表示（例如2D map），接着使用CNN来预测对象的类别和3D boxes</u>。</p><p>[125]提出了使用FCN进行 3D object detection 。他们将点云转换至2D point map，使用2D FCN来预测bounding boxes和物体的置信度。</p><p>之后，[126]将点云离散化至4D的张量，其维度分别为：长度，宽度，高度和channel，接着将2D FCN的方法延伸至3D来进行3D的物体检测（object detection）。与[125]相比，基于FCN的3D方法达到了大于20%准确率的收益，但是由于3D卷积核数据的稀疏性，消耗了更多的计算资源。</p><p>为了解决体素 voxels 稀疏性的问题，[127]利用了feature-centric voting scheme（特征为中心投票机制），为每个非空的体素生成一组的votes，最后通过将votes相加的方式得到卷积的结果。它的计算复杂度与被占据的体素数量成正比。</p><p>[130]通过堆叠多个稀疏3D CNN，构建了3D的backbone网络。这样的设计节约了内存并且加速了计算。这个3Dbackbone网络提取了丰富的物体检测的3D特征，并且并未引入计算量的负担。</p><p>[108]提出了基于体素的端到端的可训练框架VoxelNet。他们将点云分割成等间距的体素，将每个体素的特征编码成4D的张量。然后使用RPN（region proposal<br>network）网络来产生检测结果（detection results）。尽管该方法效果很好，但由于体素的稀疏性和3D卷积操作，该方法运行速度很慢。之后，[120]使用了稀疏的卷积网络[134]来提高[108]的推断效率。</p><p>[131]通过将图像和点云特征在早期融合的方式，扩展了VoxelNet的工作。具体而言，他们将[108]产生的非空体素投影至图像，使用预训练的网络对各个投影的体素提取图像特征。这些图像特征与体素特征相级联，来预测准确的3D boxes。这类方法利用了多模态的信息，来减少false postivies and negatives。</p><p>[109]提出了3D物体检测子称为PointPillars。该方法利用了PointNet来学习点云的特征，将这些学到的特征编码伪图像（pesudo images）。然后使用2D的物体检测流水线（pipeline）来预测3D bounding boxes（边界框）。PointPillars在Average Precision（平均精度 AP）的指标上，超越了大多数的融合方法（MV3D[4], RoarNet[117], AVOD[97]）。并且，PointPillars在3D和BEV KITTI benchmarks上达到了62fps。</p><h5><span id="other-methods">Other Methods</span><a href="#other-methods" class="header-anchor">#</a></h5><p>[132]提出了一种有效的3D目标检测子称之为LaserNet。该方法在各个点上预测bounding boxes的概率分布，然后结合各个点的分布来产生最后的3D object boxes。接着，点云的dense range view representation （密集视图(RV)表示）作为输入，使用 fast mean-shift algorithm来降低逐点预测产生的噪声。LaserNet在0到50米的范围内实现了最先进的性能，其运行时间明显低于现有的方法。</p><p>[133]扩展LaserNet以利用RGB图像提供的密集纹理(例如，50到70米)。具体来说，通过将3D点云投影至2D图像使得LiDAR点和image点关联，并利用这种关联将RGB信息融合到3D点中。他们还将3D语义分割作为辅助任务以learn better representations。该方法在保持LaserNet的高效率的同时，在长距离(例如50到70米)目标检测和语义分割方面都取得了显著的改进。</p><h3><span id="3-2-3d-object-tracking-3d-wu-ti-gen-zong">3.2 3D Object Tracking 3D物体跟踪</span><a href="#3-2-3d-object-tracking-3d-wu-ti-gen-zong" class="header-anchor">#</a></h3><p>给定一个物体在第一帧时的位置，目标跟踪的任务是估计它在之后帧的状态。由于3D物体跟踪可以使用点云中丰富的几何信息，人们期待用它来克服在2D图像上追踪任务的困难，包括遮挡，光照以及尺度的变化。</p><p>Siamese network……</p><h3><span id="3-3-3d-scene-flow-estimation">3.3 3D Scene Flow Estimation</span><a href="#3-3-3d-scene-flow-estimation" class="header-anchor">#</a></h3><p>类似于2D视觉中的光流估计，已经有几种方法开始从点云序列中学习有用的信息(如三维场景流、空间临时信息)。</p><p>[142]提出了FlowNet3D，在一系列连续点云中直接学习场景流（scene flows）。FlowNet3D通过flow embedding layer， 学习point-level的特征和运动特征（motion features）。然而FlowNet3D存在两个问题。第一，一些预测的运动向量（motion vectors）与真实值差别非常大；第二，很难将FlowNet应用至非静态的场景，尤其是有着可形变物体的场景。</p><p>为了解决该问题，[143]引入了余弦距离的损失函数来最小化预测值与真实值之间的夹角。同时，他们提出了point-to-plane的距离损失函数，来提高刚性的和动态的场景的准确率。实验结果显示这两种损失函数将FlowNet3D的准确率从57.85%提升至63.43%，并且加速和稳定了训练过程。</p><p>[144]提出了HPLFlowNet（Hierarchical Permutohedral Lattice FlowNet ），从大规模的点云中直接估计场景流。文中提出了一些bilateral convolutional layers来存储结构信息，同时降低计算消耗。</p><p>为了有效地处理序列点云，[145]提出了PointRNN, PointGRU和PointLSTM，以及一个sequence-to-sequence model 来追踪移动点（moving points）。PointRNN, PointGRU和PointLSTM能够捕捉空间-时间信息，并且建模动态的点云。</p><p>类似地，[146]提出了MeteorNet来直接从动态点云中学习表示。该方法试图从时间和空间上的邻近点学习总体特征。</p><p>[147]提出了两个自监督的损失函数，在大量无标签的数据集上训练网络。他们的主要思想是：一种鲁棒的场景流估计方法应该在向前预测和向后预测时均有效。由于场景流标注不可用，预测得到的转换后的点的最近点，被当做是假想的真实值。然而，真正的真实值可能与它不同。为了避免这个问题，他们在相反的方向计算场景流，并且提出了cycle consistency loss。实验结果显示这种自监督的方法超过了现有自监督学习方法中的SOTA（state-of-the-art）性能。</p><h3><span id="3-4-summary">3.4 Summary</span><a href="#3-4-summary" class="header-anchor">#</a></h3><p>KITTI基准是自动驾驶领域中最有影响力的，并且在学术和工业领域有着广泛的应用。表2和表3展示了不同方法在KITTI test 3D and BEV benchmark上的结果。</p><p><img src="/2020/04/30/3d-point-clouds/t2.png" alt="t2" style="zoom: 67%;"></p><p><img src="/2020/04/30/3d-point-clouds/t3.png" alt="t3" style="zoom: 67%;"></p><p>可以观察到：</p><ul><li>Region proposal-based methods 是最常见的方法，在KITTI test 3D， BEV上的性能均超出了single shot methods。</li><li>现有的3D目标检测子（3D object detectors）有两个限制。第一，长范围的检测能力较弱。第二，如何充分利用图像中的纹理信息（texture information）仍然是个公开的问题。</li><li>多任务学习（ Multi-task learning）是在3D目标检测中未来的方向。例如，[99]通过合并多种任务，学习跨模态的表示来得到SOTA的检测效果。</li><li>3D物体跟踪（ 3D object tracking）和场景流估计（scene flow  estimation）是较新的研究方向，自2019年来受到越来越多的关注。</li></ul><h2><span id="4-3d-point-cloud-segmentation">4、3D Point Cloud Segmentation</span><a href="#4-3d-point-cloud-segmentation" class="header-anchor">#</a></h2><p>3D点云分割既需要了解全局的几何结构，又需要了解每个点的细粒度细节。根据分割的粒度，3D点云分割方法可分为以下三类：语义分割（场景级 scene level)）、实例分割（物体级 object level）和 part segmentation（part level）。</p><h3><span id="4-1-3d-semantic-segmentation-3d-yu-yi-fen-ge">4.1 3D Semantic Segmentation 3D 语义分割</span><a href="#4-1-3d-semantic-segmentation-3d-yu-yi-fen-ge" class="header-anchor">#</a></h3><p>给定一个点云，语义分割的目标是，根据语义信息，将各个点分成一定的子集。与3D shape classification（第2节）的分类类似，语义分割可分为两种方法：基于投影的方法和基于点的方法。</p><h4><span id="4-1-1-projection-based-networks-ji-yu-tou-ying-de-wang-luo">4.1.1 Projection-based Networks 基于投影的网络</span><a href="#4-1-1-projection-based-networks-ji-yu-tou-ying-de-wang-luo" class="header-anchor">#</a></h4><p>Intermediate regular representations（中间正则表示）可被分成以下几种：多视角(multi-view)表示[148], [149]、球状(spherical)表示[150], [151], [152]、体素(volumetric)表示[153], [154], [155]、超多面体晶格(permutohedral lattice )表示[156], [157]以及混合(hybrid)表示[158], [159]。具体可见下图。</p><p><img src="/2020/04/30/3d-point-clouds/pb.png" alt="pb" style="zoom: 50%;"></p><h5><span id="4-1-1-1-duo-shi-jiao-biao-shi-multi-view-representation">4.1.1.1 多视角表示 Multi-view Representation</span><a href="#4-1-1-1-duo-shi-jiao-biao-shi-multi-view-representation" class="header-anchor">#</a></h5><p>[148]首先将3D点云从多个虚拟的相机视角投影至2D平面上，接着，使用 multi-stream FCN 对合成图像进行像素级分数预测。最终，通过融合不同视图上的重投影分数（re-projected scores ）来获得每个点的最终语义标签。</p><p>相似地，[149]首先利用多个相机位置，得到点云的一些RGB和深度图快照。接着使用2D segmentation networks ，对这些快照进行像素级的标注label，使用残差校正(residual correction)进一步融合从RGB和深度图像预测的分数。</p><p>基于点云是从局部欧式曲面上采样得到的假设， [161]引入了tangent convolutions进行稠密的点云分割。该方法首先将各个点周围的局部曲面投影至虚拟的切平面。Tangent convolutions在曲面上直接进行。该方法具有很强的可扩展性，能够处理几百万个点的大规模点云。</p><p>总的来说，多视角分割方法的性能对视角的选择(viewpoint selection)和遮挡(occlusions)非常敏感。同时，这类方法并未能完全利用潜在的几何和结构信息，因为投影操作不可避免地引入了信息损失。</p><h5><span id="4-1-1-2-qiu-zhuang-biao-shi-spherical-representation">4.1.1.2 球状表示 Spherical Representation</span><a href="#4-1-1-2-qiu-zhuang-biao-shi-spherical-representation" class="header-anchor">#</a></h5><p>为了得到更快更准确的3D点云分割，[150]提出了基于SqueezeNet和条件随机场(Conditional Random Field (CRF))的端到端的网络。</p><p>为了进一步提升分割准确率，引入了SqueezeSegV2[151]，通过使用无监督的domain adaptationpipeline  解决domain shift 问题。</p><p>[152]提出了RangeNet++，针对LiDAR点云进行<u>实时</u>语义分割。首先将2D深度图像的语义标签转移至3D点云上，然后使用基于KNN的后处理步骤来减缓离散化误差和推理输出模糊的问题。</p><p>与单一的视角映射相比，球映射保持了更多的信息，并且更适合激光雷达（LiDAR）点云的标注。然而，这样的中间表示不可避免地引入了一些问题，比如离散化误差和遮挡问题。</p><h5><span id="4-1-1-3-ti-su-biao-shi-volumetric-representation">4.1.1.3 体素表示 Volumetric Representation</span><a href="#4-1-1-3-ti-su-biao-shi-volumetric-representation" class="header-anchor">#</a></h5><p>[163]首先将点云分成一系列占有的体素（occupancy voxels）。接着将这些中间数据送入至fully-3D CNN中进行体素级别的segmentation。最后，为一格体素（a voxel）内的所有点分配与该体素相同的语义标签label。该方法的性能极其受限于体素粒度(granularity of the voxels )和点云分割引起的边界伪影(boundary artifacts)。</p><p>之后，[164]提出SEGCloud来得到更细粒度和全局一致(global consistent)的语义分割。该方法引入了确定性的三线性插值，将由3D-FCNN产生的粗糙的体素预测映射回点云中，接着使用Fully Connected CRF，确保推测出的点云有着空间上的一致性。</p><p>[153]引入了一种基于核的变分自编码器结构，对每个体素内部的局部几何结构进行编码。这里摒弃了binary occupancy representations， 使用RBF得到连续的表示，并捕获到每个体素中点的分布。再使用VAE将各个体素中的点分布映射至紧凑的隐空间，最后使用CNN得到鲁棒的特征表示。</p><p><u>良好的可扩展性是体素表示中的优点之一</u>。具体而言，基于体素的网络（volumetric-based networks）可以在不同空间大小的点云中自由训练和测试。在Fully-Convolutional Point Network（FCPN）中，首先从点云中提取出来不同级别的几何相关性，再使用3D卷积和加权的average pooling 来提取特征、合并依赖关系。该方法可处理大规模的点云，并且在推断时有着良好的尺度扩展性质(scalability)。</p><p>[166]提出了ScanComplete来实现3D补全，以及对各个体素进行语义标注。该方法利用了全卷积网络(fully-convolutional neural networks)的尺度扩展性(scalability)，在训练和测试阶段可以适应不同大小的输入数据。使用从粗到细的策略来提高预测结果的分辨率。</p><p>很自然地，体素表示是稀疏的，其中非零元素的数量仅仅占很小一部分。因此，在空间上稀疏的数据使用稠密的卷积网络是比较无效的。为此，[155]提出了子流形的稀疏卷积网络( submanifold sparse convolutional networks)。该方法通过限制卷积的输出只能与被占据的体素有关，从而显著降低了内存和计算成本。同时，该稀疏卷积还可以控制提取出的特征的稀疏性。该子流形稀疏卷积很适合处理高维度且空间较稀疏的数据。</p><p>更进一步，[167]提出了一种用于三维视频感知的4D时空卷积神经网络（4D spatio-temporal convolutional neural network）“Minkowski Net”。</p><p>综上所述，体素表示很自然地保留了3D点云的邻域结构。其规范的数据形式还允许直接应用标准3D卷积。这些因素导致了该领域性能的稳步提高。然而，体素化的过程内在地引入了离散化的伪影和信息损失。通常，高分辨率会导致较高的内存和计算消耗，低分辨率引入了信息的损失。在实际中如何选择合适的网格分辨(grid resolution)率是non-trivial(不平凡的)的。</p><h5><span id="4-1-1-4-chao-duo-mian-ti-jing-ge-biao-shi-permutohedral-lattice-representation">4.1.1.4 超多面体晶格表示 Permutohedral Lattice Representation</span><a href="#4-1-1-4-chao-duo-mian-ti-jing-ge-biao-shi-permutohedral-lattice-representation" class="header-anchor">#</a></h5><p>[156]提出了基于双边卷积层（Bilateral convolution layers -BCLs）的稀疏晶格网络（Sparse Lattice Networks -SPLATNet）。该方法首先将原始点云插入至超多面体稀疏晶格(permutohedral sparse lattice)，再使用BCL对占据的部分进行卷积。得到的输出再重新插回原始点云。此外，该方法还允许灵活地联合处理多视图图像和点云。</p><p>更进一步，[157]提出了LatticeNet来实现有效的处理大规模点云。还引入了与数据相关的插值模块 DeformsSlice，将格点要素(lattice feature)反投影到点云中</p><h5><span id="4-1-1-5-hun-he-biao-shi-hybrid-representation">4.1.1.5 混合表示 Hybrid Representation</span><a href="#4-1-1-5-hun-he-biao-shi-hybrid-representation" class="header-anchor">#</a></h5><p>为了进一步利用所有可用信息，许多方法试图学习多模态特征(multi-modal features )。</p><p>[158]提出了joint 3D-mult-view网络，来组合RGB 特征和几何特征。一个3D CNN stream 和一些2D CNN stream用来提取特征，另一个可微分的back-projection layer用来合并3D和2D特征。</p><p>更进一步，[168]提出了unified point-based network来学习2D纹理信息，3D结构和全局特征。该方法直接应用基于点的网络(point-based networks)来提取局部几何特征和环境信息。</p><p>[159]提出了Multiview PointNet（MVPNet）来集成2D多视角特征和空间几何特征。</p><h4><span id="4-1-2-point-based-networks-ji-yu-dian-de-wang-luo">4.1.2 Point-based Networks 基于点的网络</span><a href="#4-1-2-point-based-networks-ji-yu-dian-de-wang-luo" class="header-anchor">#</a></h4><p>基于点的网络直接在点云上进行操作。然而，点云通常是无序且无结构的，使得直接应用标准的CNN不现实。为此，先驱的工作PointNet[5]用来对每个点进行特征学习，使用的是标准的MLP和全局特征。基于PointNet，一系列基于点的网络被提出。总体而言，这类方法可大致分为以下几类：<u>基于各个点的MLP方法</u>(pointwise MLP method)，<u>基于点卷积的方法</u>(point convolution methods)，<u>基于RNN的方法</u>(RNN-based methods)和<u>基于图的方法</u>(graph-based methods)。</p><h5><span id="4-1-2-1-pointwise-mlp-methods">4.1.2.1 Pointwise MLP Methods</span><a href="#4-1-2-1-pointwise-mlp-methods" class="header-anchor">#</a></h5><p>这类方法通常利用共享的MLP作为网络中的基本单元。然而，由共享MLP提取出的各个点上的特征，并不能获取到点云中的局部几何关系( local geometry)，以及点与点之间的关系(mutual interactions)[5]。为了获取各个点周围更广泛的信息，以及学习到更丰富的局部结构(local structures)，有很多方法被提出，包括<u>基于邻近点特征池化的方法</u>(methods based on neighboring feature pooling)，<u>基于注意力机制的集成</u>(attention-based aggregation)以及<u>局部-全局的特征级联</u>( local-global feature concatenation)。</p><p><strong>Neighboring feature pooling</strong></p><p>为了获取局部的几何形式，这类方法通过将局部邻域点集成的方式，对各个点学习特征。具体而言，PointNet++[27]将点分层次，逐步地分成一些组，如下图所示。多尺度的grouping和多分辨率的grouping来克服点云多样性造成的问题。</p><p><img src="/2020/04/30/3d-point-clouds/pn.png" alt="pn" style="zoom: 50%;"></p><p>之后，[114]提出了PointSIFT模块来实现方向的编码和scale awareness。该模块通过使用3阶段的有向的卷积操作，将8个空间方向的信息堆叠并且编码，将多尺度的特征提取并级联来实现对不同尺度的适应性。</p><p>与PointNet++中使用GROUPING的方法不同，[169]利用K-Means聚类和KNN的方法在世界空间和特征空间定义两种邻域。基于这样的假设：来自于同一类的点在特征空间中应当接近，该论文提出了pairwise distance loss and a centroid loss来对特征学习进行正则。</p><p>为了建模点与点之间的相互关系，[31]提出了PointWeb来寻找局部区域内所有点对之间的关系。[170]提出了置换不变性的卷积称之为Shellconv。[95]提出了有效、轻量的网络称为RandLA-Net实现大规模的点云处理。该方法利用随机样本采样，在内存和计算方面提升很多。提出的局部特征集成用来获取和保持几何特征。</p><p><strong>Attention-based aggregation</strong></p><p>为了进一步提升分割的准确率，[90]针对点云分割，提出了基于注意力的机制。</p><p>[29]提出了组随机注意力机制(group shuffle attention)来建模点之间的关系，并且提出了具有置换不变性、task-agnostic以及可微分的Gumbel Subset Sampling(GSS) ，来替代被广泛应用的Furthest Point Sampling(FPS)最远点抽样方法。该方法对离群点不敏感，并且可以选择具有代表性的点的子集。</p><p>为了更好地获取点云的空间分布，[171]提出了Local Spatial Aware(LSA)层来学习空间感知权重。</p><p>与CRF类似，[172]提出了Attention-based Score Refinement(ASR)模块对分割的结果进行后处理。初始分割结果通过pooling的方式进行修正。该模块很容易被集成至其他的深度网络中来提升分割效果。</p><p><strong>Local-global concatenation</strong></p><p>[85]提出了置换不变性的PS2-Net，将点云的局部结构(local structures)和全局信息(global context)合并。重复叠加Edgeconv[60]与NetVLAD[173]，以获取局部信息和场景级别的全局特征（scene-level global features）。</p><h5><span id="4-1-2-2-point-convolution-methods-dian-juan-ji-fa">4.1.2.2 Point Convolution Methods 点卷积法</span><a href="#4-1-2-2-point-convolution-methods-dian-juan-ji-fa" class="header-anchor">#</a></h5><p>这类方法通常试图提出在点云上进行更有效的卷积操作。</p><p>[49]提出了一种逐点卷积算子，其中邻域点被合并至kernel cell，然后与核权重进行卷积。</p><p>[174]提出了称之为PCCN的网络，该网络基于参数化的连续卷积层。该层的核函数由MLP参数化，横跨连续向量空间。</p><p>[42]提出了Kernel Point Fully Convolutional Network(KP-FCNN)，基于Kernel Point Convolution(KPConv)。具体而言，KPConv的卷积权重由欧式空间的距离决定，卷积核的点数（number of kernel points）也并不固定。卷积核点（kernel points）的位置由一个最优化问题确定。</p><p>在[175]中，作者提供了丰富的消融实验（ablation experiments）和可视化结果展示了集成方法中，感受野的重要性。同时他们提出了Dilated Point Convolution(DPC)操作，来集成邻近点的特征，进而取代KNN(K nearest neighbours)的方法。该方法在提升感受野（the receptive field）上非常有效，并且可以容易地集成至 aggregation-based networks。</p><h5><span id="4-1-2-3-rnn-based-methods">4.1.2.3 RNN-based Methods</span><a href="#4-1-2-3-rnn-based-methods" class="header-anchor">#</a></h5><p>为了从点云中获取固有的上下文特征(context features )，RNN也被用来进行点云的语义分割。</p><p>基于PointNet[5]， [180]首先将一大块点云转换成多尺度的块和网格块来获取输入级别的环境。接着，使用PointNet对各个块提取特征并送入Consolidation Units 或Recurrent Consolidation Units来获取输出级别的环境信息。实验结果显示，这样处理空间环境信息的方法在提高分割性能时是很重要的。</p><p>[179]提出了一种轻量的模块，利用了slice pooling layer将无序的点云特征转换成有序的特征向量。</p><p>[181]提出了Pointwise Pyramid Pooling (3P)模块来获取从粗到细的局部特征，并利用双向的RNN来实现端到端学习。然而这类方法损失了丰富的几何特征和密度分布[189]。</p><p>[189]提出了Dynamic Aggregation Network(DAR-Net)来同时考虑全局场景复杂度和局部几何特征。</p><p>[190]提出了3DCNN-DQN-RNN。该网络首先使用3DCNN学习空间分布和颜色特征，使用DQN进一步定位类别物体。最后级联的特征向量送入RNN中获取最后的分割结果。</p><h5><span id="4-1-2-4-graph-based-methods-ji-yu-tu-de-fang-fa">4.1.2.4 Graph-based Methods 基于图的方法</span><a href="#4-1-2-4-graph-based-methods-ji-yu-tu-de-fang-fa" class="header-anchor">#</a></h5><p>为了获取3D点云中潜在的形状和几何结构，一些方法使用了图神经网络（graph networks）。</p><p>[182]将点云看做是一些相连的简单形状和超点(Superpoint)的集合，并且使用属性有向图(attributed directed graph)（即超点图 superpoint graph ）获取结构和环境信息。接着，将大规模的点云分割问题分成三个子问题，即，geometrically homogeneous partition（几何均匀划分）, superpoint embedding（超点嵌入） and contextual segmentation（上下文分割）. </p><p>为了进一步提升，[183]提出了有监督的框架，来 oversegment a point cloud into pure superpoints（将点云过度分割为纯超点）。</p><p>为了更好地获取高维空间中的局部几何关系，[191]提出了基于Graph Embedding Module(GEM) 和 Pyramid Attention Network(PAN)的网络PyramNet。GEM模块将点云表述为有向无环图，并且在构建相似度矩阵时，利用协方差矩阵代替欧式距离。在PAN模块中，使用4个不同尺寸的卷积核来提取特征。</p><p>在[184]中，提出Graph Attention Convolution 用来从局部相邻集合中有选择性地学习相关特征。</p><h3><span id="4-2-instance-segmentation-shi-li-fen-ge">4.2 Instance Segmentation 实例分割</span><a href="#4-2-instance-segmentation-shi-li-fen-ge" class="header-anchor">#</a></h3><p>与语义分割  semantic segmentation 相比，实例分割更具有挑战性因为它需要更准确和更小的细粒度，具体而言，他不仅需要将有着不同语义的点分辨出来，还需要将有着相同语义的实例 (instance )分出来。总体而言，目前的方法可分为两个方向：<u>基于候选框的方法</u>(proposal-based)以及<u>不需要候选框的方法</u>(proposal-free)。一些里程碑式的方法具体见下图。</p><p>(按时间顺序概述了典型的三维点云实例分割方法)</p><p><img src="/2020/04/30/3d-point-clouds/is.png" alt="is" style="zoom: 50%;"></p><h4><span id="4-2-1-proposal-based-methods-ji-yu-hou-xuan-kuang">4.2.1 Proposal-based Methods 基于候选框</span><a href="#4-2-1-proposal-based-methods-ji-yu-hou-xuan-kuang" class="header-anchor">#</a></h4><p>这类方法将实例分割问题分成两个子任务：3D物体检测（3D object detection ）和实例mask的预测（instance mask prediction）。</p><p>[192]提出了3D fully-convolutional Semantic Instance Segmentation (3D-SIS) network，来实现在RGB-D数据上的语义实例分割。该网络从颜色和几何中学习特征。与3D object detection 类似，3D Region Proposal Network（3D-RPN）和 3D ROI layer用来预测bounding box的位置，物体类别和instance mask。</p><p>根据合成分析策略，[193]提出了Generative Shape Proposal Network(GSPN)来产生3D候选框。这些候选框再通过R-PointNet修正。最终的标签通过预测各个点的二进制mask来得到。与直接从点云数据回归三维边界框不同，该方法通过加强几何理解，去除了大量无用的候选框。</p><p>通过将2D全景分割( 2D panoptic segmentation)扩展到3D映射，[194]为实现大规模三维重建（3D reconstruction）、语义标注（semantic labeling）和instance segmentation，提出了一种在线三维映射系统（oneline volumetirc 3D mapping system）。该方法首先利用2D语义和实例分割网络来获得像素级的全景标签（panoptic labels ），然后将这些标签整合到 volumtric map 上。进一步使用全连接的CRF来实现准确的分割，该语义映射系统能够实现高质量的语义映射（ semantic mapping）和具有判别性的目标检测（object recognition）。</p><p>[195]提出了单阶段的，不需要anchor的端到端可训练网络—3D-BoNet，来实现点云上的 instance segmentation。该方法对所有可能的instance 直接回归大致的3D bounding boxes，接着利用点级别的二分类器（binary classifier）来获取实例标签。特别地，该 bounding box generation task是被当做是最优分配问题。同时，使用了multi-criteria 损失函数来正则化生成的bounding boxes。该方法不需要任何的后处理操作，并且有很高的计算效率。</p><p>[196]提出了针对大规模户外LiDAR点云进行instance segmentation的网络。该方法使用self-attention blocks，在点云的鸟瞰图上学习特征表示（feature representation），根据预测的水平中心和高度限制获得最终实例标签（instance labels）。</p><p>总的来说，基于候选框的方法较为直观，并且实例分割的结果通常较好。然而该方法需要多阶段的训练并且需要对多余候选框进行裁剪。因此通常都需要更多的时间和计算资源。</p><h4><span id="4-2-2-proposal-free-methods-bu-xu-yao-hou-xuan-kuang">4.2.2 Proposal-free Methods 不需要候选框</span><a href="#4-2-2-proposal-free-methods-bu-xu-yao-hou-xuan-kuang" class="header-anchor">#</a></h4><p>不需要候选框的方法[197-202]并没有目标检测的模块（ object detection module）。作为替代的是，他们通常将instance segmentation 认为是semantic segmentation （语义分割）后的聚类步骤。具体而言，需要现有的方法都基于这样的假设：属于同一实例的点应当有着相似的特征。因此这类方法通常聚焦于判别式的特征学习（discriminative feature learning）和点云聚类（point grouping）。</p><p>……</p><p>总体而言，不需要候选框的方法不需要耗费资源的区域生成步骤。然而，因为该方法不检测物体的边界，导致该方法的准确率较低。</p><h3><span id="4-3-part-segmentation">4.3 Part Segmentation</span><a href="#4-3-part-segmentation" class="header-anchor">#</a></h3><p>零件分割（part segmentation of 3D shapes）的主要困难来自于两方面。第一，有相同语义标签（ semantic label）的部件（shape parts）有着较大的几何变化和不确定性；第二，该方法需要对噪声和采样具有鲁棒性。</p><p>[208]提出了VoxSegNet，在3D体素数据上来实现细粒度的零件分割。</p><p>[209]将FCN与surface-based CRF组合，实现端到端的3D 零件分割。他们首先从不同的视角产生图像来实现optimal surface coverage，并将这些图片送入至2D网络产生置信图。接着，使用surface-based CRF 将置信图集成起来，用来对整个场景打标签。</p><p>[210]引入了Synchronized Spectral CNN(SyncSpecCNN)，在不规则非同构形状图上实现卷积。</p><p>[211]通过引入Shape Fully Convolutional Networks(SFCN),在3D网格上实现了形状分割，并且将三种低层次的几何特征作为输入。接着利用基于投票的多标签graph cut来修正分割结果。</p><p>[212]提出了弱监督的CoSegNet进行3D形状分割。该网络将一些未分割的3D点云形状作为输入，接着通过最小化group consistency loss，产生形状零件的标签。与CRF类似，预训练的part-refinement网络用来修正并且去噪。</p><p>[213]提出了Branched Auto-encoder network(BAE-NET)用来unsupervised ，one-shot和weakly supervised  3D shape co-segmentation。</p><h3><span id="4-4-summary">4.4 Summary</span><a href="#4-4-summary" class="header-anchor">#</a></h3><p>下表展示了已有方法在公开数据集上的结果，包括：S3DIS[176], Semantic3D[9], ScanNet[102]和SemanticKITTI[177].</p><p><img src="/2020/04/30/3d-point-clouds/ps.png" alt="ps" style="zoom: 50%;"></p><p>接下来这些问题需要进一步的探索。</p><ul><li>Point-based networks 是最常见的方法。然而，点的表示通常没有明确的邻域信息，现有的大多数基于点的方法不得不求助于昂贵的邻域搜索机制（KNN, ball query）。这自然地限制了这类方法的有效性，因为邻域查找方法需要很高的计算资源和内存。</li><li>在 point cloud segmentation 中，从不平衡的数据中学习仍然是具有挑战性的问题。尽管许多方法[42], [170], [182]达到了不错的结果，但性能在较小类别的数据上仍然较差。</li><li>大多数的方法[5], [27], [52], [170], [171]在较少点的点云上进行（4096）。实际上，从深度sensor上得到的点云是非常稠密的。因此需要寻求处理大规模点云的有效分割方法。</li><li>一些工作[145], [146], [167]开始在动态点云中学习空间-时间的信息，期望时空信息能够帮助提高后续任务（如3D对象识别[3D object recognition]、分割[segmentation]和补全[completion]）的性能。</li></ul><h2><span id="5-conclusion">5、CONCLUSION</span><a href="#5-conclusion" class="header-anchor">#</a></h2><p>本文章提出了当前针对3D understanding的一些SOTA方法，包括3D shape classification ，3D object detection &amp; tracking以及3D scene and object segmentation。对这些方法进行了全面的分类和性能比较。文中还介绍了各种方法的优缺点，并指出了可能的研究方向。</p><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/103640399">1</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;三维点云深度学习研究综述&quot;&gt;&lt;a href=&quot;#三维点云深度学习研究综述&quot; class=&quot;headerlink&quot; title=&quot;三维点云深度学习研究综述&quot;&gt;&lt;/a&gt;三维点云深度学习研究综述&lt;/h1&gt;&lt;p&gt;论文：Deep Learning for 3D Point Clouds: A Survey&lt;/p&gt;
&lt;p&gt;作者：Yulan Guo&lt;/p&gt;
&lt;p&gt;时间：2019-12&lt;/p&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;动机&lt;/strong&gt;：Point cloud learning （点云学习）由于在视觉、自动驾驶、机器人等方面的广泛应用，近年来受到了广泛的关注。最近，随着点云的深度学习变得更加兴旺，人们提出了许多方法来解决这一领域的不同问题。为了促进未来的研究，本文对点云深度学习方法的最新进展进行了全面的综述。&lt;/p&gt;
    
    </summary>
    
    
      <category term="paper-cv" scheme="https://sunxiaojie99.github.io/categories/paper-cv/"/>
    
    
  </entry>
  
  <entry>
    <title>pytorch help</title>
    <link href="https://sunxiaojie99.github.io/2020/04/21/pytorch-help/"/>
    <id>https://sunxiaojie99.github.io/2020/04/21/pytorch-help/</id>
    <published>2020-04-21T14:03:52.000Z</published>
    <updated>2021-03-12T16:33:47.065Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="pytorch-su-cha-shou-ce">Pytorch 速查手册</span><a href="#pytorch-su-cha-shou-ce" class="header-anchor">#</a></h1><p>希望整理曾经不懂的Pytorch用法，在以后以快速得到结果</p><span id="more"></span><h2><span id="1-guan-yu-tensors">1 关于Tensors</span><a href="#1-guan-yu-tensors" class="header-anchor">#</a></h2><p><strong>自我介绍</strong>：张量的英文是Tensor，它是PyTorch里面基础的运算单位，与Numpy的ndarray相同都表示的是一个多维的矩阵。 与ndarray的最大区别就是，PyTorch的Tensor<strong>可以在 GPU 上运行</strong>，而 numpy 的 ndarray 只能在 CPU 上运行，在GPU上运行大大加快了运算速度。</p><p>在同构的意义下，<strong>第零阶张量</strong> （r = 0） 为<strong>标量</strong> （Scalar），在同构的意义下， （r = 1） 为<strong>向量</strong> （Vector）， <strong>第二阶张量</strong> （r = 2） 则称为<strong>矩阵</strong> （Matrix）<strong>，第三阶以上</strong>的统称为<strong>多维张量</strong>。</p><ol><li><strong>torch.empty()</strong>：构造一个不初始化的张量 <code>x = torch.empty(5,3)</code></li><li><strong>torch.rand()</strong>：返回一个张量，包含了从区间[0, 1)的均匀分布中抽取的一组随机数  <code>x = torch.rand(5,3)</code> 5行3列的的矩阵</li><li><strong>x.shape</strong>：可以使用与numpy相同的shape查看张量大小 <code>print(x.shape)</code> torch.Size([2, 3])</li><li><strong>size()</strong>：使用size()函数，效果与shape相同 <code>x.size()</code>  torch.Size([2, 3])</li><li><strong>torch.zeros()</strong> ：构造全0矩阵 <code>x = torch.zeros(5, 3, dtype=torch.long)</code></li><li><strong>torch.ones()</strong>：返回一个张量，全1 <code>x = torch.ones(2, 2)</code></li><li><strong>torch.eye()</strong>：初始化一个单位矩阵，即对角线为1 其他为0，<code>eye=torch.eye(2,2)</code></li><li><strong>torch.randn()</strong>：返回一个张量，包含了从标准正态分布（均值为0，方差为1，即高斯白噪声）中抽取的一组随机数。<code>torch.randn(2, 3)</code></li><li><strong>torch.linspace(start, end, steps=100, out=None)</strong> → Tensor：返回一个1维张量，包含在区间start和end上均匀间隔的step个点。</li><li><strong>torch.tensor()</strong>：构造一个张量，直接使用数据 <code>x = torch.tensor([5.5, 3])</code></li><li><strong>x.new_ones()</strong>：基于已经存在的tensor创建一个张量 <code>x = x.new_ones(5, 3, dtype=torch.double)</code></li><li><strong>torch.randn_like()</strong>：<code>x = torch.randn_like(x, dtype=torch.float)</code> 会覆盖了以前的类型</li><li><strong>torch.size()</strong>：获取tensor的维度信息, torch.Size 是一个元组，所以它支持左右的元组操作。 <code>x.size()</code></li><li><strong>x + y</strong>：加法</li><li><strong>torch.add(x, y)</strong>：加法</li><li><strong>torch.add(x, y, out=result)</strong>：加法，结果赋给result <code>result = torch.empty(5, 3)</code></li><li><strong>y.add_(x)</strong>：把x加到y上面，直接覆盖y原来的值，<strong>以_为结尾的函数，均会改变调用值</strong>。</li><li><strong>x[:, 1]</strong>：输出第二列，注意索引从0开始</li><li><strong>torch.view</strong>()：改变一个tensor的大小或者性质<pre class=" language-lang-python"><code class="language-lang-python">x = torch.randn(4,4)  # torch.Size([4, 4])y = x.view(16) # 16维的一个list，不是矩阵了 torch.Size([16])z = x.view(-1, 8) # the size -1 is inferred from other dimensions  torch.Size([2, 8]</code></pre></li><li><strong>a.transpose(1, 2)</strong>：Swaps 2nd and 3rd dimension</li></ol><pre class=" language-lang-python"><code class="language-lang-python">a = torch.randn(1, 2, 3, 4) # torch.Size([1, 2, 3, 4])b = a.transpose(1, 2)  # torch.Size([1, 3, 2, 4])</code></pre><ol><li><strong>x.item()</strong>：对于标量（零阶张量），我们可以直接使用 .item() 从中取出其对应的python对象的数值；特别的：如果张量中只有一个元素的tensor也可以调用<code>tensor.item</code>方法。</li></ol><pre class=" language-lang-python"><code class="language-lang-python"># 标量scalar =torch.tensor(3.1433223)print(scalar) # tensor(3.1433)scalar.size() # torch.Size([])scalar.item() # 3.143322229385376# 只有一个元素的tensor，使用.item()来获得这个的value。x = torch.randn(1)print(x) # tensor([-1.7860])print(x.item()) # -1.7859678268432617print(x.size()) # torch.Size([1])loss = (y_pred - y).pow(2).sum().item()</code></pre><ol><li><p><strong>x.mm(y)</strong>：张量相乘（numpy中的x.dot(y)）</p></li><li><p><strong>x.t()</strong>：张量转置（numpy 中的x.T）</p></li><li><p><strong>x.clamp(min=0)</strong>：relu函数（numpy 中的np.maximum(h, 0)）</p></li><li><p><strong>x.clone()</strong>：张量复制（numpy 中的x.copy() ）</p></li><li><p><strong>.pow(2)</strong>：每个元素平方 <code>loss = (y_pred - y).pow(2).sum()</code></p></li><li><p><strong>数据类型</strong>：Tensor的基本数据类型有五种</p><ul><li>32位浮点型：torch.FloatTensor。 (默认) <code>tensor.float()</code></li><li>64位整型：torch.LongTensor。 <code>tensor.long()</code></li><li>32位整型：torch.IntTensor。<code>tensor.int()</code></li><li>16位整型：torch.ShortTensor。 <code>tensor.short()</code></li><li>64位浮点型：torch.DoubleTensor。</li><li>除以上数字类型外，还有 byte和chart型 <code>tensor.char()</code> <code>tensor.byte()</code></li></ul></li><li><p><strong>numpy和Tensor转换</strong>：</p><ul><li><pre class=" language-lang-python"><code class="language-lang-python">a = torch.randn((3, 2))# tensor转化为numpynumpy_a = a.numpy()</code></pre></li><li><pre class=" language-lang-python"><code class="language-lang-python"># numpy转化为Tensortorch_a = torch.from_numpy(numpy_a)torch_a</code></pre></li></ul></li><li><p><strong>torch.max()</strong>：eg：dim=1代表沿着行取最大值，<code>max_value, max_idx = torch.max(x, dim=1)</code></p></li><li><p><strong>torch.sum()</strong>：eg：每行 x 求和，<code>sum_x = torch.sum(x, dim=1)</code></p></li></ol><h2><span id="2-qiu-dao-xiang-guan">2 求导相关</span><a href="#2-qiu-dao-xiang-guan" class="header-anchor">#</a></h2><ol><li><p><strong>requires_grad=False</strong>：在张量创建时，通过设置 requires_grad 标识为Ture来告诉Pytorch需要对该张量进行自动求导，PyTorch会记录该张量的每一步操作历史并自动计算。<strong>默认为False</strong>，如果我们想计算某些的tensor的梯度，我们只需要在建立这个tensor时加入这么一句：requires_grad=True。<code>x = torch.rand(5, 5, requires_grad=True)</code></p></li><li><p><strong>x.grad</strong>：如果这个tensor x的requires_grad=True，那么反向传播之后x关于某个标量值的梯度会累积在张量 x.grad上。PyTorch会自动追踪和记录对与张量的所有操作，当计算完成后调用.backward()方法自动计算梯度并且将计算结果保存到grad属性中。</p></li><li><p><strong>.grad_fn</strong>：在张量进行操作后，grad_fn会被赋予一个新的函数，这个函数引用了一个创建了这个Tensor类的Function对象。 Tensor和Function互相连接生成了一个非循环图，它记录并且编码了完整的计算历史。每个张量都有一个.grad_fn属性，如果这个张量是用户手动创建的那么这个张量的grad_fn是None。</p></li><li><p><strong>with torch.no_grad():</strong>：在训练神经网络时，我们通常不希望通过权重更新步骤进行反向传播，使用<code>with torch.no_grad():</code>上下文管理器来防止构造计算图。使用上下文管理器临时禁止对已设置requires_grad=True的张量进行自动求导。这个方法<strong>在测试集计算准确率</strong>的时候会经常用到。使用.no_grad()进行嵌套后，代码不会跟踪历史记录，也就是说保存的这部分记录会减少内存的使用量并且会加快少许的运算速度。</p><pre class=" language-lang-python"><code class="language-lang-python">with torch.no_grad():        w1 -= learning_rate * w1.grad        w2 -= learning_rate * w2.grad        # 反向传播后手动将梯度设置为零        w1.grad.zero_()        w2.grad.zero_()</code></pre></li><li><p><strong>with torch.set_grad_enabled(False)</strong>：一个全局的环境，接下来所有的tensor运算产生的新的节点都是不可求导的；设置为True就是可以求导的了</p></li><li><p><strong>loss.backward()</strong>：.backward() 自动计算所有的requires_grad=True 张量的梯度，张量的梯度将累积到其<code>.grad</code>属性中。</p><pre class=" language-lang-python"><code class="language-lang-python">x = torch.rand(5, 5, requires_grad=True)x = torch.rand(5, 5, requires_grad=True)z=torch.sum(x+y)# 如果Tensor类表示的是一个标量（即它包含一个元素的张量），则不需要为backward()指定任何参数，但是如果它有更多的元素，则需要指定一个gradient参数，它是形状匹配的张量。 以上的 z.backward()相当于是z.backward(torch.tensor(1.))的简写。 这种参数常出现在图像分类中的单标签分类，输出一个标量代表图像的标签。x = torch.rand(5, 5, requires_grad=True)y = torch.rand(5, 5, requires_grad=True)z= x**2+y**3#我们的返回值不是一个标量，所以需要输入一个大小相同的张量作为参数，这里我们用ones_like函数根据x生成一个张量z.backward(torch.ones_like(x))print(x.grad)</code></pre></li><li><p><strong>↑Autograd 过程解析</strong>：Python的 <code>dir()</code> 返回参数的属性、方法列表。<code>z</code>是一个Tensor变量，看看里面有哪些成员变量。我们直接排除掉一些Python中特殊方法（以_开头和结束的）和私有方法（以<em>开头的，直接看几个比较主要的属性： <code>.is_leaf</code>：记录是否是叶子节点。通过这个属性来确定这个变量的类型，在官方文档中所说的“graph leaves”，“leaf variables”，都是指像<code>x</code>，<code>y</code>这样的手动创建的、而非运算得到的变量，这些变量成为<strong>创建变量</strong>。 像<code>z</code>这样的，是通过计算后得到的结果称为<em>*结果变量</em></em>。</p></li><li><p><strong>.is_leaf</strong>：一个变量是创建变量还是结果变量是通过<code>.is_leaf</code>来获取的。</p><pre class=" language-lang-python"><code class="language-lang-python">x = torch.rand(5, 5, requires_grad=True)y = torch.rand(5, 5, requires_grad=True)z= x**2+y**3print("x.is_leaf="+str(x.is_leaf)) # x.is_leaf=Trueprint("z.is_leaf="+str(z.is_leaf)) # z.is_leaf=False# x是手动创建的没有通过计算，所以他被认为是一个叶子节点也就是一个创建变量，而z是通过x与y的一系列计算得到的，所以不是叶子结点也就是结果变量。</code></pre></li><li><p><strong>为什么我们执行<code>z.backward()</code>方法会更新<code>x.grad</code>和<code>y.grad</code>呢？</strong></p><ul><li><p><code>.grad_fn</code>属性记录的就是这部分的操作，记录并且编码了完整的计算历史。</p><pre class=" language-lang-python"><code class="language-lang-python">z.grad_fn  # <addbackward0 at 0x120840a90># grad_fn是一个AddBackward0类型的变量</addbackward0></code></pre></li><li><p>我们 dir(z.grad_fn)，看看里面有什么东西？<code>next_functions</code> 就是<code>grad_fn</code>的精华！</p><pre class=" language-lang-python"><code class="language-lang-python">dir(z.grad_fn) # 'next_functions',z.grad_fn.next_functions # ((<powbackward0 at 0x1208409b0>, 0), (<powbackward0 at 0x1208408d0>, 0))# next_functions是一个tuple of tuple of PowBackward0 and int。# 为什么是2个tuple ？ 因为我们的操作是z= x**2+y**3 刚才的AddBackward0是相加，而前面的操作是乘方 PowBackward0。tuple第一个元素就是x相关的操作记录</powbackward0></powbackward0></code></pre></li><li><p>继续挖掘：在PyTorch的反向图计算中，<code>AccumulateGrad</code>类型代表的就是叶子节点类型，也就是计算图终止节点。<code>AccumulateGrad</code>类中有一个<code>.variable</code>属性指向叶子节点。</p><pre class=" language-lang-python"><code class="language-lang-python">xg = z.grad_fn.next_functions[0][0]dir(xg) # next_functionsx_leaf=xg.next_functions[0][0]type(x_leaf) # AccumulateGradx_leaf.variable # 这个.variable的属性就是我们的生成的变量xprint("x_leaf.variable的id:"+str(id(x_leaf.variable)))print("x的id:"+str(id(x)))# x_leaf.variable的id:4840553424# x的id:4840553424</code></pre></li><li><p>这样整个规程就很清晰了：</p><ul><li>当我们执行z.backward()的时候。这个操作将调用z里面的grad_fn这个属性，执行求导的操作。</li><li>这个操作将遍历grad_fn的next_functions，然后分别取出里面的Function（AccumulateGrad），执行求导操作。这部分是一个递归的过程直到最后类型为叶子节点。</li><li>计算出结果以后，将结果保存到他们对应的variable 这个变量所引用的对象（x和y）的 grad这个属性里面。</li><li>求导结束。所有的叶节点的grad变量都得到了相应的更新</li></ul></li></ul></li><li><p><strong>.detach()</strong>：停止tensor历史记录的跟踪，该tensor与计算历史记录分离，并防止将来的计算被跟踪。</p></li><li><p><strong>.grad.zero_()</strong>：将梯度设置为零 <code>w1.grad.zero_()</code></p></li><li><p><strong>.zero_grad()</strong>：手动将梯度缓冲区设置为零 <code>optimizer.zero_grad()</code></p></li><li><p><strong>torch.device()</strong>：应该是方便GPU上运行的 <code>device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')</code></p></li><li><p><strong>torch.autograd.Function</strong>：<strong>如果需要自定义autograd扩展新的功能</strong>，就需要扩展Function类。因为Function使用autograd来计算结果和梯度，并对操作历史进行编码。定义<code>torch.autograd.Function</code>的子类并三个方法，来<strong>定义自己的自动求导运算</strong></p><pre class=" language-lang-python"><code class="language-lang-python"># __init__ (optional)：如果这个操作需要额外的参数则需要定义这个Function的构造函数，不需要的话可以忽略。# forward()：执行前向传播的计算代码# backward()：反向传播时梯度计算的代码。 参数的个数和forward返回值的个数一样，每个参数代表传回到此操作的梯度。</code></pre><pre class=" language-lang-python"><code class="language-lang-python"># 调用 MyReLU.apply 函数来使用自定义的ReLUimport torchclass MyReLU(torch.autograd.Function):    # (输入参数是张量)    # 方法必须是静态方法，所以要加上@staticmethod     @staticmethod    def forward(ctx, x):         # ctx 用来保存信息这里类似self，并且ctx的属性可以在backward中调用        ctx.save_for_backward(x)        return x.clamp(min=0)    @staticmethod    def backward(ctx, grad_output):        x, = ctx.saved_tensors        grad_x = grad_output.clone()        grad_x[x < 0] =0        return grad_x# 详见 大刀阔斧，步步推进 # 调用 MyReLU.apply 函数来使用自定义的ReLUy_pred = MyReLU.apply(x.mm(w1)).mm(w2)</code></pre></li></ol><h2><span id="3-shu-ju-jia-zai-chu-li-xiang-guan">3 数据加载处理相关</span><a href="#3-shu-ju-jia-zai-chu-li-xiang-guan" class="header-anchor">#</a></h2><p><strong>相关头文件</strong></p><pre class=" language-lang-python"><code class="language-lang-python">from __future__ import print_function, divisionimport osimport torchimport pandas as pd              #用于更容易地进行csv解析from skimage import io, transform    #用于图像的IO和变换import numpy as npimport matplotlib.pyplot as pltfrom torch.utils.data import Dataset, DataLoaderfrom torchvision import transforms, utils# 忽略警告import warningswarnings.filterwarnings("ignore")plt.ion()   # interactive mode 在脚本中遇到plt.show()，代码还是会继续执行</code></pre><ol><li><p><strong>pd.read_csv()</strong>：读取csv数据 </p><pre class=" language-lang-python"><code class="language-lang-python">landmarks_frame = pd.read_csv('data/faces/face_landmarks.csv')n = 65img_name = landmarks_frame.iloc[n, 0] # 获取第65行第0列数据landmarks = landmarks_frame.iloc[n, 1:].as_matrix() # 将第1列以后的转化为矩阵landmarks = landmarks.astype('float').reshape(-1, 2)  # 将原本一行的数据转化为两行列，一列为x坐标，y坐标</code></pre></li><li><p><strong>.iloc[n, 1:]</strong>：数据切片，获取第n行，第1列以后的数据</p></li><li><p><strong>.as_matrix()</strong>：转化为矩阵</p></li><li><p><strong>.astype(‘float’)</strong>：转换格式</p></li><li><p><strong>.reshape(-1, 2)</strong>：重塑大小</p></li><li><p><strong>torch.utils.data.Dataset</strong>：表示数据集的抽象类，因此自定义的数据集应继承Dataset 并重载以下方法</p><ul><li><p><code>__len__</code> ：实现 <code>len(dataset)</code> 返回数据集的尺寸</p><ul><li><code>__getitem__</code>：用索引(<code>0</code> 到 <code>len(self)</code>)获取一条数据或一个样本</li><li><code>__init__</code>：读取csv的文件内容</li></ul><pre class=" language-lang-python"><code class="language-lang-python">class FaceLandmarksDataset(Dataset):  def __init__(self, csv_file, root_dir, transform=None):      self.landmarks_frame = pd.read_csv(csv_file)      self.root_dir = root_dir      self.transform = transform  def __len__(self):      return len(self.landmarks_frame) # 有多少样本（行）  def __getitem__(self, index):      img_name = os.path.join(self.root_dir, self.landmarks_frame.iloc[index, 0])      image = io.imread(img_name)      landmarks = self.landmarks_frame.iloc[index, 1:]      landmarks = np.array([landmarks])      landmarks = landmarks.astype('float').reshape(-1, 2)      sample = {'image': image, 'landmarks': landmarks}      if self.transform:          sample = self.transform(sample)      return sample</code></pre></li></ul></li><li><p><strong>torchvision.transforms.Compose</strong>：组合一个变换</p></li></ol><ul><li>Resize：把给定的图片resize到given size</li><li>transforms.ToTensor(), convert a PIL image to tensor <code>(H*W*C)</code> in range [0,255] to a torch.Tensor<code>(C*H*W)</code> in the range [0.0,1.0]  把[0,255]转换到[0.0, 1.0]</li><li>transforms.Normalize ：Normalized an tensor image with mean and standard deviation; </li><li>ToPILImage: convert a tensor to PIL image</li><li>Scale：目前已经不用了，推荐用Resize</li><li>CenterCrop：在图片的中间区域进行裁剪</li><li>RandomCrop：在一个随机的位置进行裁剪</li><li>RandomHorizontalFlip：以0.5的概率水平翻转给定的PIL图像</li><li>RandomVerticalFlip：以0.5的概率竖直翻转给定的PIL图像</li><li>RandomResizedCrop：将PIL图像裁剪成任意大小和纵横比</li><li>Grayscale：将图像转换为灰度图像</li><li>RandomGrayscale：将图像以一定的概率转换为灰度图像</li><li><p>ColorJitter：随机改变图像的亮度对比度和饱和度。</p><pre class=" language-lang-python"><code class="language-lang-python"> import torch from torchvision import transforms, datasets data_transform = transforms.Compose([         transforms.RandomSizedCrop(224),         transforms.RandomHorizontalFlip(),         transforms.ToTensor(),         transforms.Normalize(mean=[0.485, 0.456, 0.406],                              std=[0.229, 0.224, 0.225])     ]) hymenoptera_dataset = datasets.ImageFolder(root='hymenoptera_data/train', transform=data_transform) dataset_loader = torch.utils.data.DataLoader(hymenoptera_dataset,batch_size=4, shuffle=True,num_workers=4)</code></pre></li></ul><ol><li><p><strong>np.random.randint(0,n)</strong>：获取一个随机整数</p></li><li><p><strong>torch.utils.data.DataLoader</strong>：对所有数据集简单的使用for循环牺牲了许多功能，尤其是：批量处理数据、打乱数据。torch.utils.data.DataLoader是一个提供上述所有这些功能的迭代器。</p><pre class=" language-lang-python"><code class="language-lang-python"># 代码一般是这么写的：# 1. 定义学习集 DataLoadertrain_data = torch.utils.data.DataLoader(hymenoptera_dataset,batch_size=4, shuffle=True,num_workers=4,各种设置...)# 2.将数据喂入神经网络进行训练for i, (input, target) in enumerate(train_data):     循环代码行......# DataLoader中的几个重要参数# dataset：（数据类型 dataset）输入的数据类型# batch_size：（数据类型 int）每次输入数据的行数，默认为1,每次喂给神经网络多少行数据# shuffle：（数据类型 bool）洗牌。默认设置为False。在每次迭代训练时是否将数据洗牌，默认设置是False。将输入数据的顺序打乱，是为了使数据更有独立性，但如果数据是有序列特征的，就不要设置成True了。# num_workers：（数据类型 Int）工作者数量，默认是0。使用多少个子进程来导入数据。设置为0，就是使用主进程来导入数据。注意：这个数字必须是大于等于0的，负数估计会出错。# drop_last：（数据类型 bool）丢弃最后数据，默认为False。设置了 batch_size 的数目后，最后一批数据未必是设置的数目，有可能会小些。这时你是否需要丢弃这批数据。# timeout：（数据类型 numeric）超时，默认为0。是用来设置数据读取的超时时间的，但超过这个时间还没读取到数据的话就会报错。 所以，数值必须大于等于0。</code></pre><ul><li><p>DataLoader返回的是一个可迭代对象，我们可以使用迭代器分次获取数据</p><pre class=" language-lang-python"><code class="language-lang-python">dl = torch.utils.data.DataLoader(ds_demo, batch_size=10, shuffle=True, num_workers=0)idata=iter(dl)print(next(idata))</code></pre></li><li><p>常见的用法是使用for循环对其进行遍历</p><pre class=" language-lang-python"><code class="language-lang-python">for i, data in enumerate(dl):    print(i,data)    # 为了节约空间，这里只循环一遍    break</code></pre></li><li><p>我们已经可以<strong>通过dataset定义数据集</strong>，并<strong>使用Datalorder载入和遍历数据集</strong>，除了这些以外，PyTorch还提供能<strong>torcvision的计算机视觉扩展包</strong>，torchvision 是PyTorch中专门用来<strong>处理图像的库</strong>，里面封装了torchvision.datasets、torchvision.models、torchvision.transforms：</p><ul><li><p><strong>torchvision.datasets</strong>：torchvision.datasets 可以理解为PyTorch团队自定义的dataset，这些dataset帮我们提前处理好了很多的图片数据集，我们拿来就可以直接使用：</p><pre class=" language-lang-python"><code class="language-lang-python">MNISTCOCOCaptionsDetectionLSUNImageFolderImagenet-12CIFARSTL10SVHNPhotoTour # 示例如下：import torchvision.datasets as datasetstrainset = datasets.MNIST(root='./data', # 表示 MNIST 数据的加载的目录                                      train=True,  # 表示是否加载数据库的训练集，false的时候加载测试集                                      download=True, # 表示是否自动下载 MNIST 数据集                                      transform=None) # 表示是否需要对数据进行预处理，none为不进行预处理</code></pre></li><li><p><strong>torchvision.models</strong>：torchvision不仅提供了常用图片数据集，还提供了训练好的模型，可以加载之后，直接使用，或者在进行迁移学习。 torchvision.models模块的子模块中包含以下模型结构。</p><pre class=" language-lang-python"><code class="language-lang-python">AlexNetVGGResNetSqueezeNetDenseNet#我们直接可以使用训练好的模型，当然这个与datasets相同，都是需要从服务器下载的import torchvision.models as modelsresnet18 = models.resnet18(pretrained=True)</code></pre></li><li><p><strong>torchvision.transforms</strong>：transforms 模块提供了一般的图像转换操作类，用作数据处理和数据增强</p><pre class=" language-lang-python"><code class="language-lang-python">from torchvision import transforms as transformstransform = transforms.Compose([    transforms.RandomCrop(32, padding=4),  #先四周填充0，在把图像随机裁剪成32*32    transforms.RandomHorizontalFlip(),  #图像一半的概率翻转，一半的概率不翻转    transforms.RandomRotation((-45,45)), #随机旋转    transforms.ToTensor(),    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.229, 0.224, 0.225)), #R,G,B每层的归一化用到的均值和方差])</code></pre><p>肯定有人会问：(0.485, 0.456, 0.406), (0.2023, 0.1994, 0.2010) 这几个数字是什么意思？这些都是根据ImageNet训练的归一化参数，可以直接使用，我们认为这个是固定值就可以</p></li></ul></li></ul></li><li><p><strong>torchvision.datasets.ImageFolder</strong>：torchvision包提供了常用的数据集类(datasets)和转换(transforms)，你可能不需要自己构造这些类。很常用的数据集类<strong>ImageFolder</strong>。 它假定了数据集是以如下方式构造的，其中’ants’,bees’等是分类标签。</p><pre class=" language-lang-python"><code class="language-lang-python">root/ants/xxx.pngroot/ants/xxy.jpegroot/ants/xxz.png.root/bees/123.jpgroot/bees/nsdf3.pngroot/bees/asd932_.pnghymenoptera_dataset = datasets.ImageFolder(root='hymenoptera_data/train',                                           transform=data_transform)</code></pre></li><li><p><strong>torch.unsqueeze()</strong>：对<strong>数据维度进行扩充</strong>。给指定位置加上维数为一的维度，比如原本有个三行的数据（3），在0的位置加了一维就变成一行三列（1,3）</p><ul><li><code>a.unsqueeze(N)</code>： 就是在a中指定位置N加上一个维数为1的维度</li><li><code>b=torch.unsqueeze(a，N)</code>: b就是在a中指定位置N加上一个维数为1的维度</li></ul></li><li><p><strong>torch.squeeze()</strong>：对<strong>数据的维度进行压缩</strong>，去掉维数为1的的维度，比如是一行或者一列这种，一个一行三列（1,3）的数去掉第一个维数为一的维度之后就变成（3）行。</p><ul><li><code>squeeze(a)</code>:a中所有为1的维度删掉，不为1的维度没有影响。</li><li><code>a.squeeze(N)</code> :去掉a中指定的维数为一的维度</li><li><code>b=torch.squeeze(a，N)</code> a中去掉指定的定的维数为一的维度。</li></ul></li><li><p><strong>torchvision.datasets</strong>：PyTorch通过torch.utils.data对一般常用的数据加载进行了封装，可以很容易地实现多线程数据预读和批量加载。 并且torchvision已经预先实现了常用图像数据集，包括前面使用过的CIFAR-10，ImageNet、COCO、MNIST、LSUN等数据集，可通过torchvision.datasets方便的调用</p></li></ol><h2><span id="4-wang-luo-da-jian-xiang-guan">4 网络搭建相关</span><a href="#4-wang-luo-da-jian-xiang-guan" class="header-anchor">#</a></h2><ol><li><p><strong>torch.nn</strong>：计算图和autograd是十分强大的工具，可以定义复杂的操作并自动求导；然而对于大规模的网络，autograd太过于底层，nn包中定义一组大致等价于层的模块。一个模块接受输入的tesnor，计算输出的tensor，而且还保存了一些内部状态比如需要学习的tensor的参数等。nn包中也定义了一组损失函数（loss functions），用来训练神经网络。</p></li><li><p><strong>torch.nn.Sequential()</strong>：nn.Sequential是包含其他模块的模块，并按顺序应用这些模块来产生其输出。</p><pre class=" language-lang-python"><code class="language-lang-python">model = torch.nn.Sequential(    torch.nn.Linear(D_in, H),    torch.nn.ReLU(),    torch.nn.Linear(H, D_out))y_pred = model(x) # 前向传播：通过向模型传入x计算预测的y。model.zero_grad() # 反向传播之前清零梯度</code></pre></li><li><p><strong>torch.nn.MSELoss(reduction=’sum’)</strong>：nn包还包含常用的损失函数的定义，这里使用平均平方误差(MSE)，设置<code>reduction='sum'</code>，表示我们计算的是评分误差的‘和’，而不是平均值，<code>reduction=‘elementwise_mean’</code>来使用均方误差作为损失更为常见</p><pre class=" language-lang-python"><code class="language-lang-python">loss_fn = torch.nn.MSELoss(reduction='sum')loss = loss_fn(y_pred, y)loss.backward()</code></pre></li><li><p><strong>torch.nn.Linear()</strong>：线性层 <code>torch.nn.Linear(D_in, H)</code></p></li><li><p><strong>torch.nn.ReLU()</strong>：ReLu 激活函数 </p></li><li><p><strong>model.parameters()</strong>：获取2中定义模型的所有参数</p><pre class=" language-lang-python"><code class="language-lang-python"># 使用梯度下降更新权重。# 每个参数都是张量，更新它的数值with torch.no_grad():        for param in model.parameters():            param -= learning_rate * param.grad</code></pre></li><li><p><strong>torch.optim</strong>：SGD、AdaGrad、RMSProp、Adam等更复杂的优化器来训练神经网络。</p><pre class=" language-lang-python"><code class="language-lang-python">optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)optimizer = torch.optim.SGD(model.parameters(), lr=1e-4, momentum=0.9)optimizer = optim.SGD(net.parameters(), lr=0.01)# 在反向传播之前，使用optimizer将它要更新的所有张量的梯度清零(这些张量是模型可学习的权重)optimizer.zero_grad()loss.backward() # 反向传播，根据模型参数计算loss的损失梯度optimizer.step() # 调用Optimizer的step函数使它所有参数更新</code></pre></li><li><p><strong>torch.nn.Module</strong>：需要指定比现有模块序列更复杂的模型；对于这些情况，可以通过继承nn.Module 并定义 forward 函数</p><pre class=" language-lang-python"><code class="language-lang-python">class TwoLayerNet(torch.nn.Module):    def __init__(self, D_in, H, D_out):        super(TwoLayerNet, self).__init__()        self.linear1 = torch.nn.Linear(D_in, H)        self.linear2 = torch.nn.Linear(H, D_out)    def forward(self, x):        h_relu = self.linear1(x).clamp(min=0)        y_pred = self.linear2(h_relu)        return y_pred# 通过实例化上面定义的类来构建我们的模型。model = TwoLayerNet(D_in, H, D_out)y_pred = model(x) # 前向传播：通过向模型传递x计算预测值y</code></pre><pre class=" language-lang-python"><code class="language-lang-python"># 详见《神经网络》import torchimport torch.nn as nnimport torch.nn.functional as Fclass Net(nn.Module):    def __init__(self):        super(Net, self).__init__()        # 1 input image channel, 6 output channels, 5x5 square convolution        self.conv1 = nn.Conv2d(1, 6, 5) # 输入1个通道，输出6个通道，5×5filter        self.conv2 = nn.Conv2d(6, 16, 5) # 输入6个通道，输出16个通道，5×5filter        # an affine operation: y = Wx + b        self.fc1 = nn.Linear(16 * 5 * 5, 120)        self.fc2 = nn.Linear(120, 84)        self.fc3 = nn.Linear(84, 10)    def forward(self, x):        # Max pooling over a (2, 2) window        x = F.max_pool2d(F.relu(self.conv1(x)), (2,2))        # If the size is a square you can only specify a single number        x = F.max_pool2d(F.relu(self.conv2(x)), 2)        x = x.view(-1, self.num_flat_features(x))        x = F.relu(self.fc1(x))        x = F.relu(self.fc2(x))        x = self.fc3(x)        return x    def num_flat_features(self, x):        size = x.size()[1:] # all dimensions except the batch dimension        num_features = 1        for s in size:            num_features *= s        return num_featuresnet = Net()print(net)</code></pre></li><li><p><strong>net.parameters()</strong>：返回可被学习的参数（权重）列表和值</p><pre class=" language-lang-python"><code class="language-lang-python">net = Net()params = list(net.parameters())print(len(params))print(params[0].size()) # conv1's .weight</code></pre></li><li><p><strong>n.functional</strong> ：除了nn别名以外，我们还引用了nn.functional，这个包中包含了神经网络中使用的一些常用函数，这些函数的特点是，不具有可学习的参数(如ReLU，pool，DropOut等)，这些函数可以放在构造函数中，也可以不放，但是这里建议不放。<code>import torch.nn.functional as F</code></p></li><li></li></ol><h2><span id="5-hua-tu-xiang-guan">5 画图相关</span><a href="#5-hua-tu-xiang-guan" class="header-anchor">#</a></h2><p><strong>头文件</strong>：</p><pre class=" language-lang-python"><code class="language-lang-python">from skimage import io, transform    #用于图像的IO和变换import matplotlib.pyplot as plt</code></pre><ol><li><p><strong>torchvision.utils.make_grid()</strong>：将若干幅图像拼成一幅图像。其中padding的作用就是子图像与子图像之间的pad有多宽。在需要展示一批数据时很有用</p></li><li><p><strong>plt.imshow(image)</strong>：展示一张图，<code>plt.imshow(np.transpose(npimg, (1, 2, 0)))</code>  在plt.imshow的输入的是（imagesize,imagesize,channels），img的格式为（channels,imagesize,imagesize）,这两者的格式不一致，需要转换后显示，原来的1换到0的位置，原来的2换到1的位置，原来的0换到最后。</p></li><li><p><strong>plt.ion()</strong>：interactive mode 在脚本中遇到plt.show()，代码还是会继续执行</p></li><li><p><strong>matplotlib.pyplot.scatter</strong>：散点图</p><pre class=" language-lang-python"><code class="language-lang-python">matplotlib.pyplot.scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None, *, data=None, **kwargs)# x，y：表示的是大小为(n,)的数组，也就是我们即将绘制散点图的数据点# s:是一个实数或者是一个数组大小为(n,)，这个是一个可选的参数。# c:表示的是颜色，也是一个可选项。默认是蓝色'b',表示的是标记的颜色，或者可以是一个表示颜色的字符，或者是一个长度为n的表示颜色的序列等等.# marker:表示的是标记的样式，默认的是'o'。</code></pre></li><li><p><strong>io.imread()</strong></p></li><li><p><strong>os.path.join()</strong>：<code>io.imread(os.path.join('data/faces/', img_name))</code></p></li><li><p><strong>fig = plt.figure()</strong>：一个画布</p></li><li><p><strong>ax = plt.subplot(1, 4, i + 1)</strong>：子图，1行，4列，这个是第i+1个</p></li><li><p><strong>ax.set_title</strong>(‘Sample #{}’.format(i))</p></li><li><p><strong>ax.axis(‘off’)</strong></p></li><li><p><strong>image = image.transpose((2, 0, 1))</strong>：交换颜色轴，因为numpy包的图片是: H <em> W </em> C，torch包的图片是: C <em> H </em> W</p></li><li><p><strong>plt.tight_layout()</strong>： 自动调整子图参数，使之填充整个图像区域</p><pre class=" language-lang-python"><code class="language-lang-python"># 并遍历数据样本。我们将会打印出前四个例子的尺寸并展示标注的特征点。face_dataset = FaceLandmarksDataset(csv_file='data/faces/face_landmarks.csv', root_dir='data/faces/')fig = plt.figure()for i in range(len(face_dataset)):    sample = face_dataset[i]    print(i, sample['image'].shape, sample['landmarks'].shape)    ax = plt.subplot(1, 4, i + 1)    plt.tight_layout()    ax.set_title('Sample #{}'.format(i))    ax.axis('off')    show_landmarks(**sample)    if i == 3:        plt.show()        break</code></pre></li></ol><h2><span id="mo-xing-xiang-guan">模型相关</span><a href="#mo-xing-xiang-guan" class="header-anchor">#</a></h2><ol><li><p><strong>保存加载整个模型</strong>：</p><pre class=" language-lang-python"><code class="language-lang-python"># save modeltorch.save(model,'mymodel.pkl')# load modelmodel=torch.load('mymodel.pkl')</code></pre></li><li><p><strong>仅保存加载模型参数（推荐）</strong>：相比较于保存整个模型而言，仅保存模型参数的做法应该不仅节省空间，更有灵活性的优势。可以取出特定层的参数，这一点在已经训练好的模型上取与现有模型相同层的参数上应该有帮助。</p><pre class=" language-lang-python"><code class="language-lang-python"># save model parameterstorch.save(model.state_dict(), 'mymodel.pkl')# load save model parametersmodel_object.load_state_dict(torch.load('mymodel.pkl'))</code></pre></li><li><p><strong>加载别的模型中相同的网络参数至新的模型</strong>：用已经训练好的网络参数作为自己模型的网络权重的初始化。下面代码实现了从<code>model_from</code>到<code>model to</code>的相同网络参数的拷贝。</p><pre class=" language-lang-python"><code class="language-lang-python">def transfer_weights(model_from, model_to):    wf = copy.deepcopy(model_from.state_dict()) # 对 model from中的模型参数的深度拷贝;    wt = model_to.state_dict() # 对 model to模型参数的获取    # 如果在model to中出现的网络结构，但是在model from中没有出现，那么就拷贝一份给wf。这样做的目的是让wf扩充后的结构跟wt一样，即保留了model from中的模型参数，又将结构扩充到跟 model to的一样    for k in wt.keys() :        if (not k in wf):                  wf[k] = wt[k]    model_to.load_state_dict(wf) # 通过load_state_dict函数加载我们想要的模型参数到目标模型model to中    # 以上的函数要求两个模型中如果具有相同的名字，那么对应的参数大小应该是一样的。</code></pre></li><li><p><a href="https://blog.csdn.net/u014380165/article/details/78525273">https://blog.csdn.net/u014380165/article/details/78525273</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Pytorch-速查手册&quot;&gt;&lt;a href=&quot;#Pytorch-速查手册&quot; class=&quot;headerlink&quot; title=&quot;Pytorch 速查手册&quot;&gt;&lt;/a&gt;Pytorch 速查手册&lt;/h1&gt;&lt;p&gt;希望整理曾经不懂的Pytorch用法，在以后以快速得到结果&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://sunxiaojie99.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>Pytorch 及其应用</title>
    <link href="https://sunxiaojie99.github.io/2020/04/21/pytorch/"/>
    <id>https://sunxiaojie99.github.io/2020/04/21/pytorch/</id>
    <published>2020-04-21T14:03:52.000Z</published>
    <updated>2021-03-12T16:33:19.220Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="pytorch-ji-qi-ying-yong">pytorch及其应用</span><a href="#pytorch-ji-qi-ying-yong" class="header-anchor">#</a></h1><p><strong>优点</strong>：</p><ol><li>支持GPU、灵活；</li><li>支持动态神经网络；</li><li>底层代码易于理解；</li><li>命令式体验；自定义扩展</li></ol><p><strong>缺点</strong>：</p><ol><li><p>对比TensorFlow，全面性不足，不支持快速傅里叶、沿维翻转张量和检查无穷与非数值张量；</p></li><li><p>针对移动端、嵌入式部署以及高性能服务器端的部署其性能表现有待提升；</p></li><li><p>因为框架较新，社区没有那么强大，在文档方面其C库大多数没有文档。</p><span id="more"></span></li></ol><h2><span id="huan-jing-pei-zhi">环境配置</span><a href="#huan-jing-pei-zhi" class="header-anchor">#</a></h2><ol><li>有关conda虚拟环境<pre><code>conda list # 查看安装了哪些包conda env list # 查看当前存在哪些虚拟环境conda update conda # 检查更新当前condapython --version # 查看python版本conda create -n xxx python=3.6 # xxx为自己命名的虚拟环境名称，该文件可在Anaconda安装目录 envs文件下找到conda create -n pytorch python=3.6conda activate yorr_env_name # 激活虚拟环境conda install -n your_env_name [package] # 对虚拟环境安装额外的包deactivate # 关闭虚拟环境conda remove -n your_env_name --allconda remove --name your_env_name package_name # 删除环境中的某个包</code></pre></li><li>虚拟环境下安装 jupyter</li></ol><pre><code>conda activate pytorchconda install nb_conda</code></pre><ol><li>pytorch安装<pre class=" language-lang-python"><code class="language-lang-python">conda activate pytorchconda install pytorch torchvision cpuonly -c pytorch</code></pre></li><li>离线安装（极其有用，血泪教训）<pre class=" language-lang-python"><code class="language-lang-python"># https://download.pytorch.org/whl/torch_stable.html# 下载对应的whl，然后安装pip install D:\software\Anaconda3\whl_download\torch-1.5.0+cpu-cp36-cp36m-win_amd64.whl</code></pre></li></ol><h2><span id="python-xue-xi-zhong-de-liang-da-fa-bao-han-shu">Python学习中的两大法宝函数</span><a href="#python-xue-xi-zhong-de-liang-da-fa-bao-han-shu" class="header-anchor">#</a></h2><ol><li><strong>dir() 道具</strong>：相当于你的手和眼睛，它可以帮你打开东西和看到其中的东西。能让你了解package有哪些东西，也许是更小的模块，或者是函数。dir() 函数，当输出是带有前后双下划线的，这个时候，就表明，这是一个函数，一个工具。你应该使用 help() 函数去查看这个工具的使用方法。</li><li><strong>help() 道具</strong>：相当于说明书，你可以知道每个工具的使用方法。能让你知道函数的使用方法。<pre class=" language-lang-python"><code class="language-lang-python">import torchdir(torch)help(torch.cuda.is_available)</code></pre></li></ol><h2><span id="shu-ju">数据</span><a href="#shu-ju" class="header-anchor">#</a></h2><pre class=" language-lang-python"><code class="language-lang-python">from PIL import Imageimg_path = "" # 注意，win下\\img = Image.open(ima_path)img.show()import osdir_path = "" # /img_path_list = os.listdir(dir_path) # 文件夹下的变成列表root_dir = "dataset/train"label_dir = "ants"path = os.path.join(root_dir,label_dir) # 系统自动加起来，不会出错</code></pre><pre class=" language-lang-python"><code class="language-lang-python">from torch.utils.data import Datasetclass MyData(Dataset):    def __init__(self, root_dir, label_dir):        self.root_dir = root_dir        self.label_dir = label_dir        self.path = os.path.join(self.root_dir,self.label_dir)        self.img_path = os.listdir(self.path) # 所有图片的名称    def __getitem__(self,idx):        img_name = self.img_path[idx] # 图片名        img_item_path = os.path.join(self.root_dir,self.label_dir, img_name) # 图片相对路径地址        img = Image.open(img_item_path) # 读取图片        label = self.label_dir # 这里label就是文件名        return img, label    def __len__(self):        return len(self.img_path) # 数据集的长度root_dir = "dataset/train"ants_label_dir = "ants"bees_label_dir = "bees"ants_dataset = MyData(root_dir, ants_label_dir)bees_dataset = MyData(root_dir, bees_label_dir)img, label = ants_dataset[0] # 就自动调用了__getitem__获取了第一个img.show()train_dataset = ants_dataset + bees_dataset # 合并数据集 数据增强</code></pre><h2><span id="gou-jian-zi-ji-de-wang-luo">构建自己的网络</span><a href="#gou-jian-zi-ji-de-wang-luo" class="header-anchor">#</a></h2><ol><li>处理数据</li><li>定义网络</li><li>定义损失函数</li><li>定义优化方法</li><li>训练</li></ol><p><strong>一个例子</strong>：</p><pre class=" language-lang-python"><code class="language-lang-python">import torchclass TwoLayerNet(torch.nn.Module):    def __init__(self, D_in, H, D_out):        """        在构造函数中，我们实例化了两个nn.Linear模块，并将它们作为成员变量。        """        super(TwoLayerNet, self).__init__()        self.linear1 = torch.nn.Linear(D_in, H)        self.linear2 = torch.nn.Linear(H, D_out)    def forward(self, x):        """        在前向传播的函数中，我们接收一个输入的张量，也必须返回一个输出张量。        我们可以使用构造函数中定义的模块以及张量上的任意的（可微分的）操作。        """        h_relu = self.linear1(x).clamp(min=0)        y_pred = self.linear2(h_relu)        return y_pred# N是批大小； D_in 是输入维度；# H 是隐藏层维度； D_out 是输出维度N, D_in, H, D_out = 64, 1000, 100, 10# 产生输入和输出的随机张量x = torch.randn(N, D_in)y = torch.randn(N, D_out)# 通过实例化上面定义的类来构建我们的模型。model = TwoLayerNet(D_in, H, D_out)# 构造损失函数和优化器。# SGD构造函数中对model.parameters()的调用，# 将包含模型的一部分，即两个nn.Linear模块的可学习参数。loss_fn = torch.nn.MSELoss(reduction='sum')optimizer = torch.optim.SGD(model.parameters(), lr=1e-4)for t in range(500):    # 前向传播：通过向模型传递x计算预测值y    y_pred = model(x)    #计算并输出loss    loss = loss_fn(y_pred, y)    # print(t, loss.item())    # 清零梯度，反向传播，更新权重    optimizer.zero_grad()    loss.backward()    optimizer.step()</code></pre><p>一个可以效仿的测试函数：</p><pre class=" language-lang-python"><code class="language-lang-python">def test(model, device, test_loader):    model.eval()    test_loss = 0    correct = 0    with torch.no_grad():        for i,data in enumerate(test_loader):                      x,y= data            x=x.to(device)            y=y.to(device)            optimizer.zero_grad()            y_hat = model(x)            test_loss += criterion(y_hat, y).item() # sum up batch loss            pred = y_hat.max(1, keepdim=True)[1] # get the index of the max log-probability            correct += pred.eq(y.view_as(pred)).sum().item()    test_loss /= len(test_loader.dataset)    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(        test_loss, correct, len(val_dataset),        100. * correct / len(val_dataset)))</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;pytorch及其应用&quot;&gt;&lt;a href=&quot;#pytorch及其应用&quot; class=&quot;headerlink&quot; title=&quot;pytorch及其应用&quot;&gt;&lt;/a&gt;pytorch及其应用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;支持GPU、灵活；&lt;/li&gt;
&lt;li&gt;支持动态神经网络；&lt;/li&gt;
&lt;li&gt;底层代码易于理解；&lt;/li&gt;
&lt;li&gt;命令式体验；自定义扩展&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对比TensorFlow，全面性不足，不支持快速傅里叶、沿维翻转张量和检查无穷与非数值张量；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;针对移动端、嵌入式部署以及高性能服务器端的部署其性能表现有待提升；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为框架较新，社区没有那么强大，在文档方面其C库大多数没有文档。&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://sunxiaojie99.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>A View of Cloud Computing</title>
    <link href="https://sunxiaojie99.github.io/2020/04/20/cloud-compute/"/>
    <id>https://sunxiaojie99.github.io/2020/04/20/cloud-compute/</id>
    <published>2020-04-20T03:28:52.000Z</published>
    <updated>2021-03-12T16:35:26.462Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="This article is not open to you">    <label for="pass">This article is not open to you</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="paper-cv" scheme="https://sunxiaojie99.github.io/categories/paper-cv/"/>
    
    
  </entry>
  
  <entry>
    <title>build a wonderful world</title>
    <link href="https://sunxiaojie99.github.io/2020/04/18/world/"/>
    <id>https://sunxiaojie99.github.io/2020/04/18/world/</id>
    <published>2020-04-18T06:31:42.000Z</published>
    <updated>2021-03-12T16:36:09.407Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="ke-xue-ji-zhu-dao-di-ke-yi-wei-wo-men-dai-lai-shi-me">科学技术到底可以为我们带来什么</span><a href="#ke-xue-ji-zhu-dao-di-ke-yi-wei-wo-men-dai-lai-shi-me" class="header-anchor">#</a></h1><p>这是本篇文章的主题：社会企业家朱莉·科杜瓦（Julie Cordua）致力于解决一个“难以启齿”的问题：互联网上以图片和视频形式存在的儿童性侵。</p><h3><span id="chi-wo-hen-yuan-ba">离我很远吧</span><a href="#chi-wo-hen-yuan-ba" class="header-anchor">#</a></h3><p>Ted talk video的开始，首先映入眼帘的就是纯白色的背景，大大的字写着，“涉及成人话题”，在高科技术快速发达的今天，我们所有人无一不在享受着互联网技术带来的便利，最近出现的“星星”事件，我大胆猜测，虽然引起了人们的注意，但恐怕大多数人也只是和最开始的我抱着相同的心理，“竟然有这样的人”，“要制裁他”，但每个人心中也都有想，“这应该离我很远吧”。</p><span id="more"></span><h3><span id="nei-rong-ji-huo-bi">内容即货币</span><a href="#nei-rong-ji-huo-bi" class="header-anchor">#</a></h3><p>video中谈到，在刚刚过去的2019年，仅在美国，就仅在美国就有超过4500万涉及儿童性侵的图像和视频内容被举报至国家失踪与受虐儿童中心，比2018年翻了翻。更是难以想象这些数字背后的细节真相： 超过60%的图像拍摄的是不到12岁的孩子， 而且大多包含极端性暴力行为。 虐待者在专门讨论虐待儿童的聊天室里颇受欢迎， 随着更强的侵犯和更多受害者的出现， 他们在那里的排名和地位就更高。 </p><p>有一句话说的很对，它们的世界中，内容就是货币。它们快速掌握日渐更新的新技术，不断的加害于还没有认识清这个世界的孩子。 我们作为一个社会整体的回应却严重滞后。那些施暴者不分国界，甚至不分性别，在全世界各大品台中流动，而我们的执法工作仅在一个司法管辖区进行， 每一个企业只专注于他们自己的平台， 无利益即无关的想法使得他们之间很少沟通。</p><h3><span id="suo-en-de-xing-dong">索恩的行动</span><a href="#suo-en-de-xing-dong" class="header-anchor">#</a></h3><p>在索恩（Thorn）公司，她们的行动分为两步，联系执法机构政府，以更快的帮助孩子被解救；同时联系各大视频网站，通过使用她们的软件检测哪些涉及儿童性侵的图像和视频，报告给执法机构。</p><p>她们使用的技术是获取已经发现的在互联网传播的受害者视频，获得哈希值，利用哈希值唯一性，去检索各大网站的数据库，如果比对发现哈希值相同，移除内容， 并且将其报告给国家失踪与受虐儿童中心， 然后那些哈希再返回到她们的系统， 令每个使用该软件的企业都可以有更多的哈希值以比较。 当数百万的哈希值指向更多内容时， 全世界的企业就能实时识别并移除数百万的内容， 从全球的网络上移除儿童性侵媒体内容的速度将会大大提升。</p><p>例如，她们第一个合作伙伴，Imgur，每天有用户生产 的数百万内容被上传， 在开始使用系统的20分钟内， 有人尝试上传一个已知的儿童性侵内容。 Imgur因此能够及时阻止，移除内容， 并向国家失踪与受虐儿童中心报告。 他们更进一步， 找到并审查了内容发布人的账号， 却发现了其他上百个没看过的儿童性侵媒体内容。</p><h3><span id="together">Together</span><a href="#together" class="header-anchor">#</a></h3><p>很明显，如果需要构建这样的系统，必须拥有足够多的视频哈希值，不断扩充数据库，来更有效的组织视频的传播和散布。这也是这次ted演讲的目的，动员世界范围内数千名警官， 以及数百家企业。 </p><p>第一代受到侵犯的媒体资料被大肆传播的孩子们已经长大成人。加拿大儿童保护中心最近针对这些年轻人做了一个研究， 80%有过自杀的想法， 超过60%曾尝试自杀。 他们的大部分人每天都生活在恐惧中： 当他们走上街头， 或参加一个面试， 或是去学校， 或是在网上碰见的某个人，有超过30%人， 噩梦成为现实， 他们因为网上性侵的内容被认出。</p><p><strong>这条路不简单， 但并不是不可能</strong>。 现在需要展现我们社会的决心， 去着手解决非常难以直面的问题， 在黑暗中创造希望， 让那些孩子的声音能被听见； 去展现企业们的决心，采取一切措施并确保他们的平台不与儿童侵犯者共谋； 去展现政府部门的决心， 投资执法部门破案设施， 来调查数字先行的犯罪， 即便受害者无法为自己申辩。 </p><blockquote><p>作为一名有机会帮助到打击数字先行犯罪的人，希望未来我的研究可以做些什么，可以不仅仅是靠一个个的哈希值的比对，人为的加入数据库。</p></blockquote><h3><span id="in-a-future-every-child-can-simply-be-a-kid">In a future，every child can simply be a kid</span><a href="#in-a-future-every-child-can-simply-be-a-kid" class="header-anchor">#</a></h3><p><img src="/2020/04/18/world/a.png" alt="a"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;科学技术到底可以为我们带来什么&quot;&gt;&lt;a href=&quot;#科学技术到底可以为我们带来什么&quot; class=&quot;headerlink&quot; title=&quot;科学技术到底可以为我们带来什么&quot;&gt;&lt;/a&gt;科学技术到底可以为我们带来什么&lt;/h1&gt;&lt;p&gt;这是本篇文章的主题：社会企业家朱莉·科杜瓦（Julie Cordua）致力于解决一个“难以启齿”的问题：互联网上以图片和视频形式存在的儿童性侵。&lt;/p&gt;
&lt;h3 id=&quot;离我很远吧&quot;&gt;&lt;a href=&quot;#离我很远吧&quot; class=&quot;headerlink&quot; title=&quot;离我很远吧&quot;&gt;&lt;/a&gt;离我很远吧&lt;/h3&gt;&lt;p&gt;Ted talk video的开始，首先映入眼帘的就是纯白色的背景，大大的字写着，“涉及成人话题”，在高科技术快速发达的今天，我们所有人无一不在享受着互联网技术带来的便利，最近出现的“星星”事件，我大胆猜测，虽然引起了人们的注意，但恐怕大多数人也只是和最开始的我抱着相同的心理，“竟然有这样的人”，“要制裁他”，但每个人心中也都有想，“这应该离我很远吧”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://sunxiaojie99.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Attribute-aware Pedestrian Image Editing</title>
    <link href="https://sunxiaojie99.github.io/2020/04/16/apie/"/>
    <id>https://sunxiaojie99.github.io/2020/04/16/apie/</id>
    <published>2020-04-16T03:28:52.000Z</published>
    <updated>2021-03-12T16:35:29.745Z</updated>
    
    <content type="html"><![CDATA[<div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="This article is not open to you">    <label for="pass">This article is not open to you</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
    
      <category term="paper-cv" scheme="https://sunxiaojie99.github.io/categories/paper-cv/"/>
    
    
  </entry>
  
  <entry>
    <title>how to use markdown</title>
    <link href="https://sunxiaojie99.github.io/2020/04/13/markdown/"/>
    <id>https://sunxiaojie99.github.io/2020/04/13/markdown/</id>
    <published>2020-04-13T06:51:10.000Z</published>
    <updated>2021-03-13T07:20:17.488Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="1-biao-ti">1 标题</span><a href="#1-biao-ti" class="header-anchor">#</a></h2><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><span id="more"></span><h2><span id="2-duan-luo">2 段落</span><a href="#2-duan-luo" class="header-anchor">#</a></h2><blockquote><p>段落的换行是使用<strong>两个以上空格加上回车</strong>，也可以在段落后面使用一个空行来表示重新开始一个段落</p></blockquote><p><strong>字体</strong>：</p><pre><code>*斜体文本***粗体文本*****粗斜体文本***</code></pre><p><strong>分割线</strong></p><blockquote><p>在一行中用三个以上的星号建立一个分隔线</p></blockquote><pre><code>***</code></pre><p><strong>删除线</strong></p><p><del>在两端加上两个波浪线</del></p><pre><code>~~Baidu~~</code></pre><p><strong>下划线</strong></p><pre><code>&lt;u&gt;带下划线的文本&lt;/u&gt;</code></pre><p><strong>脚注</strong></p><pre><code>创建脚注格式类似这样 [^RUNOOB]。[^RUNOOB]:菜鸟教程 -- 学的不仅是技术，更是梦想！！！</code></pre><p>我是一个脚注  <sup><a href="#fn_myself" id="reffn_myself">myself</a></sup> 。</p><h2><span id="3-lie-biao">3 列表</span><a href="#3-lie-biao" class="header-anchor">#</a></h2><p><strong>无序列表</strong></p><pre><code>- 第一项- 第二项- 第三项</code></pre><p><strong>有序列表</strong></p><pre><code>1. 第一项2. 第二项3. 第三项</code></pre><p><strong>列表嵌套</strong></p><blockquote><p>只需在子列表中的选项添加四个空格即可</p></blockquote><pre><code>1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素</code></pre><h2><span id="4-qu-kuai">4 区块</span><a href="#4-qu-kuai" class="header-anchor">#</a></h2><blockquote><p>在段落开头使用 &gt; 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p></blockquote><pre><code>区块嵌套&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项列表中使用区块：需要在 &gt; 前添加四个空格的缩进* 第一项    &gt; oneone    &gt; twotwo* 第二项</code></pre><ul><li>第一项<blockquote><p>oneone<br>twotwo</p></blockquote></li></ul><h2><span id="5-dai-ma">5 代码</span><a href="#5-dai-ma" class="header-anchor">#</a></h2><blockquote><p>用 ``` 包裹一段代码，并指定一种语言（也可以不指定）</p></blockquote><h2><span id="6-lian-jie">6 链接</span><a href="#6-lian-jie" class="header-anchor">#</a></h2><pre><code>这是一个链接 [链接名](https://www.baidu.com)直接使用链接地址&lt;https://www.baidu.com&gt;可以通过变量来设置一个链接，变量赋值在文档末尾进行：这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址）[1]: http://www.google.com/[runoob]: http://www.runoob.com/</code></pre><p>这是一个链接 <a href="https://www.baidu.com">链接名</a></p><h2><span id="7-tu-pian">7 图片</span><a href="#7-tu-pian" class="header-anchor">#</a></h2><pre><code>开头一个感叹号 !;接着一个方括号，里面放上图片的替代文字;接着一个普通括号，里面放上图片的网址![alt 属性文本](图片地址)Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 &lt;img&gt; 标签。&lt;img src="xxxx.png" width="50%"&gt;</code></pre><h2><span id="8-biao-ge">8 表格</span><a href="#8-biao-ge" class="header-anchor">#</a></h2><blockquote><p>使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行<br>并且可以设置表格的对齐方式</p></blockquote><pre><code>| 表头 | 表头 || --- | --- || 单元格 | 单元格 || 单元格 | 单元格 |-: 设置内容和标题栏居右对齐。:- 设置内容和标题栏居左对齐。:-: 设置内容和标题栏居中对齐| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><h2><span id="9-html">9 HTML</span><a href="#9-html" class="header-anchor">#</a></h2><blockquote><p>Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写<br>持的 HTML 元素有：<kbd> <b> <i> <em> <sup> <sub> <br>等 ，如：</sub></sup></em></i></b></kbd></p></blockquote><pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑</code></pre><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h2><span id="10-gong-shi">10 公式</span><a href="#10-gong-shi" class="header-anchor">#</a></h2><blockquote><p>使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现</p></blockquote><pre><code>$$\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \\\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \\\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}$$</code></pre><script type="math/tex; mode=display">\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}</script><h2><span id="11-liu-cheng-tu">11 流程图</span><a href="#11-liu-cheng-tu" class="header-anchor">#</a></h2><pre><code>横向流程图 + mermaidgraph LRA[方形] --&gt; B(圆角)B--&gt; C{条件a}C--&gt;|a=1| D[结果1]C--&gt;|a=2| E[结果2]F[横向流程图]</code></pre><pre class=" language-lang-mermaid"><code class="language-lang-mermaid">graph LRA[方形] --> B(圆角)B--> C{条件a}C-->|a=1| D[结果1]C-->|a=2| E[结果2]F[横向流程图]</code></pre><pre><code>竖向流程图graph TDA[方形] --&gt; B(圆角)B --&gt; C{条件a}C --&gt; |a=1| D[结果1]C --&gt; |a=2| E[结果2]F[竖向流程图]</code></pre><pre class=" language-lang-mermaid"><code class="language-lang-mermaid">graph TDA[方形] --> B(圆角)    B --> C{条件a}    C --> |a=1| D[结果1]    C --> |a=2| E[结果2]    F[竖向流程图]</code></pre>]]></content>
    
    <summary type="html">
    
      未完待续，持续更新
    
    </summary>
    
    
      <category term="other" scheme="https://sunxiaojie99.github.io/categories/other/"/>
    
    
  </entry>
  
  <entry>
    <title>The Website</title>
    <link href="https://sunxiaojie99.github.io/2020/04/13/about-me/"/>
    <id>https://sunxiaojie99.github.io/2020/04/13/about-me/</id>
    <published>2020-04-13T04:34:02.000Z</published>
    <updated>2021-03-12T16:35:45.926Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="jie-shao">介绍</span><a href="#jie-shao" class="header-anchor">#</a></h1><p>本网站用途：</p><ol><li>随时记录一些个人的学习总结；</li><li>记录一些关于日常生活的感悟；</li><li>其他一些杂七杂八的东西；</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;jie-shao&quot;&gt;介绍&lt;/span&gt;&lt;a href=&quot;#jie-shao&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本网站用途：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;随时记录一些个人的学习总结；&lt;/li&gt;
&lt;li&gt;记录一些关于日常
      
    
    </summary>
    
    
      <category term="other" scheme="https://sunxiaojie99.github.io/categories/other/"/>
    
    
  </entry>
  
</feed>
