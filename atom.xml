<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clean</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sunxiaojie99.github.io/"/>
  <updated>2020-04-26T11:25:44.112Z</updated>
  <id>https://sunxiaojie99.github.io/</id>
  
  <author>
    <name>Carol Sun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A View of Cloud Computing</title>
    <link href="https://sunxiaojie99.github.io/2020/04/21/pytorch/"/>
    <id>https://sunxiaojie99.github.io/2020/04/21/pytorch/</id>
    <published>2020-04-21T14:03:52.000Z</published>
    <updated>2020-04-26T11:25:44.112Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="pytorch-ji-qi-ying-yong">pytorch及其应用</span><a href="#pytorch-ji-qi-ying-yong" class="header-anchor">#</a></h1><p><strong>优点</strong>：</p><ol><li>支持GPU、灵活；</li><li>支持动态神经网络；</li><li>底层代码易于理解；</li><li>命令式体验；自定义扩展</li></ol><p><strong>缺点</strong>：</p><ol><li>对比TensorFlow，全面性不足，不支持快速傅里叶、沿维翻转张量和检查无穷与非数值张量；</li><li>针对移动端、嵌入式部署以及高性能服务器端的部署其性能表现有待提升；</li><li>因为框架较新，社区没有那么强大，在文档方面其C库大多数没有文档。</li></ol><h2><span id="huan-jing-pei-zhi">环境配置</span><a href="#huan-jing-pei-zhi" class="header-anchor">#</a></h2><ol><li>有关conda虚拟环境<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">conda list # 查看安装了哪些包</span><br><span class="line">conda env list # 查看当前存在哪些虚拟环境</span><br><span class="line">conda update conda # 检查更新当前conda</span><br><span class="line">python --version # 查看python版本</span><br><span class="line">conda create -n xxx python&#x3D;3.6 # xxx为自己命名的虚拟环境名称，该文件可在Anaconda安装目录 envs文件下找到</span><br><span class="line">conda create -n pytorch python&#x3D;3.6</span><br><span class="line">conda activate yorr_env_name # 激活虚拟环境</span><br><span class="line">conda install -n your_env_name [package] # 对虚拟环境安装额外的包</span><br><span class="line">deactivate # 关闭虚拟环境</span><br><span class="line">conda remove -n your_env_name --all</span><br><span class="line">conda remove --name your_env_name package_name # 删除环境中的某个包</span><br></pre></td></tr></table></figure></li><li>虚拟环境下安装 jupyter</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate pytorch</span><br><span class="line">conda install nb_conda</span><br></pre></td></tr></table></figure><ol><li>pytorch安装<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate pytorch</span><br><span class="line">conda install pytorch torchvision cpuonly -c pytorch</span><br></pre></td></tr></table></figure></li><li>离线安装（极其有用，血泪教训）<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://download.pytorch.org/whl/torch_stable.html</span></span><br><span class="line"><span class="comment"># 下载对应的whl，然后安装</span></span><br><span class="line">pip install D:\software\Anaconda3\whl_download\torch<span class="number">-1.5</span><span class="number">.0</span>+cpu-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure></li></ol><h2><span id="python-xue-xi-zhong-de-liang-da-fa-bao-han-shu">Python学习中的两大法宝函数</span><a href="#python-xue-xi-zhong-de-liang-da-fa-bao-han-shu" class="header-anchor">#</a></h2><ol><li><strong>dir() 道具</strong>：相当于你的手和眼睛，它可以帮你打开东西和看到其中的东西。能让你了解package有哪些东西，也许是更小的模块，或者是函数。dir() 函数，当输出是带有前后双下划线的，这个时候，就表明，这是一个函数，一个工具。你应该使用 help() 函数去查看这个工具的使用方法。</li><li><strong>help() 道具</strong>：相当于说明书，你可以知道每个工具的使用方法。能让你知道函数的使用方法。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">dir(torch)</span><br><span class="line">help(torch.cuda.is_available)</span><br></pre></td></tr></table></figure></li></ol><h2><span id="shu-ju">数据</span><a href="#shu-ju" class="header-anchor">#</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">img_path = <span class="string">""</span> <span class="comment"># 注意，win下\\</span></span><br><span class="line">img = Image.open(ima_path)</span><br><span class="line">img.show()</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">dir_path = <span class="string">""</span> <span class="comment"># /</span></span><br><span class="line">img_path_list = os.listdir(dir_path) <span class="comment"># 文件夹下的变成列表</span></span><br><span class="line"></span><br><span class="line">root_dir = <span class="string">"dataset/train"</span></span><br><span class="line">label_dir = <span class="string">"ants"</span></span><br><span class="line">path = os.path.join(root_dir,label_dir) <span class="comment"># 系统自动加起来，不会出错</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span><span class="params">(Dataset)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root_dir, label_dir)</span>:</span></span><br><span class="line">self.root_dir = root_dir</span><br><span class="line">self.label_dir = label_dir</span><br><span class="line">self.path = os.path.join(self.root_dir,self.label_dir)</span><br><span class="line">self.img_path = os.listdir(self.path) <span class="comment"># 所有图片的名称</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,idx)</span>:</span></span><br><span class="line">img_name = self.img_path[idx] <span class="comment"># 图片名</span></span><br><span class="line">img_item_path = os.path.join(self.root_dir,self.label_dir, img_name) <span class="comment"># 图片相对路径地址</span></span><br><span class="line">img = Image.open(img_item_path) <span class="comment"># 读取图片</span></span><br><span class="line">label = self.label_dir <span class="comment"># 这里label就是文件名</span></span><br><span class="line"><span class="keyword">return</span> img, label</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> len(self.img_path) <span class="comment"># 数据集的长度</span></span><br><span class="line"></span><br><span class="line">root_dir = <span class="string">"dataset/train"</span></span><br><span class="line">ants_label_dir = <span class="string">"ants"</span></span><br><span class="line">bees_label_dir = <span class="string">"bees"</span></span><br><span class="line">ants_dataset = MyData(root_dir, ants_label_dir)</span><br><span class="line">bees_dataset = MyData(root_dir, bees_label_dir)</span><br><span class="line"></span><br><span class="line">img, label = ants_dataset[<span class="number">0</span>] <span class="comment"># 就自动调用了__getitem__获取了第一个</span></span><br><span class="line">img.show()</span><br><span class="line"></span><br><span class="line">train_dataset = ants_dataset + bees_dataset <span class="comment"># 合并数据集 数据增强</span></span><br></pre></td></tr></table></figure><h2><span id="gou-jian-zi-ji-de-wang-luo">构建自己的网络</span><a href="#gou-jian-zi-ji-de-wang-luo" class="header-anchor">#</a></h2><ol><li>处理数据</li><li>定义网络</li><li>定义损失函数</li><li>定义优化方法</li><li>训练</li></ol><p><strong>一个例子</strong>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoLayerNet</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, D_in, H, D_out)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        在构造函数中，我们实例化了两个nn.Linear模块，并将它们作为成员变量。</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(TwoLayerNet, self).__init__()</span><br><span class="line">        self.linear1 = torch.nn.Linear(D_in, H)</span><br><span class="line">        self.linear2 = torch.nn.Linear(H, D_out)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        在前向传播的函数中，我们接收一个输入的张量，也必须返回一个输出张量。</span></span><br><span class="line"><span class="string">        我们可以使用构造函数中定义的模块以及张量上的任意的（可微分的）操作。</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        h_relu = self.linear1(x).clamp(min=<span class="number">0</span>)</span><br><span class="line">        y_pred = self.linear2(h_relu)</span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br><span class="line"></span><br><span class="line"><span class="comment"># N是批大小； D_in 是输入维度；</span></span><br><span class="line"><span class="comment"># H 是隐藏层维度； D_out 是输出维度</span></span><br><span class="line">N, D_in, H, D_out = <span class="number">64</span>, <span class="number">1000</span>, <span class="number">100</span>, <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 产生输入和输出的随机张量</span></span><br><span class="line">x = torch.randn(N, D_in)</span><br><span class="line">y = torch.randn(N, D_out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过实例化上面定义的类来构建我们的模型。</span></span><br><span class="line">model = TwoLayerNet(D_in, H, D_out)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造损失函数和优化器。</span></span><br><span class="line"><span class="comment"># SGD构造函数中对model.parameters()的调用，</span></span><br><span class="line"><span class="comment"># 将包含模型的一部分，即两个nn.Linear模块的可学习参数。</span></span><br><span class="line">loss_fn = torch.nn.MSELoss(reduction=<span class="string">'sum'</span>)</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">1e-4</span>)</span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">    <span class="comment"># 前向传播：通过向模型传递x计算预测值y</span></span><br><span class="line">    y_pred = model(x)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#计算并输出loss</span></span><br><span class="line">    loss = loss_fn(y_pred, y)</span><br><span class="line">    <span class="comment"># print(t, loss.item())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清零梯度，反向传播，更新权重</span></span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br></pre></td></tr></table></figure></p><p>一个可以效仿的测试函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(model, device, test_loader)</span>:</span></span><br><span class="line">    model.eval()</span><br><span class="line">    test_loss = <span class="number">0</span></span><br><span class="line">    correct = <span class="number">0</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> i,data <span class="keyword">in</span> enumerate(test_loader):          </span><br><span class="line">            x,y= data</span><br><span class="line">            x=x.to(device)</span><br><span class="line">            y=y.to(device)</span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            y_hat = model(x)</span><br><span class="line">            test_loss += criterion(y_hat, y).item() <span class="comment"># sum up batch loss</span></span><br><span class="line">            pred = y_hat.max(<span class="number">1</span>, keepdim=<span class="literal">True</span>)[<span class="number">1</span>] <span class="comment"># get the index of the max log-probability</span></span><br><span class="line">            correct += pred.eq(y.view_as(pred)).sum().item()</span><br><span class="line">    test_loss /= len(test_loader.dataset)</span><br><span class="line">    print(<span class="string">'\nTest set: Average loss: &#123;:.4f&#125;, Accuracy: &#123;&#125;/&#123;&#125; (&#123;:.0f&#125;%)\n'</span>.format(</span><br><span class="line">        test_loss, correct, len(val_dataset),</span><br><span class="line">        <span class="number">100.</span> * correct / len(val_dataset)))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;pytorch-ji-qi-ying-yong&quot;&gt;pytorch及其应用&lt;/span&gt;&lt;a href=&quot;#pytorch-ji-qi-ying-yong&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;优点&lt;/s
      
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://sunxiaojie99.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>pytorch help</title>
    <link href="https://sunxiaojie99.github.io/2020/04/21/pytorch_help/"/>
    <id>https://sunxiaojie99.github.io/2020/04/21/pytorch_help/</id>
    <published>2020-04-21T14:03:52.000Z</published>
    <updated>2020-04-26T11:19:50.670Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="pytorch-su-cha-shou-ce">Pytorch 速查手册</span><a href="#pytorch-su-cha-shou-ce" class="header-anchor">#</a></h1><p>希望整理曾经不懂的Pytorch用法，在以后以快速得到结果</p><h2><span id="1-guan-yu-tensors">1 关于Tensors</span><a href="#1-guan-yu-tensors" class="header-anchor">#</a></h2><p><strong>自我介绍</strong>：张量的英文是Tensor，它是PyTorch里面基础的运算单位，与Numpy的ndarray相同都表示的是一个多维的矩阵。 与ndarray的最大区别就是，PyTorch的Tensor<strong>可以在 GPU 上运行</strong>，而 numpy 的 ndarray 只能在 CPU 上运行，在GPU上运行大大加快了运算速度。</p><p>在同构的意义下，<strong>第零阶张量</strong> （r = 0） 为<strong>标量</strong> （Scalar），在同构的意义下， （r = 1） 为<strong>向量</strong> （Vector）， <strong>第二阶张量</strong> （r = 2） 则称为<strong>矩阵</strong> （Matrix）<strong>，第三阶以上</strong>的统称为<strong>多维张量</strong>。</p><ol><li><strong>torch.empty()</strong>：构造一个不初始化的张量 <code>x = torch.empty(5,3)</code></li><li><strong>torch.rand()</strong>：返回一个张量，包含了从区间[0, 1)的均匀分布中抽取的一组随机数  <code>x = torch.rand(5,3)</code> 5行3列的的矩阵</li><li><strong>x.shape</strong>：可以使用与numpy相同的shape查看张量大小 <code>print(x.shape)</code> torch.Size([2, 3])</li><li><strong>size()</strong>：使用size()函数，效果与shape相同 <code>x.size()</code>  torch.Size([2, 3])</li><li><strong>torch.zeros()</strong> ：构造全0矩阵 <code>x = torch.zeros(5, 3, dtype=torch.long)</code></li><li><strong>torch.ones()</strong>：返回一个张量，全1 <code>x = torch.ones(2, 2)</code></li><li><strong>torch.eye()</strong>：初始化一个单位矩阵，即对角线为1 其他为0，<code>eye=torch.eye(2,2)</code></li><li><strong>torch.randn()</strong>：返回一个张量，包含了从标准正态分布（均值为0，方差为1，即高斯白噪声）中抽取的一组随机数。<code>torch.randn(2, 3)</code></li><li><strong>torch.linspace(start, end, steps=100, out=None)</strong> → Tensor：返回一个1维张量，包含在区间start和end上均匀间隔的step个点。</li><li><strong>torch.tensor()</strong>：构造一个张量，直接使用数据 <code>x = torch.tensor([5.5, 3])</code></li><li><strong>x.new_ones()</strong>：基于已经存在的tensor创建一个张量 <code>x = x.new_ones(5, 3, dtype=torch.double)</code></li><li><strong>torch.randn_like()</strong>：<code>x = torch.randn_like(x, dtype=torch.float)</code> 会覆盖了以前的类型</li><li><strong>torch.size()</strong>：获取tensor的维度信息, torch.Size 是一个元组，所以它支持左右的元组操作。 <code>x.size()</code></li><li><strong>x + y</strong>：加法</li><li><strong>torch.add(x, y)</strong>：加法</li><li><strong>torch.add(x, y, out=result)</strong>：加法，结果赋给result <code>result = torch.empty(5, 3)</code></li><li><strong>y.add_(x)</strong>：把x加到y上面，直接覆盖y原来的值，<strong>以_为结尾的函数，均会改变调用值</strong>。</li><li><strong>x[:, 1]</strong>：输出第二列，注意索引从0开始</li><li><strong>torch.view</strong>()：改变一个tensor的大小或者性质<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = torch.randn(<span class="number">4</span>,<span class="number">4</span>)  <span class="comment"># torch.Size([4, 4])</span></span><br><span class="line">y = x.view(<span class="number">16</span>) <span class="comment"># 16维的一个list，不是矩阵了 torch.Size([16])</span></span><br><span class="line">z = x.view(<span class="number">-1</span>, <span class="number">8</span>) <span class="comment"># the size -1 is inferred from other dimensions  torch.Size([2, 8]</span></span><br></pre></td></tr></table></figure></li><li><strong>a.transpose(1, 2)</strong>：Swaps 2nd and 3rd dimension</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = torch.randn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment"># torch.Size([1, 2, 3, 4])</span></span><br><span class="line">b = a.transpose(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># torch.Size([1, 3, 2, 4])</span></span><br></pre></td></tr></table></figure><ol><li><strong>x.item()</strong>：对于标量（零阶张量），我们可以直接使用 .item() 从中取出其对应的python对象的数值；特别的：如果张量中只有一个元素的tensor也可以调用<code>tensor.item</code>方法。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 标量</span></span><br><span class="line">scalar =torch.tensor(<span class="number">3.1433223</span>)</span><br><span class="line">print(scalar) <span class="comment"># tensor(3.1433)</span></span><br><span class="line">scalar.size() <span class="comment"># torch.Size([])</span></span><br><span class="line">scalar.item() <span class="comment"># 3.143322229385376</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只有一个元素的tensor，使用.item()来获得这个的value。</span></span><br><span class="line">x = torch.randn(<span class="number">1</span>)</span><br><span class="line">print(x) <span class="comment"># tensor([-1.7860])</span></span><br><span class="line">print(x.item()) <span class="comment"># -1.7859678268432617</span></span><br><span class="line">print(x.size()) <span class="comment"># torch.Size([1])</span></span><br><span class="line"></span><br><span class="line">loss = (y_pred - y).pow(<span class="number">2</span>).sum().item()</span><br></pre></td></tr></table></figure><ol><li><p><strong>x.mm(y)</strong>：张量相乘（numpy中的x.dot(y)）</p></li><li><p><strong>x.t()</strong>：张量转置（numpy 中的x.T）</p></li><li><p><strong>x.clamp(min=0)</strong>：relu函数（numpy 中的np.maximum(h, 0)）</p></li><li><p><strong>x.clone()</strong>：张量复制（numpy 中的x.copy() ）</p></li><li><p><strong>.pow(2)</strong>：每个元素平方 <code>loss = (y_pred - y).pow(2).sum()</code></p></li><li><p><strong>数据类型</strong>：Tensor的基本数据类型有五种</p><ul><li>32位浮点型：torch.FloatTensor。 (默认) <code>tensor.float()</code></li><li>64位整型：torch.LongTensor。 <code>tensor.long()</code></li><li>32位整型：torch.IntTensor。<code>tensor.int()</code></li><li>16位整型：torch.ShortTensor。 <code>tensor.short()</code></li><li>64位浮点型：torch.DoubleTensor。</li><li>除以上数字类型外，还有 byte和chart型 <code>tensor.char()</code> <code>tensor.byte()</code></li></ul></li><li><p><strong>numpy和Tensor转换</strong>：</p><ul><li>```python<br>a = torch.randn((3, 2))<h1><span id="tensor-zhuan-hua-wei-numpy">tensor转化为numpy</span><a href="#tensor-zhuan-hua-wei-numpy" class="header-anchor">#</a></h1>numpy_a = a.numpy()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;python</span><br><span class="line">  # numpy转化为Tensor</span><br><span class="line">  torch_a &#x3D; torch.from_numpy(numpy_a)</span><br><span class="line">  torch_a</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>torch.max()</strong>：eg：dim=1代表沿着行取最大值，<code>max_value, max_idx = torch.max(x, dim=1)</code></p></li><li><p><strong>torch.sum()</strong>：eg：每行 x 求和，<code>sum_x = torch.sum(x, dim=1)</code></p></li></ol><h2><span id="2-qiu-dao-xiang-guan">2 求导相关</span><a href="#2-qiu-dao-xiang-guan" class="header-anchor">#</a></h2><ol><li><p><strong>requires_grad=False</strong>：在张量创建时，通过设置 requires_grad 标识为Ture来告诉Pytorch需要对该张量进行自动求导，PyTorch会记录该张量的每一步操作历史并自动计算。<strong>默认为False</strong>，如果我们想计算某些的tensor的梯度，我们只需要在建立这个tensor时加入这么一句：requires_grad=True。<code>x = torch.rand(5, 5, requires_grad=True)</code></p></li><li><p><strong>x.grad</strong>：如果这个tensor x的requires_grad=True，那么反向传播之后x关于某个标量值的梯度会累积在张量 x.grad上。PyTorch会自动追踪和记录对与张量的所有操作，当计算完成后调用.backward()方法自动计算梯度并且将计算结果保存到grad属性中。</p></li><li><p><strong>.grad_fn</strong>：在张量进行操作后，grad_fn会被赋予一个新的函数，这个函数引用了一个创建了这个Tensor类的Function对象。 Tensor和Function互相连接生成了一个非循环图，它记录并且编码了完整的计算历史。每个张量都有一个.grad_fn属性，如果这个张量是用户手动创建的那么这个张量的grad_fn是None。</p></li><li><p><strong>with torch.no_grad():</strong>：在训练神经网络时，我们通常不希望通过权重更新步骤进行反向传播，使用<code>with torch.no_grad():</code>上下文管理器来防止构造计算图。使用上下文管理器临时禁止对已设置requires_grad=True的张量进行自动求导。这个方法<strong>在测试集计算准确率</strong>的时候会经常用到。使用.no_grad()进行嵌套后，代码不会跟踪历史记录，也就是说保存的这部分记录会减少内存的使用量并且会加快少许的运算速度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        w1 -= learning_rate * w1.grad</span><br><span class="line">        w2 -= learning_rate * w2.grad</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 反向传播后手动将梯度设置为零</span></span><br><span class="line">        w1.grad.zero_()</span><br><span class="line">        w2.grad.zero_()</span><br></pre></td></tr></table></figure></li><li><p><strong>with torch.set_grad_enabled(False)</strong>：一个全局的环境，接下来所有的tensor运算产生的新的节点都是不可求导的；设置为True就是可以求导的了</p></li><li><p><strong>loss.backward()</strong>：.backward() 自动计算所有的requires_grad=True 张量的梯度，张量的梯度将累积到其<code>.grad</code>属性中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">z=torch.sum(x+y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果Tensor类表示的是一个标量（即它包含一个元素的张量），则不需要为backward()指定任何参数，但是如果它有更多的元素，则需要指定一个gradient参数，它是形状匹配的张量。 以上的 z.backward()相当于是z.backward(torch.tensor(1.))的简写。 这种参数常出现在图像分类中的单标签分类，输出一个标量代表图像的标签。</span></span><br><span class="line"></span><br><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">z= x**<span class="number">2</span>+y**<span class="number">3</span></span><br><span class="line"><span class="comment">#我们的返回值不是一个标量，所以需要输入一个大小相同的张量作为参数，这里我们用ones_like函数根据x生成一个张量</span></span><br><span class="line">z.backward(torch.ones_like(x))</span><br><span class="line">print(x.grad)</span><br></pre></td></tr></table></figure></li><li><p><strong>↑Autograd 过程解析</strong>：Python的 <code>dir()</code> 返回参数的属性、方法列表。<code>z</code>是一个Tensor变量，看看里面有哪些成员变量。我们直接排除掉一些Python中特殊方法（以_开头和结束的）和私有方法（以<em>开头的，直接看几个比较主要的属性： <code>.is_leaf</code>：记录是否是叶子节点。通过这个属性来确定这个变量的类型，在官方文档中所说的“graph leaves”，“leaf variables”，都是指像<code>x</code>，<code>y</code>这样的手动创建的、而非运算得到的变量，这些变量成为<strong>创建变量</strong>。 像<code>z</code>这样的，是通过计算后得到的结果称为<em>*结果变量</em></em>。</p></li><li><p><strong>.is_leaf</strong>：一个变量是创建变量还是结果变量是通过<code>.is_leaf</code>来获取的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">5</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">z= x**<span class="number">2</span>+y**<span class="number">3</span></span><br><span class="line">print(<span class="string">"x.is_leaf="</span>+str(x.is_leaf)) <span class="comment"># x.is_leaf=True</span></span><br><span class="line">print(<span class="string">"z.is_leaf="</span>+str(z.is_leaf)) <span class="comment"># z.is_leaf=False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x是手动创建的没有通过计算，所以他被认为是一个叶子节点也就是一个创建变量，而z是通过x与y的一系列计算得到的，所以不是叶子结点也就是结果变量。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>为什么我们执行<code>z.backward()</code>方法会更新<code>x.grad</code>和<code>y.grad</code>呢？</strong></p><ul><li><p><code>.grad_fn</code>属性记录的就是这部分的操作，记录并且编码了完整的计算历史。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">z.grad_fn  <span class="comment"># &lt;AddBackward0 at 0x120840a90&gt;</span></span><br><span class="line"><span class="comment"># grad_fn是一个AddBackward0类型的变量</span></span><br></pre></td></tr></table></figure></li><li><p>我们 dir(z.grad_fn)，看看里面有什么东西？<code>next_functions</code> 就是<code>grad_fn</code>的精华！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dir(z.grad_fn) <span class="comment"># 'next_functions',</span></span><br><span class="line">z.grad_fn.next_functions </span><br><span class="line"><span class="comment"># ((&lt;PowBackward0 at 0x1208409b0&gt;, 0), (&lt;PowBackward0 at 0x1208408d0&gt;, 0))</span></span><br><span class="line"><span class="comment"># next_functions是一个tuple of tuple of PowBackward0 and int。</span></span><br><span class="line"><span class="comment"># 为什么是2个tuple ？ 因为我们的操作是z= x**2+y**3 刚才的AddBackward0是相加，而前面的操作是乘方 PowBackward0。tuple第一个元素就是x相关的操作记录</span></span><br></pre></td></tr></table></figure></li><li><p>继续挖掘：在PyTorch的反向图计算中，<code>AccumulateGrad</code>类型代表的就是叶子节点类型，也就是计算图终止节点。<code>AccumulateGrad</code>类中有一个<code>.variable</code>属性指向叶子节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">xg = z.grad_fn.next_functions[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">dir(xg) <span class="comment"># next_functions</span></span><br><span class="line">x_leaf=xg.next_functions[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">type(x_leaf) <span class="comment"># AccumulateGrad</span></span><br><span class="line"></span><br><span class="line">x_leaf.variable <span class="comment"># 这个.variable的属性就是我们的生成的变量x</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"x_leaf.variable的id:"</span>+str(id(x_leaf.variable)))</span><br><span class="line">print(<span class="string">"x的id:"</span>+str(id(x)))</span><br><span class="line"><span class="comment"># x_leaf.variable的id:4840553424</span></span><br><span class="line"><span class="comment"># x的id:4840553424</span></span><br></pre></td></tr></table></figure></li><li><p>这样整个规程就很清晰了：</p><ul><li>当我们执行z.backward()的时候。这个操作将调用z里面的grad_fn这个属性，执行求导的操作。</li><li>这个操作将遍历grad_fn的next_functions，然后分别取出里面的Function（AccumulateGrad），执行求导操作。这部分是一个递归的过程直到最后类型为叶子节点。</li><li>计算出结果以后，将结果保存到他们对应的variable 这个变量所引用的对象（x和y）的 grad这个属性里面。</li><li>求导结束。所有的叶节点的grad变量都得到了相应的更新</li></ul></li></ul></li><li><p><strong>.detach()</strong>：停止tensor历史记录的跟踪，该tensor与计算历史记录分离，并防止将来的计算被跟踪。</p></li><li><p><strong>.grad.zero_()</strong>：将梯度设置为零 <code>w1.grad.zero_()</code></p></li><li><p><strong>.zero_grad()</strong>：手动将梯度缓冲区设置为零 <code>optimizer.zero_grad()</code></p></li><li><p><strong>torch.device()</strong>：应该是方便GPU上运行的 <code>device = torch.device(&#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39;)</code></p></li><li><p><strong>torch.autograd.Function</strong>：<strong>如果需要自定义autograd扩展新的功能</strong>，就需要扩展Function类。因为Function使用autograd来计算结果和梯度，并对操作历史进行编码。定义<code>torch.autograd.Function</code>的子类并三个方法，来<strong>定义自己的自动求导运算</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># __init__ (optional)：如果这个操作需要额外的参数则需要定义这个Function的构造函数，不需要的话可以忽略。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># forward()：执行前向传播的计算代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># backward()：反向传播时梯度计算的代码。 参数的个数和forward返回值的个数一样，每个参数代表传回到此操作的梯度。</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用 MyReLU.apply 函数来使用自定义的ReLU</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyReLU</span><span class="params">(torch.autograd.Function)</span>:</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># (输入参数是张量)</span></span><br><span class="line">    <span class="comment"># 方法必须是静态方法，所以要加上@staticmethod </span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(ctx, x)</span>:</span></span><br><span class="line">         <span class="comment"># ctx 用来保存信息这里类似self，并且ctx的属性可以在backward中调用</span></span><br><span class="line">        ctx.save_for_backward(x)</span><br><span class="line">        <span class="keyword">return</span> x.clamp(min=<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(ctx, grad_output)</span>:</span></span><br><span class="line">        x, = ctx.saved_tensors</span><br><span class="line">        grad_x = grad_output.clone()</span><br><span class="line">        grad_x[x &lt; <span class="number">0</span>] =<span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> grad_x</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 详见 大刀阔斧，步步推进 </span></span><br><span class="line"><span class="comment"># 调用 MyReLU.apply 函数来使用自定义的ReLU</span></span><br><span class="line">y_pred = MyReLU.apply(x.mm(w1)).mm(w2)</span><br></pre></td></tr></table></figure></li><li><h2><span id="3-shu-ju-jia-zai-chu-li-xiang-guan">3 数据加载处理相关</span><a href="#3-shu-ju-jia-zai-chu-li-xiang-guan" class="header-anchor">#</a></h2></li></ol><p><strong>相关头文件</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function, division</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd              <span class="comment">#用于更容易地进行csv解析</span></span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io, transform    <span class="comment">#用于图像的IO和变换</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line">warnings.filterwarnings(<span class="string">"ignore"</span>)</span><br><span class="line"> </span><br><span class="line">plt.ion()   <span class="comment"># interactive mode 在脚本中遇到plt.show()，代码还是会继续执行</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>pd.read_csv()</strong>：读取csv数据 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">landmarks_frame = pd.read_csv(<span class="string">'data/faces/face_landmarks.csv'</span>)</span><br><span class="line">n = <span class="number">65</span></span><br><span class="line">img_name = landmarks_frame.iloc[n, <span class="number">0</span>] <span class="comment"># 获取第65行第0列数据</span></span><br><span class="line"></span><br><span class="line">landmarks = landmarks_frame.iloc[n, <span class="number">1</span>:].as_matrix() <span class="comment"># 将第1列以后的转化为矩阵</span></span><br><span class="line">landmarks = landmarks.astype(<span class="string">'float'</span>).reshape(<span class="number">-1</span>, <span class="number">2</span>)  <span class="comment"># 将原本一行的数据转化为两行列，一列为x坐标，y坐标</span></span><br></pre></td></tr></table></figure></li><li><p><strong>.iloc[n, 1:]</strong>：数据切片，获取第n行，第1列以后的数据</p></li><li><p><strong>.as_matrix()</strong>：转化为矩阵</p></li><li><p><strong>.astype(‘float’)</strong>：转换格式</p></li><li><p><strong>.reshape(-1, 2)</strong>：重塑大小</p></li><li><p><strong>torch.utils.data.Dataset</strong>：表示数据集的抽象类，因此自定义的数据集应继承Dataset 并重载以下方法</p><ul><li><p><code>__len__</code> ：实现 <code>len(dataset)</code> 返回数据集的尺寸</p><ul><li><code>__getitem__</code>：用索引(<code>0</code> 到 <code>len(self)</code>)获取一条数据或一个样本</li><li><code>__init__</code>：读取csv的文件内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FaceLandmarksDataset</span><span class="params">(Dataset)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, csv_file, root_dir, transform=None)</span>:</span></span><br><span class="line">        self.landmarks_frame = pd.read_csv(csv_file)</span><br><span class="line">        self.root_dir = root_dir</span><br><span class="line">        self.transform = transform</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.landmarks_frame) <span class="comment"># 有多少样本（行）</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">        img_name = os.path.join(self.root_dir, self.landmarks_frame.iloc[index, <span class="number">0</span>])</span><br><span class="line">        image = io.imread(img_name)</span><br><span class="line">        landmarks = self.landmarks_frame.iloc[index, <span class="number">1</span>:]</span><br><span class="line">        landmarks = np.array([landmarks])</span><br><span class="line">        landmarks = landmarks.astype(<span class="string">'float'</span>).reshape(<span class="number">-1</span>, <span class="number">2</span>)</span><br><span class="line">        sample = &#123;<span class="string">'image'</span>: image, <span class="string">'landmarks'</span>: landmarks&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> self.transform:</span><br><span class="line">            sample = self.transform(sample)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> sample</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>torchvision.transforms.Compose</strong>：组合一个变换</p></li></ol><ul><li>Resize：把给定的图片resize到given size</li><li>transforms.ToTensor(), convert a PIL image to tensor <code>(H*W*C)</code> in range [0,255] to a torch.Tensor<code>(C*H*W)</code> in the range [0.0,1.0]  把[0,255]转换到[0.0, 1.0]</li><li>transforms.Normalize ：Normalized an tensor image with mean and standard deviation; </li><li>ToPILImage: convert a tensor to PIL image</li><li>Scale：目前已经不用了，推荐用Resize</li><li>CenterCrop：在图片的中间区域进行裁剪</li><li>RandomCrop：在一个随机的位置进行裁剪</li><li>RandomHorizontalFlip：以0.5的概率水平翻转给定的PIL图像</li><li>RandomVerticalFlip：以0.5的概率竖直翻转给定的PIL图像</li><li>RandomResizedCrop：将PIL图像裁剪成任意大小和纵横比</li><li>Grayscale：将图像转换为灰度图像</li><li>RandomGrayscale：将图像以一定的概率转换为灰度图像</li><li><p>ColorJitter：随机改变图像的亮度对比度和饱和度。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms, datasets</span><br><span class="line"></span><br><span class="line">data_transform = transforms.Compose([</span><br><span class="line">        transforms.RandomSizedCrop(<span class="number">224</span>),</span><br><span class="line">        transforms.RandomHorizontalFlip(),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                             std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">    ])</span><br><span class="line">hymenoptera_dataset = datasets.ImageFolder(root=<span class="string">'hymenoptera_data/train'</span>, transform=data_transform)</span><br><span class="line">dataset_loader = torch.utils.data.DataLoader(hymenoptera_dataset,batch_size=<span class="number">4</span>, shuffle=<span class="literal">True</span>,num_workers=<span class="number">4</span>)</span><br></pre></td></tr></table></figure></li></ul><ol><li><p><strong>np.random.randint(0,n)</strong>：获取一个随机整数</p></li><li><p><strong>torch.utils.data.DataLoader</strong>：对所有数据集简单的使用for循环牺牲了许多功能，尤其是：批量处理数据、打乱数据。torch.utils.data.DataLoader是一个提供上述所有这些功能的迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代码一般是这么写的：</span></span><br><span class="line"><span class="comment"># 1. 定义学习集 DataLoader</span></span><br><span class="line">train_data = torch.utils.data.DataLoader(hymenoptera_dataset,batch_size=<span class="number">4</span>, shuffle=<span class="literal">True</span>,num_workers=<span class="number">4</span>,各种设置...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.将数据喂入神经网络进行训练</span></span><br><span class="line"><span class="keyword">for</span> i, (input, target) <span class="keyword">in</span> enumerate(train_data): </span><br><span class="line">    循环代码行......</span><br><span class="line"></span><br><span class="line"><span class="comment"># DataLoader中的几个重要参数</span></span><br><span class="line"><span class="comment"># dataset：（数据类型 dataset）输入的数据类型</span></span><br><span class="line"><span class="comment"># batch_size：（数据类型 int）每次输入数据的行数，默认为1,每次喂给神经网络多少行数据</span></span><br><span class="line"><span class="comment"># shuffle：（数据类型 bool）洗牌。默认设置为False。在每次迭代训练时是否将数据洗牌，默认设置是False。将输入数据的顺序打乱，是为了使数据更有独立性，但如果数据是有序列特征的，就不要设置成True了。</span></span><br><span class="line"><span class="comment"># num_workers：（数据类型 Int）工作者数量，默认是0。使用多少个子进程来导入数据。设置为0，就是使用主进程来导入数据。注意：这个数字必须是大于等于0的，负数估计会出错。</span></span><br><span class="line"><span class="comment"># drop_last：（数据类型 bool）丢弃最后数据，默认为False。设置了 batch_size 的数目后，最后一批数据未必是设置的数目，有可能会小些。这时你是否需要丢弃这批数据。</span></span><br><span class="line"><span class="comment"># timeout：（数据类型 numeric）超时，默认为0。是用来设置数据读取的超时时间的，但超过这个时间还没读取到数据的话就会报错。 所以，数值必须大于等于0。</span></span><br></pre></td></tr></table></figure><ul><li><p>DataLoader返回的是一个可迭代对象，我们可以使用迭代器分次获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dl = torch.utils.data.DataLoader(ds_demo, batch_size=<span class="number">10</span>, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>)</span><br><span class="line">idata=iter(dl)</span><br><span class="line">print(next(idata))</span><br></pre></td></tr></table></figure></li><li><p>常见的用法是使用for循环对其进行遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, data <span class="keyword">in</span> enumerate(dl):</span><br><span class="line">    print(i,data)</span><br><span class="line">    <span class="comment"># 为了节约空间，这里只循环一遍</span></span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li><p>我们已经可以<strong>通过dataset定义数据集</strong>，并<strong>使用Datalorder载入和遍历数据集</strong>，除了这些以外，PyTorch还提供能<strong>torcvision的计算机视觉扩展包</strong>，torchvision 是PyTorch中专门用来<strong>处理图像的库</strong>，里面封装了torchvision.datasets、torchvision.models、torchvision.transforms：</p><ul><li><p><strong>torchvision.datasets</strong>：torchvision.datasets 可以理解为PyTorch团队自定义的dataset，这些dataset帮我们提前处理好了很多的图片数据集，我们拿来就可以直接使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">MNIST</span><br><span class="line">COCO</span><br><span class="line">Captions</span><br><span class="line">Detection</span><br><span class="line">LSUN</span><br><span class="line">ImageFolder</span><br><span class="line">Imagenet<span class="number">-12</span></span><br><span class="line">CIFAR</span><br><span class="line">STL10</span><br><span class="line">SVHN</span><br><span class="line">PhotoTour </span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例如下：</span></span><br><span class="line"><span class="keyword">import</span> torchvision.datasets <span class="keyword">as</span> datasets</span><br><span class="line">trainset = datasets.MNIST(root=<span class="string">'./data'</span>, <span class="comment"># 表示 MNIST 数据的加载的目录</span></span><br><span class="line">                                      train=<span class="literal">True</span>,  <span class="comment"># 表示是否加载数据库的训练集，false的时候加载测试集</span></span><br><span class="line">                                      download=<span class="literal">True</span>, <span class="comment"># 表示是否自动下载 MNIST 数据集</span></span><br><span class="line">                                      transform=<span class="literal">None</span>) <span class="comment"># 表示是否需要对数据进行预处理，none为不进行预处理</span></span><br></pre></td></tr></table></figure></li><li><p><strong>torchvision.models</strong>：torchvision不仅提供了常用图片数据集，还提供了训练好的模型，可以加载之后，直接使用，或者在进行迁移学习。 torchvision.models模块的子模块中包含以下模型结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AlexNet</span><br><span class="line">VGG</span><br><span class="line">ResNet</span><br><span class="line">SqueezeNet</span><br><span class="line">DenseNet</span><br><span class="line"></span><br><span class="line"><span class="comment">#我们直接可以使用训练好的模型，当然这个与datasets相同，都是需要从服务器下载的</span></span><br><span class="line"><span class="keyword">import</span> torchvision.models <span class="keyword">as</span> models</span><br><span class="line">resnet18 = models.resnet18(pretrained=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>torchvision.transforms</strong>：transforms 模块提供了一般的图像转换操作类，用作数据处理和数据增强</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms <span class="keyword">as</span> transforms</span><br><span class="line">transform = transforms.Compose([</span><br><span class="line">    transforms.RandomCrop(<span class="number">32</span>, padding=<span class="number">4</span>),  <span class="comment">#先四周填充0，在把图像随机裁剪成32*32</span></span><br><span class="line">    transforms.RandomHorizontalFlip(),  <span class="comment">#图像一半的概率翻转，一半的概率不翻转</span></span><br><span class="line">    transforms.RandomRotation((<span class="number">-45</span>,<span class="number">45</span>)), <span class="comment">#随机旋转</span></span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize((<span class="number">0.4914</span>, <span class="number">0.4822</span>, <span class="number">0.4465</span>), (<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>)), <span class="comment">#R,G,B每层的归一化用到的均值和方差</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>肯定有人会问：(0.485, 0.456, 0.406), (0.2023, 0.1994, 0.2010) 这几个数字是什么意思？这些都是根据ImageNet训练的归一化参数，可以直接使用，我们认为这个是固定值就可以</p></li></ul></li></ul></li><li><p><strong>torchvision.datasets.ImageFolder</strong>：torchvision包提供了常用的数据集类(datasets)和转换(transforms)，你可能不需要自己构造这些类。很常用的数据集类<strong>ImageFolder</strong>。 它假定了数据集是以如下方式构造的，其中’ants’,bees’等是分类标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root/ants/xxx.png</span><br><span class="line">root/ants/xxy.jpeg</span><br><span class="line">root/ants/xxz.png</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">root/bees/<span class="number">123.j</span>pg</span><br><span class="line">root/bees/nsdf3.png</span><br><span class="line">root/bees/asd932_.png</span><br><span class="line"></span><br><span class="line">hymenoptera_dataset = datasets.ImageFolder(root=<span class="string">'hymenoptera_data/train'</span>,</span><br><span class="line">                                           transform=data_transform)</span><br></pre></td></tr></table></figure></li><li><p><strong>torch.unsqueeze()</strong>：对<strong>数据维度进行扩充</strong>。给指定位置加上维数为一的维度，比如原本有个三行的数据（3），在0的位置加了一维就变成一行三列（1,3）</p><ul><li><code>a.unsqueeze(N)</code>： 就是在a中指定位置N加上一个维数为1的维度</li><li><code>b=torch.unsqueeze(a，N)</code>: b就是在a中指定位置N加上一个维数为1的维度</li></ul></li><li><p><strong>torch.squeeze()</strong>：对<strong>数据的维度进行压缩</strong>，去掉维数为1的的维度，比如是一行或者一列这种，一个一行三列（1,3）的数去掉第一个维数为一的维度之后就变成（3）行。</p><ul><li><code>squeeze(a)</code>:a中所有为1的维度删掉，不为1的维度没有影响。</li><li><code>a.squeeze(N)</code> :去掉a中指定的维数为一的维度</li><li><code>b=torch.squeeze(a，N)</code> a中去掉指定的定的维数为一的维度。</li></ul></li><li><p><strong>torchvision.datasets</strong>：PyTorch通过torch.utils.data对一般常用的数据加载进行了封装，可以很容易地实现多线程数据预读和批量加载。 并且torchvision已经预先实现了常用图像数据集，包括前面使用过的CIFAR-10，ImageNet、COCO、MNIST、LSUN等数据集，可通过torchvision.datasets方便的调用</p></li></ol><h2><span id="4-wang-luo-da-jian-xiang-guan">4 网络搭建相关</span><a href="#4-wang-luo-da-jian-xiang-guan" class="header-anchor">#</a></h2><ol><li><p><strong>torch.nn</strong>：计算图和autograd是十分强大的工具，可以定义复杂的操作并自动求导；然而对于大规模的网络，autograd太过于底层，nn包中定义一组大致等价于层的模块。一个模块接受输入的tesnor，计算输出的tensor，而且还保存了一些内部状态比如需要学习的tensor的参数等。nn包中也定义了一组损失函数（loss functions），用来训练神经网络。</p></li><li><p><strong>torch.nn.Sequential()</strong>：nn.Sequential是包含其他模块的模块，并按顺序应用这些模块来产生其输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">model = torch.nn.Sequential(</span><br><span class="line">    torch.nn.Linear(D_in, H),</span><br><span class="line">    torch.nn.ReLU(),</span><br><span class="line">    torch.nn.Linear(H, D_out)</span><br><span class="line">)</span><br><span class="line">y_pred = model(x) <span class="comment"># 前向传播：通过向模型传入x计算预测的y。</span></span><br><span class="line">model.zero_grad() <span class="comment"># 反向传播之前清零梯度</span></span><br></pre></td></tr></table></figure></li><li><p><strong>torch.nn.MSELoss(reduction=’sum’)</strong>：nn包还包含常用的损失函数的定义，这里使用平均平方误差(MSE)，设置<code>reduction=&#39;sum&#39;</code>，表示我们计算的是评分误差的‘和’，而不是平均值，<code>reduction=‘elementwise_mean’</code>来使用均方误差作为损失更为常见</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loss_fn = torch.nn.MSELoss(reduction=<span class="string">'sum'</span>)</span><br><span class="line">loss = loss_fn(y_pred, y)</span><br><span class="line">loss.backward()</span><br></pre></td></tr></table></figure></li><li><p><strong>torch.nn.Linear()</strong>：线性层 <code>torch.nn.Linear(D_in, H)</code></p></li><li><p><strong>torch.nn.ReLU()</strong>：ReLu 激活函数 </p></li><li><p><strong>model.parameters()</strong>：获取2中定义模型的所有参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用梯度下降更新权重。</span></span><br><span class="line"><span class="comment"># 每个参数都是张量，更新它的数值</span></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():</span><br><span class="line">            param -= learning_rate * param.grad</span><br></pre></td></tr></table></figure></li><li><p><strong>torch.optim</strong>：SGD、AdaGrad、RMSProp、Adam等更复杂的优化器来训练神经网络。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">1e-4</span>, momentum=<span class="number">0.9</span>)</span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在反向传播之前，使用optimizer将它要更新的所有张量的梯度清零(这些张量是模型可学习的权重)</span></span><br><span class="line">optimizer.zero_grad()</span><br><span class="line">loss.backward() <span class="comment"># 反向传播，根据模型参数计算loss的损失梯度</span></span><br><span class="line">optimizer.step() <span class="comment"># 调用Optimizer的step函数使它所有参数更新</span></span><br></pre></td></tr></table></figure></li><li><p><strong>torch.nn.Module</strong>：需要指定比现有模块序列更复杂的模型；对于这些情况，可以通过继承nn.Module 并定义 forward 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoLayerNet</span><span class="params">(torch.nn.Module)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, D_in, H, D_out)</span>:</span></span><br><span class="line">        super(TwoLayerNet, self).__init__()</span><br><span class="line">        self.linear1 = torch.nn.Linear(D_in, H)</span><br><span class="line">        self.linear2 = torch.nn.Linear(H, D_out)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        h_relu = self.linear1(x).clamp(min=<span class="number">0</span>)</span><br><span class="line">        y_pred = self.linear2(h_relu)</span><br><span class="line">        <span class="keyword">return</span> y_pred</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 通过实例化上面定义的类来构建我们的模型。</span></span><br><span class="line">model = TwoLayerNet(D_in, H, D_out)</span><br><span class="line">y_pred = model(x) <span class="comment"># 前向传播：通过向模型传递x计算预测值y</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 详见《神经网络》</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        <span class="comment"># 1 input image channel, 6 output channels, 5x5 square convolution</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">1</span>, <span class="number">6</span>, <span class="number">5</span>) <span class="comment"># 输入1个通道，输出6个通道，5×5filter</span></span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>) <span class="comment"># 输入6个通道，输出16个通道，5×5filter</span></span><br><span class="line">        <span class="comment"># an affine operation: y = Wx + b</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)</span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># Max pooling over a (2, 2) window</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>,<span class="number">2</span>))</span><br><span class="line">        <span class="comment"># If the size is a square you can only specify a single number</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>)</span><br><span class="line">        x = x.view(<span class="number">-1</span>, self.num_flat_features(x))</span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">num_flat_features</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        size = x.size()[<span class="number">1</span>:] <span class="comment"># all dimensions except the batch dimension</span></span><br><span class="line">        num_features = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> size:</span><br><span class="line">            num_features *= s</span><br><span class="line">        <span class="keyword">return</span> num_features</span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line">print(net)</span><br></pre></td></tr></table></figure></li><li><p><strong>net.parameters()</strong>：返回可被学习的参数（权重）列表和值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">net = Net()</span><br><span class="line">params = list(net.parameters())</span><br><span class="line">print(len(params))</span><br><span class="line">print(params[<span class="number">0</span>].size()) <span class="comment"># conv1's .weight</span></span><br></pre></td></tr></table></figure></li><li><p><strong>n.functional</strong> ：除了nn别名以外，我们还引用了nn.functional，这个包中包含了神经网络中使用的一些常用函数，这些函数的特点是，不具有可学习的参数(如ReLU，pool，DropOut等)，这些函数可以放在构造函数中，也可以不放，但是这里建议不放。<code>import torch.nn.functional as F</code></p></li><li></li></ol><h2><span id="5-hua-tu-xiang-guan">5 画图相关</span><a href="#5-hua-tu-xiang-guan" class="header-anchor">#</a></h2><p><strong>头文件</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io, transform    <span class="comment">#用于图像的IO和变换</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><ol><li><p><strong>torchvision.utils.make_grid()</strong>：将若干幅图像拼成一幅图像。其中padding的作用就是子图像与子图像之间的pad有多宽。在需要展示一批数据时很有用</p></li><li><p><strong>plt.imshow(image)</strong>：展示一张图，<code>plt.imshow(np.transpose(npimg, (1, 2, 0)))</code>  在plt.imshow的输入的是（imagesize,imagesize,channels），img的格式为（channels,imagesize,imagesize）,这两者的格式不一致，需要转换后显示，原来的1换到0的位置，原来的2换到1的位置，原来的0换到最后。</p></li><li><p><strong>plt.ion()</strong>：interactive mode 在脚本中遇到plt.show()，代码还是会继续执行</p></li><li><p><strong>matplotlib.pyplot.scatter</strong>：散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">matplotlib.pyplot.scatter(x, y, s=<span class="literal">None</span>, c=<span class="literal">None</span>, marker=<span class="literal">None</span>, cmap=<span class="literal">None</span>, norm=<span class="literal">None</span>, vmin=<span class="literal">None</span>, vmax=<span class="literal">None</span>, alpha=<span class="literal">None</span>, linewidths=<span class="literal">None</span>, verts=<span class="literal">None</span>, edgecolors=<span class="literal">None</span>, *, data=<span class="literal">None</span>, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x，y：表示的是大小为(n,)的数组，也就是我们即将绘制散点图的数据点</span></span><br><span class="line"><span class="comment"># s:是一个实数或者是一个数组大小为(n,)，这个是一个可选的参数。</span></span><br><span class="line"><span class="comment"># c:表示的是颜色，也是一个可选项。默认是蓝色'b',表示的是标记的颜色，或者可以是一个表示颜色的字符，或者是一个长度为n的表示颜色的序列等等.</span></span><br><span class="line"><span class="comment"># marker:表示的是标记的样式，默认的是'o'。</span></span><br></pre></td></tr></table></figure></li><li><p><strong>io.imread()</strong></p></li><li><p><strong>os.path.join()</strong>：<code>io.imread(os.path.join(&#39;data/faces/&#39;, img_name))</code></p></li><li><p><strong>fig = plt.figure()</strong>：一个画布</p></li><li><p><strong>ax = plt.subplot(1, 4, i + 1)</strong>：子图，1行，4列，这个是第i+1个</p></li><li><p><strong>ax.set_title</strong>(‘Sample #{}’.format(i))</p></li><li><p><strong>ax.axis(‘off’)</strong></p></li><li><p><strong>image = image.transpose((2, 0, 1))</strong>：交换颜色轴，因为numpy包的图片是: H <em> W </em> C，torch包的图片是: C <em> H </em> W</p></li><li><p><strong>plt.tight_layout()</strong>： 自动调整子图参数，使之填充整个图像区域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 并遍历数据样本。我们将会打印出前四个例子的尺寸并展示标注的特征点。</span></span><br><span class="line">face_dataset = FaceLandmarksDataset(csv_file=<span class="string">'data/faces/face_landmarks.csv'</span>, root_dir=<span class="string">'data/faces/'</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(face_dataset)):</span><br><span class="line">    sample = face_dataset[i]</span><br><span class="line">    </span><br><span class="line">    print(i, sample[<span class="string">'image'</span>].shape, sample[<span class="string">'landmarks'</span>].shape)</span><br><span class="line">    </span><br><span class="line">    ax = plt.subplot(<span class="number">1</span>, <span class="number">4</span>, i + <span class="number">1</span>)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    ax.set_title(<span class="string">'Sample #&#123;&#125;'</span>.format(i))</span><br><span class="line">    ax.axis(<span class="string">'off'</span>)</span><br><span class="line">    show_landmarks(**sample)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">3</span>:</span><br><span class="line">        plt.show()</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ol><h2><span id="mo-xing-xiang-guan">模型相关</span><a href="#mo-xing-xiang-guan" class="header-anchor">#</a></h2><ol><li><p><strong>保存加载整个模型</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># save model</span></span><br><span class="line">torch.save(model,<span class="string">'mymodel.pkl'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load model</span></span><br><span class="line">model=torch.load(<span class="string">'mymodel.pkl'</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>仅保存加载模型参数（推荐）</strong>：相比较于保存整个模型而言，仅保存模型参数的做法应该不仅节省空间，更有灵活性的优势。可以取出特定层的参数，这一点在已经训练好的模型上取与现有模型相同层的参数上应该有帮助。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># save model parameters</span></span><br><span class="line">torch.save(model.state_dict(), <span class="string">'mymodel.pkl'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># load save model parameters</span></span><br><span class="line">model_object.load_state_dict(torch.load(<span class="string">'mymodel.pkl'</span>))</span><br></pre></td></tr></table></figure></li><li><p><strong>加载别的模型中相同的网络参数至新的模型</strong>：用已经训练好的网络参数作为自己模型的网络权重的初始化。下面代码实现了从<code>model_from</code>到<code>model to</code>的相同网络参数的拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transfer_weights</span><span class="params">(model_from, model_to)</span>:</span></span><br><span class="line">    wf = copy.deepcopy(model_from.state_dict()) <span class="comment"># 对 model from中的模型参数的深度拷贝;</span></span><br><span class="line">    wt = model_to.state_dict() <span class="comment"># 对 model to模型参数的获取</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果在model to中出现的网络结构，但是在model from中没有出现，那么就拷贝一份给wf。这样做的目的是让wf扩充后的结构跟wt一样，即保留了model from中的模型参数，又将结构扩充到跟 model to的一样</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> wt.keys() :</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> k <span class="keyword">in</span> wf):      </span><br><span class="line">            wf[k] = wt[k]</span><br><span class="line">            </span><br><span class="line">    model_to.load_state_dict(wf) <span class="comment"># 通过load_state_dict函数加载我们想要的模型参数到目标模型model to中</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 以上的函数要求两个模型中如果具有相同的名字，那么对应的参数大小应该是一样的。</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/u014380165/article/details/78525273" target="_blank" rel="noopener">https://blog.csdn.net/u014380165/article/details/78525273</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;pytorch-su-cha-shou-ce&quot;&gt;Pytorch 速查手册&lt;/span&gt;&lt;a href=&quot;#pytorch-su-cha-shou-ce&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;希望整理曾经不懂的Pytor
      
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://sunxiaojie99.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>A View of Cloud Computing</title>
    <link href="https://sunxiaojie99.github.io/2020/04/20/cloud-compute/"/>
    <id>https://sunxiaojie99.github.io/2020/04/20/cloud-compute/</id>
    <published>2020-04-20T03:28:52.000Z</published>
    <updated>2020-04-20T07:47:38.427Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="This article is not open to you">    <label for="pass">This article is not open to you</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, this is a paper note, which needs password to access.
    
    </summary>
    
    
    
      <category term="paper" scheme="https://sunxiaojie99.github.io/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>build a wonderful world</title>
    <link href="https://sunxiaojie99.github.io/2020/04/18/world/"/>
    <id>https://sunxiaojie99.github.io/2020/04/18/world/</id>
    <published>2020-04-18T06:31:42.000Z</published>
    <updated>2020-04-20T07:42:24.499Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="ke-xue-ji-zhu-dao-di-ke-yi-wei-wo-men-dai-lai-shi-me">科学技术到底可以为我们带来什么</span><a href="#ke-xue-ji-zhu-dao-di-ke-yi-wei-wo-men-dai-lai-shi-me" class="header-anchor">#</a></h1><p>这是本篇文章的主题：社会企业家朱莉·科杜瓦（Julie Cordua）致力于解决一个“难以启齿”的问题：互联网上以图片和视频形式存在的儿童性侵。</p><h3><span id="chi-wo-hen-yuan-ba">离我很远吧</span><a href="#chi-wo-hen-yuan-ba" class="header-anchor">#</a></h3><p>Ted talk video的开始，首先映入眼帘的就是纯白色的背景，大大的字写着，“涉及成人话题”，在高科技术快速发达的今天，我们所有人无一不在享受着互联网技术带来的便利，最近出现的“星星”事件，我大胆猜测，虽然引起了人们的注意，但恐怕大多数人也只是和最开始的我抱着相同的心理，“竟然有这样的人”，“要制裁他”，但每个人心中也都有想，“这应该离我很远吧”。</p><a id="more"></a><h3><span id="nei-rong-ji-huo-bi">内容即货币</span><a href="#nei-rong-ji-huo-bi" class="header-anchor">#</a></h3><p>video中谈到，在刚刚过去的2019年，仅在美国，就仅在美国就有超过4500万涉及儿童性侵的图像和视频内容被举报至国家失踪与受虐儿童中心，比2018年翻了翻。更是难以想象这些数字背后的细节真相： 超过60%的图像拍摄的是不到12岁的孩子， 而且大多包含极端性暴力行为。 虐待者在专门讨论虐待儿童的聊天室里颇受欢迎， 随着更强的侵犯和更多受害者的出现， 他们在那里的排名和地位就更高。 </p><p>有一句话说的很对，它们的世界中，内容就是货币。它们快速掌握日渐更新的新技术，不断的加害于还没有认识清这个世界的孩子。 我们作为一个社会整体的回应却严重滞后。那些施暴者不分国界，甚至不分性别，在全世界各大品台中流动，而我们的执法工作仅在一个司法管辖区进行， 每一个企业只专注于他们自己的平台， 无利益即无关的想法使得他们之间很少沟通。</p><h3><span id="suo-en-de-xing-dong">索恩的行动</span><a href="#suo-en-de-xing-dong" class="header-anchor">#</a></h3><p>在索恩（Thorn）公司，她们的行动分为两步，联系执法机构政府，以更快的帮助孩子被解救；同时联系各大视频网站，通过使用她们的软件检测哪些涉及儿童性侵的图像和视频，报告给执法机构。</p><p>她们使用的技术是获取已经发现的在互联网传播的受害者视频，获得哈希值，利用哈希值唯一性，去检索各大网站的数据库，如果比对发现哈希值相同，移除内容， 并且将其报告给国家失踪与受虐儿童中心， 然后那些哈希再返回到她们的系统， 令每个使用该软件的企业都可以有更多的哈希值以比较。 当数百万的哈希值指向更多内容时， 全世界的企业就能实时识别并移除数百万的内容， 从全球的网络上移除儿童性侵媒体内容的速度将会大大提升。</p><p>例如，她们第一个合作伙伴，Imgur，每天有用户生产 的数百万内容被上传， 在开始使用系统的20分钟内， 有人尝试上传一个已知的儿童性侵内容。 Imgur因此能够及时阻止，移除内容， 并向国家失踪与受虐儿童中心报告。 他们更进一步， 找到并审查了内容发布人的账号， 却发现了其他上百个没看过的儿童性侵媒体内容。</p><h3><span id="together">Together</span><a href="#together" class="header-anchor">#</a></h3><p>很明显，如果需要构建这样的系统，必须拥有足够多的视频哈希值，不断扩充数据库，来更有效的组织视频的传播和散布。这也是这次ted演讲的目的，动员世界范围内数千名警官， 以及数百家企业。 </p><p>第一代受到侵犯的媒体资料被大肆传播的孩子们已经长大成人。加拿大儿童保护中心最近针对这些年轻人做了一个研究， 80%有过自杀的想法， 超过60%曾尝试自杀。 他们的大部分人每天都生活在恐惧中： 当他们走上街头， 或参加一个面试， 或是去学校， 或是在网上碰见的某个人，有超过30%人， 噩梦成为现实， 他们因为网上性侵的内容被认出。</p><p><strong>这条路不简单， 但并不是不可能</strong>。 现在需要展现我们社会的决心， 去着手解决非常难以直面的问题， 在黑暗中创造希望， 让那些孩子的声音能被听见； 去展现企业们的决心，采取一切措施并确保他们的平台不与儿童侵犯者共谋； 去展现政府部门的决心， 投资执法部门破案设施， 来调查数字先行的犯罪， 即便受害者无法为自己申辩。 </p><blockquote><p>作为一名有机会帮助到打击数字先行犯罪的人，希望未来我的研究可以做些什么，可以不仅仅是靠一个个的哈希值的比对，人为的加入数据库。</p></blockquote><h3><span id="in-a-future-every-child-can-simply-be-a-kid">In a future，every child can simply be a kid</span><a href="#in-a-future-every-child-can-simply-be-a-kid" class="header-anchor">#</a></h3><p><img src="/2020/04/18/world/a.png" alt="a"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;科学技术到底可以为我们带来什么&quot;&gt;&lt;a href=&quot;#科学技术到底可以为我们带来什么&quot; class=&quot;headerlink&quot; title=&quot;科学技术到底可以为我们带来什么&quot;&gt;&lt;/a&gt;科学技术到底可以为我们带来什么&lt;/h1&gt;&lt;p&gt;这是本篇文章的主题：社会企业家朱莉·科杜瓦（Julie Cordua）致力于解决一个“难以启齿”的问题：互联网上以图片和视频形式存在的儿童性侵。&lt;/p&gt;
&lt;h3 id=&quot;离我很远吧&quot;&gt;&lt;a href=&quot;#离我很远吧&quot; class=&quot;headerlink&quot; title=&quot;离我很远吧&quot;&gt;&lt;/a&gt;离我很远吧&lt;/h3&gt;&lt;p&gt;Ted talk video的开始，首先映入眼帘的就是纯白色的背景，大大的字写着，“涉及成人话题”，在高科技术快速发达的今天，我们所有人无一不在享受着互联网技术带来的便利，最近出现的“星星”事件，我大胆猜测，虽然引起了人们的注意，但恐怕大多数人也只是和最开始的我抱着相同的心理，“竟然有这样的人”，“要制裁他”，但每个人心中也都有想，“这应该离我很远吧”。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://sunxiaojie99.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Attribute-aware Pedestrian Image Editing</title>
    <link href="https://sunxiaojie99.github.io/2020/04/16/APIE/"/>
    <id>https://sunxiaojie99.github.io/2020/04/16/APIE/</id>
    <published>2020-04-16T03:28:52.000Z</published>
    <updated>2020-04-17T13:12:34.877Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="This article is not open to you">    <label for="pass">This article is not open to you</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Welcome to my blog, this is a paper note, which needs password to access.
    
    </summary>
    
    
    
      <category term="paper" scheme="https://sunxiaojie99.github.io/tags/paper/"/>
    
  </entry>
  
  <entry>
    <title>how to use markdown</title>
    <link href="https://sunxiaojie99.github.io/2020/04/13/markdown/"/>
    <id>https://sunxiaojie99.github.io/2020/04/13/markdown/</id>
    <published>2020-04-13T06:51:10.000Z</published>
    <updated>2020-04-17T12:32:02.886Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="1-biao-ti">1 标题</span><a href="#1-biao-ti" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><a id="more"></a><h2><span id="2-duan-luo">2 段落</span><a href="#2-duan-luo" class="header-anchor">#</a></h2><blockquote><p>段落的换行是使用<strong>两个以上空格加上回车</strong>，也可以在段落后面使用一个空行来表示重新开始一个段落</p></blockquote><p><strong>字体</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">**粗体文本**</span><br><span class="line">***粗斜体文本***</span><br></pre></td></tr></table></figure><p><strong>分割线</strong></p><blockquote><p>在一行中用三个以上的星号建立一个分隔线</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">***</span><br></pre></td></tr></table></figure><p><strong>删除线</strong></p><p><del>在两端加上两个波浪线</del></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~Baidu~~</span><br></pre></td></tr></table></figure><p><strong>下划线</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;带下划线的文本&lt;&#x2F;u&gt;</span><br></pre></td></tr></table></figure><p><strong>脚注</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建脚注格式类似这样 [^RUNOOB]。</span><br><span class="line">[^RUNOOB]:菜鸟教程 -- 学的不仅是技术，更是梦想！！！</span><br></pre></td></tr></table></figure><p>我是一个脚注  <sup><a href="#fn_myself" id="reffn_myself">myself</a></sup> 。</p><h2><span id="3-lie-biao">3 列表</span><a href="#3-lie-biao" class="header-anchor">#</a></h2><p><strong>无序列表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure><p><strong>有序列表</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><p><strong>列表嵌套</strong></p><blockquote><p>只需在子列表中的选项添加四个空格即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><h2><span id="4-qu-kuai">4 区块</span><a href="#4-qu-kuai" class="header-anchor">#</a></h2><blockquote><p>在段落开头使用 &gt; 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">区块嵌套</span><br><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br><span class="line"></span><br><span class="line">区块中使用列表</span><br><span class="line">&gt; 1. 第一项</span><br><span class="line">&gt; 2. 第二项</span><br><span class="line">&gt; + 第一项</span><br><span class="line">&gt; + 第二项</span><br><span class="line">&gt; + 第三项</span><br><span class="line"></span><br><span class="line">列表中使用区块：需要在 &gt; 前添加四个空格的缩进</span><br><span class="line">* 第一项</span><br><span class="line">    &gt; oneone</span><br><span class="line">    &gt; twotwo</span><br><span class="line">* 第二项</span><br></pre></td></tr></table></figure><ul><li>第一项<blockquote><p>oneone<br>twotwo</p></blockquote></li></ul><h2><span id="5-dai-ma">5 代码</span><a href="#5-dai-ma" class="header-anchor">#</a></h2><blockquote><p>用 ``` 包裹一段代码，并指定一种语言（也可以不指定）</p></blockquote><h2><span id="6-lian-jie">6 链接</span><a href="#6-lian-jie" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [链接名](https:&#x2F;&#x2F;www.baidu.com)</span><br><span class="line"></span><br><span class="line">直接使用链接地址</span><br><span class="line">&lt;https:&#x2F;&#x2F;www.baidu.com&gt;</span><br><span class="line"></span><br><span class="line">可以通过变量来设置一个链接，变量赋值在文档末尾进行：</span><br><span class="line">这个链接用 1 作为网址变量 [Google][1]</span><br><span class="line">这个链接用 runoob 作为网址变量 [Runoob][runoob]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[1]: http:&#x2F;&#x2F;www.google.com&#x2F;</span><br><span class="line">[runoob]: http:&#x2F;&#x2F;www.runoob.com&#x2F;</span><br></pre></td></tr></table></figure><p>这是一个链接 <a href="https://www.baidu.com" target="_blank" rel="noopener">链接名</a></p><h2><span id="7-tu-pian">7 图片</span><a href="#7-tu-pian" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开头一个感叹号 !;接着一个方括号，里面放上图片的替代文字;接着一个普通括号，里面放上图片的网址</span><br><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 &lt;img&gt; 标签。</span><br><span class="line">&lt;img src&#x3D;&quot;xxxx.png&quot; width&#x3D;&quot;50%&quot;&gt;</span><br></pre></td></tr></table></figure><h2><span id="8-biao-ge">8 表格</span><a href="#8-biao-ge" class="header-anchor">#</a></h2><blockquote><p>使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行<br>并且可以设置表格的对齐方式</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">| 表头 | 表头 |</span><br><span class="line">| --- | --- |</span><br><span class="line">| 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 |</span><br><span class="line"></span><br><span class="line">-: 设置内容和标题栏居右对齐。</span><br><span class="line">:- 设置内容和标题栏居左对齐。</span><br><span class="line">:-: 设置内容和标题栏居中对齐</span><br><span class="line"></span><br><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><h2><span id="9-html">9 HTML</span><a href="#9-html" class="header-anchor">#</a></h2><blockquote><p>Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写<br>持的 HTML 元素有：<kbd> <b> <i> <em> <sup> <sub> <br>等 ，如：</sub></sup></em></i></b></kbd></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Alt&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Del&lt;&#x2F;kbd&gt; 重启电脑</span><br></pre></td></tr></table></figure><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><h2><span id="10-gong-shi">10 公式</span><a href="#10-gong-shi" class="header-anchor">#</a></h2><blockquote><p>使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 &#x3D;  \begin&#123;vmatrix&#125; </span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$&#123;$tep1&#125;&#123;\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}</script><h2><span id="11-liu-cheng-tu">11 流程图</span><a href="#11-liu-cheng-tu" class="header-anchor">#</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">横向流程图</span><br><span class="line"> + mermaid</span><br><span class="line">graph LR</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">B--&gt; C&#123;条件a&#125;</span><br><span class="line">C--&gt;|a&#x3D;1| D[结果1]</span><br><span class="line">C--&gt;|a&#x3D;2| E[结果2]</span><br><span class="line">F[横向流程图]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">B--&gt; C&#123;条件a&#125;</span><br><span class="line">C--&gt;|a&#x3D;1| D[结果1]</span><br><span class="line">C--&gt;|a&#x3D;2| E[结果2]</span><br><span class="line">F[横向流程图]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">竖向流程图</span><br><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">B --&gt; C&#123;条件a&#125;</span><br><span class="line">C --&gt; |a&#x3D;1| D[结果1]</span><br><span class="line">C --&gt; |a&#x3D;2| E[结果2]</span><br><span class="line">F[竖向流程图]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt; B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt; |a&#x3D;1| D[结果1]</span><br><span class="line">    C --&gt; |a&#x3D;2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      未完待续，持续更新
    
    </summary>
    
    
    
      <category term="随笔" scheme="https://sunxiaojie99.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>The Website</title>
    <link href="https://sunxiaojie99.github.io/2020/04/13/About%20Me/"/>
    <id>https://sunxiaojie99.github.io/2020/04/13/About%20Me/</id>
    <published>2020-04-13T04:34:02.000Z</published>
    <updated>2020-04-20T07:42:32.071Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="jie-shao">介绍</span><a href="#jie-shao" class="header-anchor">#</a></h1><p>本网站用途：</p><ol><li>随时记录一些个人的学习总结；</li><li>记录一些关于日常生活的感悟；</li><li>其他一些杂七杂八的东西；</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;jie-shao&quot;&gt;介绍&lt;/span&gt;&lt;a href=&quot;#jie-shao&quot; class=&quot;header-anchor&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;本网站用途：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;随时记录一些个人的学习总结；&lt;/li&gt;
&lt;li&gt;记录一些关于日常
      
    
    </summary>
    
    
    
      <category term="other" scheme="https://sunxiaojie99.github.io/tags/other/"/>
    
  </entry>
  
</feed>
